
/home/ismoil/projects/MCU/STM32F401_Weact_BlackPill/rtt_template/build/build-rtt_template-STM32F401-Debug/Debug_STM32F40_77c9d40222e7ab2c/firmware.9bcf18e4/firmware.elf:     file format elf32-littlearm


Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20010000 	andcs	r0, r1, r0
 8000004:	08000789 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl}
 8000008:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 800000c:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000010:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000014:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000018:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
	...
 800002c:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000030:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 800003c:	08000649 	stmdaeq	r0, {r0, r3, r6, r9, sl}
 8000040:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000044:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000048:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 800004c:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000050:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000054:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000058:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 800005c:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000060:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000064:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000068:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 800006c:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000070:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000074:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000078:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 800007c:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000080:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000084:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000088:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
	...
 800009c:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000a0:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000a4:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000a8:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000ac:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000b0:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000b4:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000b8:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000bc:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000c0:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000c4:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000c8:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000cc:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000d0:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000d4:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000d8:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000dc:	00000000 	andeq	r0, r0, r0
 80000e0:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000e4:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 80000e8:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
	...
 80000fc:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000100:	00000000 	andeq	r0, r0, r0
 8000104:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000108:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 800010c:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
	...
 8000120:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000124:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000128:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 800012c:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000130:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
	...
 800014c:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000150:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000154:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000158:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 800015c:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000160:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
 8000164:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
	...
 8000184:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}
	...
 8000190:	080007d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl}

Disassembly of section .text:

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__do_global_dtors_aux>:
 80001a4:	b510      	push	{r4, lr}
 80001a6:	4c05      	ldr	r4, [pc, #20]	; (80001bc <__do_global_dtors_aux+0x18>)
 80001a8:	7823      	ldrb	r3, [r4, #0]
 80001aa:	b933      	cbnz	r3, 80001ba <__do_global_dtors_aux+0x16>
 80001ac:	4b04      	ldr	r3, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x1c>)
 80001ae:	b113      	cbz	r3, 80001b6 <__do_global_dtors_aux+0x12>
 80001b0:	4804      	ldr	r0, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x20>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	2301      	movs	r3, #1
 80001b8:	7023      	strb	r3, [r4, #0]
 80001ba:	bd10      	pop	{r4, pc}
 80001bc:	20000430 	andcs	r0, r0, r0, lsr r4
 80001c0:	00000000 	andeq	r0, r0, r0
 80001c4:	08000be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp}

080001c8 <frame_dummy>:
 80001c8:	b508      	push	{r3, lr}
 80001ca:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <frame_dummy+0x10>)
 80001cc:	b11b      	cbz	r3, 80001d6 <frame_dummy+0xe>
 80001ce:	4903      	ldr	r1, [pc, #12]	; (80001dc <frame_dummy+0x14>)
 80001d0:	4803      	ldr	r0, [pc, #12]	; (80001e0 <frame_dummy+0x18>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	bd08      	pop	{r3, pc}
 80001d8:	00000000 	andeq	r0, r0, r0
 80001dc:	20000434 	andcs	r0, r0, r4, lsr r4
 80001e0:	08000be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp}

080001e4 <atexit>:
 80001e4:	2300      	movs	r3, #0
 80001e6:	4601      	mov	r1, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 b88c 	b.w	8000308 <__register_exitproc>

080001f0 <__libc_fini_array>:
 80001f0:	b538      	push	{r3, r4, r5, lr}
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <__libc_fini_array+0x24>)
 80001f4:	4d08      	ldr	r5, [pc, #32]	; (8000218 <__libc_fini_array+0x28>)
 80001f6:	1b5b      	subs	r3, r3, r5
 80001f8:	109c      	asrs	r4, r3, #2
 80001fa:	d007      	beq.n	800020c <__libc_fini_array+0x1c>
 80001fc:	3b04      	subs	r3, #4
 80001fe:	441d      	add	r5, r3
 8000200:	3c01      	subs	r4, #1
 8000202:	f855 3904 	ldr.w	r3, [r5], #-4
 8000206:	4798      	blx	r3
 8000208:	2c00      	cmp	r4, #0
 800020a:	d1f9      	bne.n	8000200 <__libc_fini_array+0x10>
 800020c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000210:	f000 bcee 	b.w	8000bf0 <_fini>
 8000214:	08000c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp}
 8000218:	08000c58 	stmdaeq	r0, {r3, r4, r6, sl, fp}

0800021c <__libc_init_array>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	4e0d      	ldr	r6, [pc, #52]	; (8000254 <__libc_init_array+0x38>)
 8000220:	4d0d      	ldr	r5, [pc, #52]	; (8000258 <__libc_init_array+0x3c>)
 8000222:	1b76      	subs	r6, r6, r5
 8000224:	10b6      	asrs	r6, r6, #2
 8000226:	d006      	beq.n	8000236 <__libc_init_array+0x1a>
 8000228:	2400      	movs	r4, #0
 800022a:	f855 3b04 	ldr.w	r3, [r5], #4
 800022e:	3401      	adds	r4, #1
 8000230:	4798      	blx	r3
 8000232:	42a6      	cmp	r6, r4
 8000234:	d1f9      	bne.n	800022a <__libc_init_array+0xe>
 8000236:	4e09      	ldr	r6, [pc, #36]	; (800025c <__libc_init_array+0x40>)
 8000238:	4d09      	ldr	r5, [pc, #36]	; (8000260 <__libc_init_array+0x44>)
 800023a:	1b76      	subs	r6, r6, r5
 800023c:	f000 fcd2 	bl	8000be4 <_init>
 8000240:	10b6      	asrs	r6, r6, #2
 8000242:	d006      	beq.n	8000252 <__libc_init_array+0x36>
 8000244:	2400      	movs	r4, #0
 8000246:	f855 3b04 	ldr.w	r3, [r5], #4
 800024a:	3401      	adds	r4, #1
 800024c:	4798      	blx	r3
 800024e:	42a6      	cmp	r6, r4
 8000250:	d1f9      	bne.n	8000246 <__libc_init_array+0x2a>
 8000252:	bd70      	pop	{r4, r5, r6, pc}
 8000254:	08000c50 	stmdaeq	r0, {r4, r6, sl, fp}
 8000258:	08000c50 	stmdaeq	r0, {r4, r6, sl, fp}
 800025c:	08000c58 	stmdaeq	r0, {r3, r4, r6, sl, fp}
 8000260:	08000c50 	stmdaeq	r0, {r4, r6, sl, fp}

08000264 <memset>:
 8000264:	0783      	lsls	r3, r0, #30
 8000266:	b530      	push	{r4, r5, lr}
 8000268:	d048      	beq.n	80002fc <memset+0x98>
 800026a:	1e54      	subs	r4, r2, #1
 800026c:	2a00      	cmp	r2, #0
 800026e:	d03f      	beq.n	80002f0 <memset+0x8c>
 8000270:	b2ca      	uxtb	r2, r1
 8000272:	4603      	mov	r3, r0
 8000274:	e001      	b.n	800027a <memset+0x16>
 8000276:	3c01      	subs	r4, #1
 8000278:	d33a      	bcc.n	80002f0 <memset+0x8c>
 800027a:	f803 2b01 	strb.w	r2, [r3], #1
 800027e:	079d      	lsls	r5, r3, #30
 8000280:	d1f9      	bne.n	8000276 <memset+0x12>
 8000282:	2c03      	cmp	r4, #3
 8000284:	d92d      	bls.n	80002e2 <memset+0x7e>
 8000286:	b2cd      	uxtb	r5, r1
 8000288:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800028c:	2c0f      	cmp	r4, #15
 800028e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000292:	d936      	bls.n	8000302 <memset+0x9e>
 8000294:	f1a4 0210 	sub.w	r2, r4, #16
 8000298:	f022 0c0f 	bic.w	ip, r2, #15
 800029c:	f103 0e20 	add.w	lr, r3, #32
 80002a0:	44e6      	add	lr, ip
 80002a2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80002a6:	f103 0210 	add.w	r2, r3, #16
 80002aa:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002ae:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002b2:	3210      	adds	r2, #16
 80002b4:	4572      	cmp	r2, lr
 80002b6:	d1f8      	bne.n	80002aa <memset+0x46>
 80002b8:	f10c 0201 	add.w	r2, ip, #1
 80002bc:	f014 0f0c 	tst.w	r4, #12
 80002c0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002c4:	f004 0c0f 	and.w	ip, r4, #15
 80002c8:	d013      	beq.n	80002f2 <memset+0x8e>
 80002ca:	f1ac 0304 	sub.w	r3, ip, #4
 80002ce:	f023 0303 	bic.w	r3, r3, #3
 80002d2:	3304      	adds	r3, #4
 80002d4:	4413      	add	r3, r2
 80002d6:	f842 5b04 	str.w	r5, [r2], #4
 80002da:	4293      	cmp	r3, r2
 80002dc:	d1fb      	bne.n	80002d6 <memset+0x72>
 80002de:	f00c 0403 	and.w	r4, ip, #3
 80002e2:	b12c      	cbz	r4, 80002f0 <memset+0x8c>
 80002e4:	b2ca      	uxtb	r2, r1
 80002e6:	441c      	add	r4, r3
 80002e8:	f803 2b01 	strb.w	r2, [r3], #1
 80002ec:	429c      	cmp	r4, r3
 80002ee:	d1fb      	bne.n	80002e8 <memset+0x84>
 80002f0:	bd30      	pop	{r4, r5, pc}
 80002f2:	4664      	mov	r4, ip
 80002f4:	4613      	mov	r3, r2
 80002f6:	2c00      	cmp	r4, #0
 80002f8:	d1f4      	bne.n	80002e4 <memset+0x80>
 80002fa:	e7f9      	b.n	80002f0 <memset+0x8c>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4614      	mov	r4, r2
 8000300:	e7bf      	b.n	8000282 <memset+0x1e>
 8000302:	461a      	mov	r2, r3
 8000304:	46a4      	mov	ip, r4
 8000306:	e7e0      	b.n	80002ca <memset+0x66>

08000308 <__register_exitproc>:
 8000308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800030c:	4d1d      	ldr	r5, [pc, #116]	; (8000384 <__register_exitproc+0x7c>)
 800030e:	4606      	mov	r6, r0
 8000310:	6828      	ldr	r0, [r5, #0]
 8000312:	4698      	mov	r8, r3
 8000314:	460f      	mov	r7, r1
 8000316:	4691      	mov	r9, r2
 8000318:	f000 f842 	bl	80003a0 <__retarget_lock_acquire_recursive>
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <__register_exitproc+0x80>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8000324:	b31c      	cbz	r4, 800036e <__register_exitproc+0x66>
 8000326:	6828      	ldr	r0, [r5, #0]
 8000328:	6865      	ldr	r5, [r4, #4]
 800032a:	2d1f      	cmp	r5, #31
 800032c:	dc24      	bgt.n	8000378 <__register_exitproc+0x70>
 800032e:	b94e      	cbnz	r6, 8000344 <__register_exitproc+0x3c>
 8000330:	1c6b      	adds	r3, r5, #1
 8000332:	3502      	adds	r5, #2
 8000334:	6063      	str	r3, [r4, #4]
 8000336:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800033a:	f000 f833 	bl	80003a4 <__retarget_lock_release_recursive>
 800033e:	2000      	movs	r0, #0
 8000340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000344:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8000348:	2301      	movs	r3, #1
 800034a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800034e:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8000352:	40ab      	lsls	r3, r5
 8000354:	431a      	orrs	r2, r3
 8000356:	2e02      	cmp	r6, #2
 8000358:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 800035c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8000360:	d1e6      	bne.n	8000330 <__register_exitproc+0x28>
 8000362:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8000366:	4313      	orrs	r3, r2
 8000368:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800036c:	e7e0      	b.n	8000330 <__register_exitproc+0x28>
 800036e:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8000372:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8000376:	e7d6      	b.n	8000326 <__register_exitproc+0x1e>
 8000378:	f000 f814 	bl	80003a4 <__retarget_lock_release_recursive>
 800037c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000380:	e7de      	b.n	8000340 <__register_exitproc+0x38>
 8000382:	bf00      	nop
 8000384:	20000428 	andcs	r0, r0, r8, lsr #8
 8000388:	08000c28 	stmdaeq	r0, {r3, r5, sl, fp}

0800038c <register_fini>:
 800038c:	4b02      	ldr	r3, [pc, #8]	; (8000398 <register_fini+0xc>)
 800038e:	b113      	cbz	r3, 8000396 <register_fini+0xa>
 8000390:	4802      	ldr	r0, [pc, #8]	; (800039c <register_fini+0x10>)
 8000392:	f7ff bf27 	b.w	80001e4 <atexit>
 8000396:	4770      	bx	lr
 8000398:	00000000 	andeq	r0, r0, r0
 800039c:	080001f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8}

080003a0 <__retarget_lock_acquire_recursive>:
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop

080003a4 <__retarget_lock_release_recursive>:
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop

080003a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	6039      	str	r1, [r7, #0]
 80003b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	db0a      	blt.n	80003d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	b2da      	uxtb	r2, r3
 80003c0:	490c      	ldr	r1, [pc, #48]	; (80003f4 <__NVIC_SetPriority+0x4c>)
 80003c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c6:	0112      	lsls	r2, r2, #4
 80003c8:	b2d2      	uxtb	r2, r2
 80003ca:	440b      	add	r3, r1
 80003cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003d0:	e00a      	b.n	80003e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4908      	ldr	r1, [pc, #32]	; (80003f8 <__NVIC_SetPriority+0x50>)
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	f003 030f 	and.w	r3, r3, #15
 80003de:	3b04      	subs	r3, #4
 80003e0:	0112      	lsls	r2, r2, #4
 80003e2:	b2d2      	uxtb	r2, r2
 80003e4:	440b      	add	r3, r1
 80003e6:	761a      	strb	r2, [r3, #24]
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	e000e100 	and	lr, r0, r0, lsl #2
 80003f8:	e000ed00 	and	lr, r0, r0, lsl #26

080003fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3b01      	subs	r3, #1
 8000408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800040c:	d301      	bcc.n	8000412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040e:	2301      	movs	r3, #1
 8000410:	e00f      	b.n	8000432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <SysTick_Config+0x40>)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3b01      	subs	r3, #1
 8000418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041a:	210f      	movs	r1, #15
 800041c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000420:	f7ff ffc2 	bl	80003a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <SysTick_Config+0x40>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <SysTick_Config+0x40>)
 800042c:	2207      	movs	r2, #7
 800042e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	e000e010 	and	lr, r0, r0, lsl r0

08000440 <delay_ms>:
#include "stm32f4xx.h"
#include "SEGGER_RTT.h"

__IO uint32_t tick = 0;

void delay_ms(const uint32_t ms){
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
    uint32_t start = tick;
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <delay_ms+0x2c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	60fb      	str	r3, [r7, #12]
    while ((tick - start)<ms){}
 800044e:	bf00      	nop
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <delay_ms+0x2c>)
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	429a      	cmp	r2, r3
 800045c:	d8f8      	bhi.n	8000450 <delay_ms+0x10>
}
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	20000450 	andcs	r0, r0, r0, asr r4

08000470 <GPIO_Init>:

void GPIO_Init(void){
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <GPIO_Init+0x44>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <GPIO_Init+0x44>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6313      	str	r3, [r2, #48]	; 0x30

    SET_BIT(GPIOC->BSRR, GPIO_BSRR_BS13);
 8000480:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <GPIO_Init+0x48>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a0c      	ldr	r2, [pc, #48]	; (80004b8 <GPIO_Init+0x48>)
 8000486:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800048a:	6193      	str	r3, [r2, #24]
    MODIFY_REG(GPIOC->MODER, GPIO_MODER_MODE13_1, GPIO_MODER_MODE13_0);
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <GPIO_Init+0x48>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000494:	4a08      	ldr	r2, [pc, #32]	; (80004b8 <GPIO_Init+0x48>)
 8000496:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800049a:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(GPIOC->OTYPER, GPIO_OTYPER_OT13);
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <GPIO_Init+0x48>)
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <GPIO_Init+0x48>)
 80004a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004a6:	6053      	str	r3, [r2, #4]

}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40023800 	andmi	r3, r2, r0, lsl #16
 80004b8:	40020800 	andmi	r0, r2, r0, lsl #16

080004bc <SetSysClkTo84>:

void SetSysClkTo84(void){
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

    SET_BIT(FLASH->ACR, FLASH_ACR_PRFTEN);
 80004c0:	4b3e      	ldr	r3, [pc, #248]	; (80005bc <SetSysClkTo84+0x100>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a3d      	ldr	r2, [pc, #244]	; (80005bc <SetSysClkTo84+0x100>)
 80004c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ca:	6013      	str	r3, [r2, #0]
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_2WS);
 80004cc:	4b3b      	ldr	r3, [pc, #236]	; (80005bc <SetSysClkTo84+0x100>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f023 0307 	bic.w	r3, r3, #7
 80004d4:	4a39      	ldr	r2, [pc, #228]	; (80005bc <SetSysClkTo84+0x100>)
 80004d6:	f043 0302 	orr.w	r3, r3, #2
 80004da:	6013      	str	r3, [r2, #0]
    while (READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY)!= FLASH_ACR_LATENCY_2WS){}
 80004dc:	bf00      	nop
 80004de:	4b37      	ldr	r3, [pc, #220]	; (80005bc <SetSysClkTo84+0x100>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f003 0307 	and.w	r3, r3, #7
 80004e6:	2b02      	cmp	r3, #2
 80004e8:	d1f9      	bne.n	80004de <SetSysClkTo84+0x22>

    CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM);
 80004ea:	4b35      	ldr	r3, [pc, #212]	; (80005c0 <SetSysClkTo84+0x104>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	4a34      	ldr	r2, [pc, #208]	; (80005c0 <SetSysClkTo84+0x104>)
 80004f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80004f4:	6053      	str	r3, [r2, #4]
    SET_BIT(RCC->PLLCFGR, 25 << RCC_PLLCFGR_PLLM_Pos);
 80004f6:	4b32      	ldr	r3, [pc, #200]	; (80005c0 <SetSysClkTo84+0x104>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	4a31      	ldr	r2, [pc, #196]	; (80005c0 <SetSysClkTo84+0x104>)
 80004fc:	f043 0319 	orr.w	r3, r3, #25
 8000500:	6053      	str	r3, [r2, #4]

    CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN);
 8000502:	4b2f      	ldr	r3, [pc, #188]	; (80005c0 <SetSysClkTo84+0x104>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	4a2e      	ldr	r2, [pc, #184]	; (80005c0 <SetSysClkTo84+0x104>)
 8000508:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800050c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000510:	6053      	str	r3, [r2, #4]
    SET_BIT(RCC->PLLCFGR, 168 << RCC_PLLCFGR_PLLN_Pos);
 8000512:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <SetSysClkTo84+0x104>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	4a2a      	ldr	r2, [pc, #168]	; (80005c0 <SetSysClkTo84+0x104>)
 8000518:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 800051c:	6053      	str	r3, [r2, #4]

    CLEAR_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP);
 800051e:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <SetSysClkTo84+0x104>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <SetSysClkTo84+0x104>)
 8000524:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000528:	6053      	str	r3, [r2, #4]

    SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800052a:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <SetSysClkTo84+0x104>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	4a24      	ldr	r2, [pc, #144]	; (80005c0 <SetSysClkTo84+0x104>)
 8000530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000534:	6053      	str	r3, [r2, #4]

    CLEAR_BIT(RCC->CFGR, RCC_CFGR_HPRE_3);    // AHB prescaler - not divided
 8000536:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <SetSysClkTo84+0x104>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <SetSysClkTo84+0x104>)
 800053c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000540:	6093      	str	r3, [r2, #8]

    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1_0 | RCC_CFGR_PPRE1_1, RCC_CFGR_PPRE1_2);   // APB1 prescaler - divided by 2
 8000542:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <SetSysClkTo84+0x104>)
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <SetSysClkTo84+0x104>)
 800054c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000550:	6093      	str	r3, [r2, #8]

    CLEAR_BIT(RCC->CFGR, RCC_CFGR_PPRE2_2);    // APB2 prescaler - not divided
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <SetSysClkTo84+0x104>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <SetSysClkTo84+0x104>)
 8000558:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800055c:	6093      	str	r3, [r2, #8]

    SET_BIT(RCC->CR, RCC_CR_HSEON);
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <SetSysClkTo84+0x104>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <SetSysClkTo84+0x104>)
 8000564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000568:	6013      	str	r3, [r2, #0]
    while(!READ_BIT(RCC->CR, RCC_CR_HSERDY)){}
 800056a:	bf00      	nop
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <SetSysClkTo84+0x104>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0f9      	beq.n	800056c <SetSysClkTo84+0xb0>

    SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <SetSysClkTo84+0x104>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <SetSysClkTo84+0x104>)
 800057e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000582:	6013      	str	r3, [r2, #0]
    while(!READ_BIT(RCC->CR, RCC_CR_PLLRDY)){}
 8000584:	bf00      	nop
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <SetSysClkTo84+0x104>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0f9      	beq.n	8000586 <SetSysClkTo84+0xca>

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW_0, RCC_CFGR_SW_1);  // System clock - PLL
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <SetSysClkTo84+0x104>)
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	f023 0303 	bic.w	r3, r3, #3
 800059a:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <SetSysClkTo84+0x104>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	6093      	str	r3, [r2, #8]

    while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){}
 80005a2:	bf00      	nop
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <SetSysClkTo84+0x104>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	f003 030c 	and.w	r3, r3, #12
 80005ac:	2b08      	cmp	r3, #8
 80005ae:	d1f9      	bne.n	80005a4 <SetSysClkTo84+0xe8>

}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40023c00 	andmi	r3, r2, r0, lsl #24
 80005c0:	40023800 	andmi	r3, r2, r0, lsl #16

080005c4 <main>:



int main(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af02      	add	r7, sp, #8
    SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80005ca:	2300      	movs	r3, #0
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	2200      	movs	r2, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 faad 	bl	8000b34 <SEGGER_RTT_ConfigUpBuffer>

    SetSysClkTo84();
 80005da:	f7ff ff6f 	bl	80004bc <SetSysClkTo84>
    SystemCoreClockUpdate();
 80005de:	f000 f853 	bl	8000688 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock/1000);
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <main+0x70>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a14      	ldr	r2, [pc, #80]	; (8000638 <main+0x74>)
 80005e8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ec:	099b      	lsrs	r3, r3, #6
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff04 	bl	80003fc <SysTick_Config>
    GPIO_Init();
 80005f4:	f7ff ff3c 	bl	8000470 <GPIO_Init>

    while (1) {
        SET_BIT(GPIOC->BSRR, GPIO_BSRR_BR13);
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <main+0x78>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a0f      	ldr	r2, [pc, #60]	; (800063c <main+0x78>)
 80005fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000602:	6193      	str	r3, [r2, #24]
        SEGGER_RTT_WriteString(0, "LED turn ON\n");
 8000604:	490e      	ldr	r1, [pc, #56]	; (8000640 <main+0x7c>)
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fa80 	bl	8000b0c <SEGGER_RTT_WriteString>
        delay_ms(1000);
 800060c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000610:	f7ff ff16 	bl	8000440 <delay_ms>
        SET_BIT(GPIOC->BSRR, GPIO_BSRR_BS13);
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <main+0x78>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a08      	ldr	r2, [pc, #32]	; (800063c <main+0x78>)
 800061a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800061e:	6193      	str	r3, [r2, #24]
        SEGGER_RTT_WriteString(0, "LED turn OFF\n");
 8000620:	4908      	ldr	r1, [pc, #32]	; (8000644 <main+0x80>)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 fa72 	bl	8000b0c <SEGGER_RTT_WriteString>
        delay_ms(300);
 8000628:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800062c:	f7ff ff08 	bl	8000440 <delay_ms>
        SET_BIT(GPIOC->BSRR, GPIO_BSRR_BR13);
 8000630:	e7e2      	b.n	80005f8 <main+0x34>
 8000632:	bf00      	nop
 8000634:	2000042c 	andcs	r0, r0, ip, lsr #8
 8000638:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
 800063c:	40020800 	andmi	r0, r2, r0, lsl #16
 8000640:	08000bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp}
 8000644:	08000c0c 	stmdaeq	r0, {r2, r3, sl, fp}

08000648 <SysTick_Handler>:
    }

    return 0;
}

void SysTick_Handler(void){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
    tick++;
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <SysTick_Handler+0x18>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	4a03      	ldr	r2, [pc, #12]	; (8000660 <SysTick_Handler+0x18>)
 8000654:	6013      	str	r3, [r2, #0]
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	20000450 	andcs	r0, r0, r0, asr r4

08000664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SystemInit+0x20>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <SystemInit+0x20>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	and	lr, r0, r0, lsl #26

08000688 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	2302      	movs	r3, #2
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	2302      	movs	r3, #2
 80006a0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006a2:	4b34      	ldr	r3, [pc, #208]	; (8000774 <SystemCoreClockUpdate+0xec>)
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	f003 030c 	and.w	r3, r3, #12
 80006aa:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	2b08      	cmp	r3, #8
 80006b0:	d011      	beq.n	80006d6 <SystemCoreClockUpdate+0x4e>
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	d844      	bhi.n	8000742 <SystemCoreClockUpdate+0xba>
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d003      	beq.n	80006c6 <SystemCoreClockUpdate+0x3e>
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d004      	beq.n	80006ce <SystemCoreClockUpdate+0x46>
 80006c4:	e03d      	b.n	8000742 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80006c6:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <SystemCoreClockUpdate+0xf0>)
 80006c8:	4a2c      	ldr	r2, [pc, #176]	; (800077c <SystemCoreClockUpdate+0xf4>)
 80006ca:	601a      	str	r2, [r3, #0]
      break;
 80006cc:	e03d      	b.n	800074a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80006ce:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <SystemCoreClockUpdate+0xf0>)
 80006d0:	4a2b      	ldr	r2, [pc, #172]	; (8000780 <SystemCoreClockUpdate+0xf8>)
 80006d2:	601a      	str	r2, [r3, #0]
      break;
 80006d4:	e039      	b.n	800074a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <SystemCoreClockUpdate+0xec>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	0d9b      	lsrs	r3, r3, #22
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006e2:	4b24      	ldr	r3, [pc, #144]	; (8000774 <SystemCoreClockUpdate+0xec>)
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006ea:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d00c      	beq.n	800070c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006f2:	4a23      	ldr	r2, [pc, #140]	; (8000780 <SystemCoreClockUpdate+0xf8>)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fa:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <SystemCoreClockUpdate+0xec>)
 80006fc:	6852      	ldr	r2, [r2, #4]
 80006fe:	0992      	lsrs	r2, r2, #6
 8000700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000704:	fb02 f303 	mul.w	r3, r2, r3
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	e00b      	b.n	8000724 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <SystemCoreClockUpdate+0xf4>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	fbb2 f3f3 	udiv	r3, r2, r3
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <SystemCoreClockUpdate+0xec>)
 8000716:	6852      	ldr	r2, [r2, #4]
 8000718:	0992      	lsrs	r2, r2, #6
 800071a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800071e:	fb02 f303 	mul.w	r3, r2, r3
 8000722:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <SystemCoreClockUpdate+0xec>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	f003 0303 	and.w	r3, r3, #3
 800072e:	3301      	adds	r3, #1
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	fbb2 f3f3 	udiv	r3, r2, r3
 800073c:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <SystemCoreClockUpdate+0xf0>)
 800073e:	6013      	str	r3, [r2, #0]
      break;
 8000740:	e003      	b.n	800074a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <SystemCoreClockUpdate+0xf0>)
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <SystemCoreClockUpdate+0xf4>)
 8000746:	601a      	str	r2, [r3, #0]
      break;
 8000748:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <SystemCoreClockUpdate+0xec>)
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	091b      	lsrs	r3, r3, #4
 8000750:	f003 030f 	and.w	r3, r3, #15
 8000754:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <SystemCoreClockUpdate+0xfc>)
 8000756:	5cd3      	ldrb	r3, [r2, r3]
 8000758:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <SystemCoreClockUpdate+0xf0>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	fa22 f303 	lsr.w	r3, r2, r3
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <SystemCoreClockUpdate+0xf0>)
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	371c      	adds	r7, #28
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40023800 	andmi	r3, r2, r0, lsl #16
 8000778:	2000042c 	andcs	r0, r0, ip, lsr #8
 800077c:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8000780:	017d7840 	cmneq	sp, r0, asr #16
 8000784:	08000c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp}

08000788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800078e:	490e      	ldr	r1, [pc, #56]	; (80007c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007a4:	4c0b      	ldr	r4, [pc, #44]	; (80007d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007b2:	f7ff ff57 	bl	8000664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007b6:	f7ff fd31 	bl	800021c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ba:	f7ff ff03 	bl	80005c4 <main>
  bx  lr    
 80007be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007c0:	20010000 	andcs	r0, r1, r0
  ldr r0, =_sdata
 80007c4:	20000000 	andcs	r0, r0, r0
  ldr r1, =_edata
 80007c8:	20000430 	andcs	r0, r0, r0, lsr r4
  ldr r2, =_sidata
 80007cc:	08000c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp}
  ldr r2, =_sbss
 80007d0:	20000430 	andcs	r0, r0, r0, lsr r4
  ldr r4, =_ebss
 80007d4:	2000090c 	andcs	r0, r0, ip, lsl #18

080007d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC_IRQHandler>
	...

080007dc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <_DoInit+0xa0>)
 80007e4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80007e6:	22a8      	movs	r2, #168	; 0xa8
 80007e8:	2100      	movs	r1, #0
 80007ea:	6838      	ldr	r0, [r7, #0]
 80007ec:	f7ff fd3a 	bl	8000264 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2203      	movs	r2, #3
 80007f4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	2203      	movs	r2, #3
 80007fa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	4a20      	ldr	r2, [pc, #128]	; (8000880 <_DoInit+0xa4>)
 8000800:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <_DoInit+0xa8>)
 8000806:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800080e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	2200      	movs	r2, #0
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	4a16      	ldr	r2, [pc, #88]	; (8000880 <_DoInit+0xa4>)
 8000826:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <_DoInit+0xac>)
 800082c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	2210      	movs	r2, #16
 8000832:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2200      	movs	r2, #0
 8000838:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	2200      	movs	r2, #0
 800083e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2200      	movs	r2, #0
 8000844:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000846:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	e00c      	b.n	800086a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f1c3 030f 	rsb	r3, r3, #15
 8000856:	4a0d      	ldr	r2, [pc, #52]	; (800088c <_DoInit+0xb0>)
 8000858:	5cd1      	ldrb	r1, [r2, r3]
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	460a      	mov	r2, r1
 8000862:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3301      	adds	r3, #1
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b0f      	cmp	r3, #15
 800086e:	d9ef      	bls.n	8000850 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000870:	f3bf 8f5f 	dmb	sy
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000454 	andcs	r0, r0, r4, asr r4
 8000880:	08000c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp}
 8000884:	200004fc 	strdcs	r0, [r0], -ip
 8000888:	200008fc 	strdcs	r0, [r0], -ip
 800088c:	08000c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp}

08000890 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d905      	bls.n	80008c0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	3b01      	subs	r3, #1
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
 80008be:	e007      	b.n	80008d0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	689a      	ldr	r2, [r3, #8]
 80008c4:	69b9      	ldr	r1, [r7, #24]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	1acb      	subs	r3, r1, r3
 80008ca:	4413      	add	r3, r2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008da:	4293      	cmp	r3, r2
 80008dc:	bf28      	it	cs
 80008de:	4613      	movcs	r3, r2
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80008e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4293      	cmp	r3, r2
 80008e8:	bf28      	it	cs
 80008ea:	4613      	movcs	r3, r2
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	4413      	add	r3, r2
 80008f6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80008f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	6978      	ldr	r0, [r7, #20]
 80008fe:	f000 f963 	bl	8000bc8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000902:	6a3a      	ldr	r2, [r7, #32]
 8000904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000906:	4413      	add	r3, r2
 8000908:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	4413      	add	r3, r2
 8000910:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	4413      	add	r3, r2
 8000920:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	d101      	bne.n	8000930 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000930:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1b2      	bne.n	80008a6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8000940:	6a3b      	ldr	r3, [r7, #32]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3728      	adds	r7, #40	; 0x28
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800094a:	b580      	push	{r7, lr}
 800094c:	b088      	sub	sp, #32
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	429a      	cmp	r2, r3
 800096c:	d911      	bls.n	8000992 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	4413      	add	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	68b9      	ldr	r1, [r7, #8]
 800097c:	6938      	ldr	r0, [r7, #16]
 800097e:	f000 f923 	bl	8000bc8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000982:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8000986:	69fa      	ldr	r2, [r7, #28]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	441a      	add	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000990:	e01f      	b.n	80009d2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	4413      	add	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	68b9      	ldr	r1, [r7, #8]
 80009a4:	6938      	ldr	r0, [r7, #16]
 80009a6:	f000 f90f 	bl	8000bc8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	4413      	add	r3, r2
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	4619      	mov	r1, r3
 80009c2:	6938      	ldr	r0, [r7, #16]
 80009c4:	f000 f900 	bl	8000bc8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80009c8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	60da      	str	r2, [r3, #12]
}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80009da:	b480      	push	{r7}
 80009dc:	b087      	sub	sp, #28
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d808      	bhi.n	8000a08 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	1ad2      	subs	r2, r2, r3
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	4413      	add	r3, r2
 8000a02:	3b01      	subs	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e004      	b.n	8000a12 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000a12:	697b      	ldr	r3, [r7, #20]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	371c      	adds	r7, #28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	4613      	mov	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4413      	add	r3, r2
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <SEGGER_RTT_WriteNoLock+0x9c>)
 8000a3e:	4413      	add	r3, r2
 8000a40:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d029      	beq.n	8000a9e <SEGGER_RTT_WriteNoLock+0x7e>
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d82e      	bhi.n	8000aac <SEGGER_RTT_WriteNoLock+0x8c>
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <SEGGER_RTT_WriteNoLock+0x38>
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d013      	beq.n	8000a7e <SEGGER_RTT_WriteNoLock+0x5e>
 8000a56:	e029      	b.n	8000aac <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000a58:	6978      	ldr	r0, [r7, #20]
 8000a5a:	f7ff ffbe 	bl	80009da <_GetAvailWriteSpace>
 8000a5e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d202      	bcs.n	8000a6e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8000a6c:	e021      	b.n	8000ab2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	69b9      	ldr	r1, [r7, #24]
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f7ff ff67 	bl	800094a <_WriteNoCheck>
    break;
 8000a7c:	e019      	b.n	8000ab2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000a7e:	6978      	ldr	r0, [r7, #20]
 8000a80:	f7ff ffab 	bl	80009da <_GetAvailWriteSpace>
 8000a84:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	bf28      	it	cs
 8000a8e:	4613      	movcs	r3, r2
 8000a90:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	69b9      	ldr	r1, [r7, #24]
 8000a96:	6978      	ldr	r0, [r7, #20]
 8000a98:	f7ff ff57 	bl	800094a <_WriteNoCheck>
    break;
 8000a9c:	e009      	b.n	8000ab2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	69b9      	ldr	r1, [r7, #24]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff fef4 	bl	8000890 <_WriteBlocking>
 8000aa8:	61f8      	str	r0, [r7, #28]
    break;
 8000aaa:	e002      	b.n	8000ab2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    break;
 8000ab0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000ab2:	69fb      	ldr	r3, [r7, #28]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3720      	adds	r7, #32
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000454 	andcs	r0, r0, r4, asr r4

08000ac0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <SEGGER_RTT_Write+0x48>)
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <SEGGER_RTT_Write+0x1e>
 8000ada:	f7ff fe7f 	bl	80007dc <_DoInit>
  SEGGER_RTT_LOCK();
 8000ade:	f3ef 8311 	mrs	r3, BASEPRI
 8000ae2:	f04f 0120 	mov.w	r1, #32
 8000ae6:	f381 8811 	msr	BASEPRI, r1
 8000aea:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff ff95 	bl	8000a20 <SEGGER_RTT_WriteNoLock>
 8000af6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8000afe:	697b      	ldr	r3, [r7, #20]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000454 	andcs	r0, r0, r4, asr r4

08000b0c <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 8000b16:	6838      	ldr	r0, [r7, #0]
 8000b18:	f7ff fb3c 	bl	8000194 <strlen>
 8000b1c:	60f8      	str	r0, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	6839      	ldr	r1, [r7, #0]
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ffcc 	bl	8000ac0 <SEGGER_RTT_Write>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8000b44:	623b      	str	r3, [r7, #32]
 8000b46:	6a3b      	ldr	r3, [r7, #32]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d101      	bne.n	8000b54 <SEGGER_RTT_ConfigUpBuffer+0x20>
 8000b50:	f7ff fe44 	bl	80007dc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8000b56:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d82a      	bhi.n	8000bb4 <SEGGER_RTT_ConfigUpBuffer+0x80>
    SEGGER_RTT_LOCK();
 8000b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8000b62:	f04f 0120 	mov.w	r1, #32
 8000b66:	f381 8811 	msr	BASEPRI, r1
 8000b6a:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	4613      	mov	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4413      	add	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d00e      	beq.n	8000ba2 <SEGGER_RTT_ConfigUpBuffer+0x6e>
      pUp->sName        = sName;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ba6:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb2:	e002      	b.n	8000bba <SEGGER_RTT_ConfigUpBuffer+0x86>
  } else {
    r = -1;
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000454 	andcs	r0, r0, r4, asr r4

08000bc8 <memcpy>:
 8000bc8:	440a      	add	r2, r1
 8000bca:	4291      	cmp	r1, r2
 8000bcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd0:	d100      	bne.n	8000bd4 <memcpy+0xc>
 8000bd2:	4770      	bx	lr
 8000bd4:	b510      	push	{r4, lr}
 8000bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000bde:	4291      	cmp	r1, r2
 8000be0:	d1f9      	bne.n	8000bd6 <memcpy+0xe>
 8000be2:	bd10      	pop	{r4, pc}

08000be4 <_init>:
 8000be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be6:	bf00      	nop
 8000be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bea:	bc08      	pop	{r3}
 8000bec:	469e      	mov	lr, r3
 8000bee:	4770      	bx	lr

08000bf0 <_fini>:
 8000bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf2:	bf00      	nop
 8000bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf6:	bc08      	pop	{r3}
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	4770      	bx	lr

Disassembly of section .rodata:

08000bfc <_global_impure_ptr-0x2c>:
 8000bfc:	2044454c 	subcs	r4, r4, ip, asr #10
 8000c00:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 8000c04:	0a4e4f20 	beq	939488c <_sidata+0x1393c30>
 8000c08:	00000000 	andeq	r0, r0, r0
 8000c0c:	2044454c 	subcs	r4, r4, ip, asr #10
 8000c10:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 8000c14:	46464f20 	strbmi	r4, [r6], -r0, lsr #30
 8000c18:	0000000a 	andeq	r0, r0, sl
 8000c1c:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
 8000c20:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
 8000c24:	00000000 	andeq	r0, r0, r0

08000c28 <_global_impure_ptr>:
 8000c28:	20000000 	andcs	r0, r0, r0

08000c2c <AHBPrescTable>:
	...
 8000c34:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
 8000c38:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

08000c3c <_aInitStr.0>:
 8000c3c:	00000000 	andeq	r0, r0, r0
 8000c40:	54540000 	ldrbpl	r0, [r4], #-0
 8000c44:	45522052 	ldrbmi	r2, [r2, #-82]	; 0xffffffae
 8000c48:	53454747 	movtpl	r4, #22343	; 0x5747
 8000c4c:	00000000 	andeq	r0, r0, r0

Disassembly of section .init_array:

08000c50 <__exidx_end>:
 8000c50:	0800038d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9}

08000c54 <__frame_dummy_init_array_entry>:
 8000c54:	080001c9 	stmdaeq	r0, {r0, r3, r6, r7, r8}

Disassembly of section .fini_array:

08000c58 <__do_global_dtors_aux_fini_array_entry>:
 8000c58:	080001a5 	stmdaeq	r0, {r0, r2, r5, r7, r8}

Disassembly of section .data:

20000000 <impure_data>:
20000000:	00000000 	andeq	r0, r0, r0
20000004:	200002ec 	andcs	r0, r0, ip, ror #5
20000008:	20000354 	andcs	r0, r0, r4, asr r3
2000000c:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
	...
200000a8:	00000001 	andeq	r0, r0, r1
200000ac:	00000000 	andeq	r0, r0, r0
200000b0:	abcd330e 	blge	1f34ccf0 <_sidata+0x1734c094>
200000b4:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
200000b8:	0005deec 	andeq	sp, r5, ip, ror #29
200000bc:	0000000b 	andeq	r0, r0, fp
	...

20000428 <__atexit_recursive_mutex>:
20000428:	2000044c 	andcs	r0, r0, ip, asr #8

2000042c <SystemCoreClock>:
uint32_t SystemCoreClock = 16000000;
2000042c:	00f42400 	rscseq	r2, r4, r0, lsl #8

Disassembly of section .bss:

20000430 <completed.1>:
20000430:	00000000 	andeq	r0, r0, r0

20000434 <object.0>:
	...

2000044c <__lock___atexit_recursive_mutex>:
2000044c:	00000000 	andeq	r0, r0, r0

20000450 <tick>:
__IO uint32_t tick = 0;
20000450:	00000000 	andeq	r0, r0, r0

20000454 <_SEGGER_RTT>:
	...

200004fc <_acUpBuffer>:
	...

200008fc <_acDownBuffer>:
	...

Disassembly of section ._user_heap_stack:

2000090c <._user_heap_stack>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
*  Return value
*    >= 0 - Number of bytes written.
*     < 0 - Error.
*
*/
int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
   0:	00002f41 	andeq	r2, r0, r1, asr #30
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
  int                   Status;
  unsigned              FragLen;
  unsigned              Avail;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  INIT();
   c:	00000025 	andeq	r0, r0, r5, lsr #32
  10:	2d453705 	stclcs	7, cr3, [r5, #-20]	; 0xffffffec
  14:	0d06004d 	stceq	0, cr0, [r6, #-308]	; 0xfffffecc
  18:	02094d07 	andeq	r4, r9, #448	; 0x1c0
  1c:	0412060a 	ldreq	r0, [r2], #-1546	; 0xfffff9f6
  //
  // Validate terminal ID.
  //
  if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
  20:	01150114 	tsteq	r5, r4, lsl r1
    //
    // Get "to-host" ring buffer.
    //
    pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  24:	01180317 	tsteq	r8, r7, lsl r3
    //
    // Need to be able to change terminal, write data, change back.
    // Compute the fixed and variable sizes.
    //
    FragLen = STRLEN(s);
  28:	011b011a 	tsteq	fp, sl, lsl r1
  2c:	0122011c 			; <UNDEFINED> instruction: 0x0122011c

Disassembly of section .debug_info:

00000000 <.debug_info>:
int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
       0:	000009e7 	andeq	r0, r0, r7, ror #19
       4:	04010005 	streq	r0, [r1], #-5
       8:	00000000 	andeq	r0, r0, r0
  INIT();
       c:	00011a14 	andeq	r1, r1, r4, lsl sl
      10:	03a71d00 			; <UNDEFINED> instruction: 0x03a71d00
      14:	04a10000 	strteq	r0, [r1], #0
      18:	000c0000 	andeq	r0, ip, r0
	...
    pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
      24:	05150000 	ldreq	r0, [r5, #-0]
    FragLen = STRLEN(s);
      28:	0001b501 	andeq	fp, r1, r1, lsl #10
      2c:	01430300 	mrseq	r0, (UNDEF: 115)
    //
    // How we output depends upon the mode...
    //
    SEGGER_RTT_LOCK();
      30:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
      34:	0005fe08 	andeq	pc, r5, r8, lsl #28
      38:	fd087200 	stc2	2, cr7, [r8, #-0]
      3c:	74000001 	strvc	r0, [r0], #-1
    Avail = _GetAvailWriteSpace(pRing);
      40:	00046708 	andeq	r6, r4, r8, lsl #14
      44:	f4087500 	vst3.8	{d7,d9,d11}, [r8], r0
    switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
      48:	76000006 	strvc	r0, [r0], -r6
      4c:	00072a08 	andeq	r2, r7, r8, lsl #20
      50:	d7087b00 	strle	r7, [r8, -r0, lsl #22]
      54:	7c000006 	stcvc	0, cr0, [r0], {6}
      58:	0000fd08 	andeq	pc, r0, r8, lsl #26
      5c:	a9087e00 	stmdbge	r8, {r9, sl, fp, ip, sp, lr}
    case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
      //
      // If we are in skip mode and there is no space for the whole
      // of this output, don't bother switching terminals at all.
      //
      if (Avail < (FragLen + 4u)) {
      60:	7f000006 	svcvc	0x00000006
      64:	00041802 	andeq	r1, r4, r2, lsl #16
      68:	ae020000 	cdpge	0, 0, cr0, cr2, cr0, {0}
        Status = 0;
      6c:	01000004 	tsteq	r0, r4
      } else {
        _PostTerminalSwitch(pRing, TerminalId);
      70:	00021302 	andeq	r1, r2, r2, lsl #6
      74:	27020200 	strcs	r0, [r2, -r0, lsl #4]
      78:	03000003 	movweq	r0, #3
        Status = (int)_WriteBlocking(pRing, s, FragLen);
      7c:	0000c302 	andeq	ip, r0, r2, lsl #6
      80:	f4020400 	vst3.8	{d0-d2}, [r2], r0
      84:	05000001 	streq	r0, [r0, #-1]
        _PostTerminalSwitch(pRing, _ActiveTerminal);
      88:	0000d402 	andeq	sp, r0, r2, lsl #8
      8c:	53020600 	movwpl	r0, #9728	; 0x2600
      90:	07000006 	streq	r0, [r0, -r6]
      }
      break;
      94:	00036102 	andeq	r6, r3, r2, lsl #2
      //
      // If we are in trim mode and there is not enough space for everything,
      // trim the output but always include the terminal switch.  If no room
      // for terminal switch, skip that totally.
      //
      if (Avail < 4u) {
      98:	a9020800 	stmdbge	r2, {fp}
        Status = -1;
      9c:	09000007 	stmdbeq	r0, {r0, r1, r2}
      a0:	00048d02 	andeq	r8, r4, r2, lsl #26
      } else {
        _PostTerminalSwitch(pRing, TerminalId);
      a4:	b1020a00 	tstlt	r2, r0, lsl #20
      a8:	0b000000 	bleq	b0 <_Min_Heap_Size-0x150>
      ac:	00052f02 	andeq	r2, r5, r2, lsl #30
        Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
      b0:	ab020c00 	blge	830b8 <_Min_Stack_Size+0x82cb8>
      b4:	0d000002 	stceq	0, cr0, [r0, #-8]
      b8:	00078402 	andeq	r8, r7, r2, lsl #8
      bc:	f8020e00 			; <UNDEFINED> instruction: 0xf8020e00
      c0:	0f000003 	svceq	0x00000003
      c4:	00008602 	andeq	r8, r0, r2, lsl #12
        _PostTerminalSwitch(pRing, _ActiveTerminal);
      c8:	41021000 	mrsmi	r1, (UNDEF: 2)
      cc:	11000006 	tstne	r0, r6
      d0:	0004b702 	andeq	fp, r4, r2, lsl #14
      }
      break;
      d4:	1d021200 	sfmne	f1, 4, [r2, #-0]
    case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
      //
      // If we are in blocking mode, output everything.
      //
      _PostTerminalSwitch(pRing, TerminalId);
      d8:	17000007 	strne	r0, [r0, -r7]
      dc:	00026702 	andeq	r6, r2, r2, lsl #14
      Status = (int)_WriteBlocking(pRing, s, FragLen);
      e0:	cd021800 	stcgt	8, cr1, [r2, #-0]
      e4:	19000007 	stmdbne	r0, {r0, r1, r2}
      e8:	00047502 	andeq	r7, r4, r2, lsl #10
      ec:	2d021a00 	vstrcs	s2, [r2, #-0]
      _PostTerminalSwitch(pRing, _ActiveTerminal);
      f0:	1b000006 	blne	110 <_Min_Heap_Size-0xf0>
      f4:	0006c502 	andeq	ip, r6, r2, lsl #10
      f8:	9d021c00 	stcls	12, cr1, [r2, #-0]
      break;
    default:
      Status = -1;
      fc:	1d000003 	stcne	0, cr0, [r0, #-12]
     100:	00007c02 	andeq	r7, r0, r2, lsl #24
      break;
    }
    //
    // Finish up.
    //
    SEGGER_RTT_UNLOCK();
     104:	e7021e00 	str	r1, [r2, -r0, lsl #28]
     108:	1f000004 	svcne	0x00000004
  } else {
    Status = -1;
     10c:	00069002 	andeq	r9, r6, r2
     110:	7b022000 	blvc	88118 <_Min_Stack_Size+0x87d18>
  }
  return Status;
}
     114:	21000003 	tstcs	r0, r3
     118:	00005d02 	andeq	r5, r0, r2, lsl #26
     11c:	5d022200 	sfmpl	f2, 4, [r2, #-0]
     120:	23000002 	movwcs	r0, #2
     124:	00074d02 	andeq	r4, r7, r2, lsl #26
     128:	d8022400 	stmdale	r2, {sl, sp}
     12c:	25000005 	strcs	r0, [r0, #-5]
     130:	0002ee02 	andeq	lr, r2, r2, lsl #28
     134:	df022600 	svcle	0x00022600
     138:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     13c:	00055a02 	andeq	r5, r5, r2, lsl #20
     140:	09022900 	stmdbeq	r2, {r8, fp, sp}
     144:	2a000001 	bcs	150 <_Min_Heap_Size-0xb0>
     148:	00029102 	andeq	r9, r2, r2, lsl #2
     14c:	4a022f00 	bmi	8bd54 <_Min_Stack_Size+0x8b954>
     150:	31000000 	mrscc	r0, (UNDEF: 0)
     154:	0004d302 	andeq	sp, r4, r2, lsl #6
     158:	8d023200 	sfmhi	f3, 4, [r2, #-0]
     15c:	33000003 	movwcc	r0, #3
     160:	00006a02 	andeq	r6, r0, r2, lsl #20
     164:	12023800 	andne	r3, r2, #0, 16
     168:	39000006 	stmdbcc	r0, {r1, r2}
     16c:	00024b02 	andeq	r4, r2, r2, lsl #22
     170:	3b023a00 	blcc	8e978 <_Min_Stack_Size+0x8e578>
     174:	3b000007 	blcc	198 <_Min_Heap_Size-0x68>
     178:	00043202 	andeq	r3, r4, r2, lsl #4
     17c:	28023c00 	stmdacs	r2, {sl, fp, ip, sp}
     180:	43000002 	movwmi	r0, #2
     184:	00003802 	andeq	r3, r0, r2, lsl #16
     188:	b9024400 	stmdblt	r2, {sl, lr}
     18c:	45000005 	strmi	r0, [r0, #-5]
     190:	0002dc02 	andeq	sp, r2, r2, lsl #24
     194:	9d024600 	stcls	6, cr4, [r2, #-0]
     198:	47000006 	strmi	r0, [r0, -r6]
     19c:	0005cb02 	andeq	ip, r5, r2, lsl #22
     1a0:	1a024800 	bne	921a8 <_Min_Stack_Size+0x91da8>
     1a4:	49000003 	stmdbmi	r0, {r0, r1}
     1a8:	0007e002 	andeq	lr, r7, r2
     1ac:	49025100 	stmdbmi	r2, {r8, ip, lr}
     1b0:	54000003 	strpl	r0, [r0], #-3
     1b4:	06010600 	streq	r0, [r1], -r0, lsl #12
     1b8:	00000706 	andeq	r0, r0, r6, lsl #14
     1bc:	0002d20a 	andeq	sp, r2, sl, lsl #4
     1c0:	03860300 	orreq	r0, r6, #0, 6
     1c4:	00000026 	andeq	r0, r0, r6, lsr #32
     1c8:	00077a0a 	andeq	r7, r7, sl, lsl #20
     1cc:	182b0400 	stmdane	fp!, {sl}
     1d0:	000001d4 	ldrdeq	r0, [r0], -r4
     1d4:	04080106 	streq	r0, [r8], #-262	; 0xfffffefa
     1d8:	06000007 	streq	r0, [r0], -r7
     1dc:	05af0502 	streq	r0, [pc, #1282]!	; 6e6 <_Min_Stack_Size+0x2e6>
     1e0:	02060000 	andeq	r0, r6, #0
     1e4:	00079607 	andeq	r9, r7, r7, lsl #12
     1e8:	00a70a00 	adceq	r0, r7, r0, lsl #20
     1ec:	4d040000 	stcmi	0, cr0, [r4, #-0]
     1f0:	0001f518 	andeq	pc, r1, r8, lsl r5	; <UNPREDICTABLE>
     1f4:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
     1f8:	0000040f 	andeq	r0, r0, pc, lsl #8
     1fc:	0007120a 	andeq	r1, r7, sl, lsl #4
     200:	194f0400 	stmdbne	pc, {sl}^	; <UNPREDICTABLE>
     204:	00000208 	andeq	r0, r0, r8, lsl #4
     208:	7f070406 	svcvc	0x00070406
     20c:	06000002 	streq	r0, [r0], -r2
     210:	040a0508 	streq	r0, [sl], #-1288	; 0xfffffaf8
     214:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
     218:	00027a07 	andeq	r7, r2, r7, lsl #20
     21c:	05041600 	streq	r1, [r4, #-1536]	; 0xfffffa00
     220:	00746e69 	rsbseq	r6, r4, r9, ror #28
     224:	84070406 	strhi	r0, [r7], #-1030	; 0xfffffbfa
     228:	0a000002 	beq	238 <_Min_Heap_Size+0x38>
     22c:	0000077c 	andeq	r0, r0, ip, ror r7
     230:	c8131805 	ldmdagt	r3, {r0, r2, fp, ip}
     234:	07000001 	streq	r0, [r0, -r1]
     238:	0000022b 	andeq	r0, r0, fp, lsr #4
     23c:	0000a90a 	andeq	sl, r0, sl, lsl #18
     240:	132c0500 			; <UNDEFINED> instruction: 0x132c0500
     244:	000001e9 	andeq	r0, r0, r9, ror #3
     248:	0007140a 	andeq	r1, r7, sl, lsl #8
     24c:	14300500 	ldrtne	r0, [r0], #-1280	; 0xfffffb00
     250:	000001fc 	strdeq	r0, [r0], -ip
     254:	00024807 	andeq	r4, r2, r7, lsl #16
     258:	02540c00 	subseq	r0, r4, #0, 24
     25c:	480c0000 	stmdami	ip, {}	; <UNPREDICTABLE>
     260:	17000002 	strne	r0, [r0, -r2]
     264:	96010e04 	strls	r0, [r1], -r4, lsl #28
     268:	031d0901 	tsteq	sp, #16384	; 0x4000
     26c:	23010000 	movwcs	r0, #4096	; 0x1000
     270:	01000002 	tsteq	r0, r2
     274:	2d120198 	ldfcss	f0, [r2, #-608]	; 0xfffffda0
     278:	00000003 	andeq	r0, r0, r3
     27c:	00056901 	andeq	r6, r5, r1, lsl #18
     280:	01990100 	orrseq	r0, r9, r0, lsl #2
     284:	00033212 	andeq	r3, r3, r2, lsl r2
     288:	36012000 	strcc	r2, [r1], -r0
     28c:	01000007 	tsteq	r0, r7
     290:	2d12019a 	ldfcss	f0, [r2, #-616]	; 0xfffffd98
     294:	80000003 	andhi	r0, r0, r3
     298:	00024201 	andeq	r4, r2, r1, lsl #4
     29c:	019b0100 	orrseq	r0, fp, r0, lsl #2
     2a0:	00033212 	andeq	r3, r3, r2, lsl r2
     2a4:	b909a000 	stmdblt	r9, {sp, pc}
     2a8:	9c000007 	stcls	0, cr0, [r0], {7}
     2ac:	00032d01 	andeq	r2, r3, r1, lsl #26
     2b0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     2b4:	0000057d 	andeq	r0, r0, sp, ror r5
     2b8:	0332019d 	teqeq	r2, #1073741863	; 0x40000027
     2bc:	01200000 			; <UNDEFINED> instruction: 0x01200000
     2c0:	0004c609 	andeq	ip, r4, r9, lsl #12
     2c4:	2d019e00 	stccs	14, cr9, [r1, #-0]
     2c8:	80000003 	andhi	r0, r0, r3
     2cc:	05870901 	streq	r0, [r7, #2305]	; 0x901
     2d0:	019f0000 	orrseq	r0, pc, r0
     2d4:	00000332 	andeq	r0, r0, r2, lsr r3
     2d8:	570901a0 	strpl	r0, [r9, -r0, lsr #3]
     2dc:	a0000007 	andge	r0, r0, r7
     2e0:	00032d01 	andeq	r2, r3, r1, lsl #26
     2e4:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     2e8:	00000591 	muleq	r0, r1, r5
     2ec:	034201a1 	movteq	r0, #8609	; 0x21a1
     2f0:	02200000 	eoreq	r0, r0, #0
     2f4:	00504918 	subseq	r4, r0, r8, lsl r9
     2f8:	1201a201 	andne	sl, r1, #268435456	; 0x10000000
     2fc:	00000362 	andeq	r0, r0, r2, ror #6
     300:	9b090300 	blls	240f08 <_Min_Stack_Size+0x240b08>
     304:	a3000005 	movwge	r0, #5
     308:	00036701 	andeq	r6, r3, r1, lsl #14
     30c:	0903f000 	stmdbeq	r3, {ip, sp, lr, pc}
     310:	0000054f 	andeq	r0, r0, pc, asr #10
     314:	025401a4 	subseq	r0, r4, #164, 2	; 0x29
     318:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     31c:	02540400 	subseq	r0, r4, #0, 8
     320:	032d0000 			; <UNDEFINED> instruction: 0x032d0000
     324:	24050000 	strcs	r0, [r5], #-0
     328:	07000002 	streq	r0, [r0, -r2]
     32c:	031d0700 	tsteq	sp, #0, 14
     330:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
     334:	42000002 	andmi	r0, r0, #2
     338:	05000003 	streq	r0, [r0, #-3]
     33c:	00000224 	andeq	r0, r0, r4, lsr #4
     340:	48040017 	stmdami	r4, {r0, r1, r2, r4}
     344:	52000002 	andpl	r0, r0, #2
     348:	05000003 	streq	r0, [r0, #-3]
     34c:	00000224 	andeq	r0, r0, r4, lsr #4
     350:	37040037 	smladxcc	r4, r7, r0, r0
     354:	62000002 	andvs	r0, r0, #2
     358:	05000003 	streq	r0, [r0, #-3]
     35c:	00000224 	andeq	r0, r0, r4, lsr #4
     360:	520700ef 	andpl	r0, r7, #239	; 0xef
     364:	04000003 	streq	r0, [r0], #-3
     368:	00000248 	andeq	r0, r0, r8, asr #4
     36c:	00000378 	andeq	r0, r0, r8, ror r3
     370:	00022419 	andeq	r2, r2, r9, lsl r4
     374:	00028300 	andeq	r8, r2, r0, lsl #6
     378:	00065e0d 	andeq	r5, r6, sp, lsl #28
     37c:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
     380:	00026304 	andeq	r6, r2, r4, lsl #6
     384:	018c0e00 	orreq	r0, ip, r0, lsl #28
     388:	04b501b8 	ldrteq	r0, [r5], #440	; 0x1b8
     38c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     390:	01000003 	tsteq	r0, r3
     394:	591201ba 	ldmdbpl	r2, {r1, r3, r4, r5, r7, r8}
     398:	00000002 	andeq	r0, r0, r2
     39c:	0006c001 	andeq	ip, r6, r1
     3a0:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
     3a4:	00025412 	andeq	r5, r2, r2, lsl r4
     3a8:	8b010400 	blhi	413b0 <_Min_Stack_Size+0x40fb0>
     3ac:	01000006 	tsteq	r0, r6
     3b0:	541201bc 	ldrpl	r0, [r2], #-444	; 0xfffffe44
     3b4:	08000002 	stmdaeq	r0, {r1}
     3b8:	00039701 	andeq	r9, r3, r1, lsl #14
     3bc:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
     3c0:	00025412 	andeq	r5, r2, r2, lsl r4
     3c4:	53030c00 	movwpl	r0, #15360	; 0x3c00
     3c8:	01005243 	tsteq	r0, r3, asr #4
     3cc:	541201be 	ldrpl	r0, [r2], #-446	; 0xfffffe42
     3d0:	10000002 	andne	r0, r0, r2
     3d4:	52434303 	subpl	r4, r3, #201326592	; 0xc000000
     3d8:	01bf0100 			; <UNDEFINED> instruction: 0x01bf0100
     3dc:	00025412 	andeq	r5, r2, r2, lsl r4
     3e0:	53031400 	movwpl	r1, #13312	; 0x3400
     3e4:	01005048 	tsteq	r0, r8, asr #32
     3e8:	c51201c0 	ldrgt	r0, [r2, #-448]	; 0xfffffe40
     3ec:	18000004 	stmdane	r0, {r2}
     3f0:	00042201 	andeq	r2, r4, r1, lsl #4
     3f4:	01c10100 	biceq	r0, r1, r0, lsl #2
     3f8:	00025412 	andeq	r5, r2, r2, lsl r4
     3fc:	54012400 	strpl	r2, [r1], #-1024	; 0xfffffc00
     400:	01000004 	tsteq	r0, r4
     404:	541201c2 	ldrpl	r0, [r2], #-450	; 0xfffffe3e
     408:	28000002 	stmdacs	r0, {r1}
     40c:	00038801 	andeq	r8, r3, r1, lsl #16
     410:	01c30100 	biceq	r0, r3, r0, lsl #2
     414:	00025412 	andeq	r5, r2, r2, lsl r4
     418:	9d012c00 	stcls	12, cr2, [r1, #-0]
     41c:	01000000 	mrseq	r0, (UNDEF: 0)
     420:	541201c4 	ldrpl	r0, [r2], #-452	; 0xfffffe3c
     424:	30000002 	andcc	r0, r0, r2
     428:	00055401 	andeq	r5, r5, r1, lsl #8
     42c:	01c50100 	biceq	r0, r5, r0, lsl #2
     430:	00025412 	andeq	r5, r2, r2, lsl r4
     434:	71013400 	tstvc	r1, r0, lsl #8
     438:	01000006 	tsteq	r0, r6
     43c:	541201c6 	ldrpl	r0, [r2], #-454	; 0xfffffe3a
     440:	38000002 	stmdacc	r0, {r1}
     444:	00034401 	andeq	r4, r3, r1, lsl #8
     448:	01c70100 	biceq	r0, r7, r0, lsl #2
     44c:	00025412 	andeq	r5, r2, r2, lsl r4
     450:	50033c00 	andpl	r3, r3, r0, lsl #24
     454:	01005246 	tsteq	r0, r6, asr #4
     458:	df1201c8 	svcle	0x001201c8
     45c:	40000004 	andmi	r0, r0, r4
     460:	52464403 	subpl	r4, r6, #50331648	; 0x3000000
     464:	01c90100 	biceq	r0, r9, r0, lsl #2
     468:	00025912 	andeq	r5, r2, r2, lsl r9
     46c:	41034800 	tstmi	r3, r0, lsl #16
     470:	01005244 	tsteq	r0, r4, asr #4
     474:	591201ca 	ldmdbpl	r2, {r1, r3, r6, r7, r8}
     478:	4c000002 	stcmi	0, cr0, [r0], {2}
     47c:	0000ee01 	andeq	lr, r0, r1, lsl #28
     480:	01cb0100 	biceq	r0, fp, r0, lsl #2
     484:	0004f912 	andeq	pc, r4, r2, lsl r9	; <UNPREDICTABLE>
     488:	be015000 	cdplt	0, 0, cr5, cr1, cr0, {0}
     48c:	01000007 	tsteq	r0, r7
     490:	131201cc 	tstne	r2, #204, 2	; 0x33
     494:	60000005 	andvs	r0, r0, r5
     498:	00056901 	andeq	r6, r5, r1, lsl #18
     49c:	01cd0100 	biceq	r0, sp, r0, lsl #2
     4a0:	00051812 	andeq	r1, r5, r2, lsl r8
     4a4:	10017400 	andne	r7, r1, r0, lsl #8
     4a8:	01000000 	mrseq	r0, (UNDEF: 0)
     4ac:	541201ce 	ldrpl	r0, [r2], #-462	; 0xfffffe32
     4b0:	88000002 	stmdahi	r0, {r1}
     4b4:	02370400 	eorseq	r0, r7, #0, 8
     4b8:	04c50000 	strbeq	r0, [r5], #0
     4bc:	24050000 	strcs	r0, [r5], #-0
     4c0:	0b000002 	bleq	4d0 <_Min_Stack_Size+0xd0>
     4c4:	04b50700 	ldrteq	r0, [r5], #1792	; 0x700
     4c8:	59040000 	stmdbpl	r4, {}	; <UNPREDICTABLE>
     4cc:	da000002 	ble	4dc <_Min_Stack_Size+0xdc>
     4d0:	05000004 	streq	r0, [r0, #-4]
     4d4:	00000224 	andeq	r0, r0, r4, lsr #4
     4d8:	ca0c0001 	bgt	3004e4 <_Min_Stack_Size+0x3000e4>
     4dc:	07000004 	streq	r0, [r0, -r4]
     4e0:	000004da 	ldrdeq	r0, [r0], -sl
     4e4:	00025904 	andeq	r5, r2, r4, lsl #18
     4e8:	0004f400 	andeq	pc, r4, r0, lsl #8
     4ec:	02240500 	eoreq	r0, r4, #0, 10
     4f0:	00030000 	andeq	r0, r3, r0
     4f4:	0004e40c 	andeq	lr, r4, ip, lsl #8
     4f8:	04f40700 	ldrbteq	r0, [r4], #1792	; 0x700
     4fc:	59040000 	stmdbpl	r4, {}	; <UNPREDICTABLE>
     500:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     504:	05000005 	streq	r0, [r0, #-5]
     508:	00000224 	andeq	r0, r0, r4, lsr #4
     50c:	fe0c0004 	cdp2	0, 0, cr0, cr12, cr4, {0}
     510:	07000004 	streq	r0, [r0, -r4]
     514:	0000050e 	andeq	r0, r0, lr, lsl #10
     518:	00024804 	andeq	r4, r2, r4, lsl #16
     51c:	00052800 	andeq	r2, r5, r0, lsl #16
     520:	02240500 	eoreq	r0, r4, #0, 10
     524:	00040000 	andeq	r0, r4, r0
     528:	0006680d 	andeq	r6, r6, sp, lsl #16
     52c:	01cf0100 	biceq	r0, pc, r0, lsl #2
     530:	00038503 	andeq	r8, r3, r3, lsl #10
     534:	02480400 	subeq	r0, r8, #0, 8
     538:	05450000 	strbeq	r0, [r5, #-0]
     53c:	24050000 	strcs	r0, [r5], #-0
     540:	00000002 	andeq	r0, r0, r2
     544:	01100e00 	tsteq	r0, r0, lsl #28
     548:	058702f7 	streq	r0, [r7, #759]	; 0x2f7
     54c:	0d010000 	stceq	0, cr0, [r1, #-0]
     550:	01000008 	tsteq	r0, r8
     554:	541202f9 	ldrpl	r0, [r2], #-761	; 0xfffffd07
     558:	00000002 	andeq	r0, r0, r2
     55c:	00009801 	andeq	r9, r0, r1, lsl #16
     560:	02fa0100 	rscseq	r0, sl, #0, 2
     564:	00025412 	andeq	r5, r2, r2, lsl r4
     568:	56030400 	strpl	r0, [r3], -r0, lsl #8
     56c:	01004c41 	tsteq	r0, r1, asr #24
     570:	541202fb 	ldrpl	r0, [r2], #-763	; 0xfffffd05
     574:	08000002 	stmdaeq	r0, {r1}
     578:	0000ce01 	andeq	ip, r0, r1, lsl #28
     57c:	02fc0100 	rscseq	r0, ip, #0, 2
     580:	00025912 	andeq	r5, r2, r2, lsl r9
     584:	0d000c00 	stceq	12, cr0, [r0, #-0]
     588:	000004fc 	strdeq	r0, [r0], -ip
     58c:	0302fd01 	movweq	pc, #11521	; 0x2d01	; <UNPREDICTABLE>
     590:	00000545 	andeq	r0, r0, r5, asr #10
     594:	00024804 	andeq	r4, r2, r4, lsl #16
     598:	0005a400 	andeq	sl, r5, r0, lsl #8
     59c:	02240500 	eoreq	r0, r4, #0, 10
     5a0:	00010000 	andeq	r0, r1, r0
     5a4:	00051f1a 	andeq	r1, r5, sl, lsl pc
     5a8:	114a0600 	cmpne	sl, r0, lsl #12
     5ac:	00000248 	andeq	r0, r0, r8, asr #4
     5b0:	fa031c1b 	blx	c7624 <_Min_Stack_Size+0xc7224>
     5b4:	00060e09 	andeq	r0, r6, r9, lsl #28
     5b8:	43411100 	movtmi	r1, #4352	; 0x1100
     5bc:	54fc0052 	ldrbtpl	r0, [ip], #82	; 0x52
     5c0:	00000002 	andeq	r0, r0, r2
     5c4:	0002a612 	andeq	sl, r2, r2, lsl r6
     5c8:	0254fd00 	subseq	pc, r4, #0, 26
     5cc:	12040000 	andne	r0, r4, #0
     5d0:	000002a3 	andeq	r0, r0, r3, lsr #5
     5d4:	000254fe 	strdeq	r5, [r2], -lr
     5d8:	53110800 	tstpl	r1, #0, 16
     5dc:	54ff0052 	ldrbtpl	r0, [pc], #82	; 5e4 <_Min_Stack_Size+0x1e4>
     5e0:	0c000002 	stceq	0, cr0, [r0], {2}
     5e4:	00524303 	subseq	r4, r2, r3, lsl #6
     5e8:	11010003 	tstne	r1, r3
     5ec:	00000254 	andeq	r0, r0, r4, asr r2
     5f0:	03530110 	cmpeq	r3, #16, 2
     5f4:	01030000 	mrseq	r0, (UNDEF: 3)
     5f8:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     5fc:	01140000 	tsteq	r4, r0
     600:	00000773 	andeq	r0, r0, r3, ror r7
     604:	11010203 	tstne	r1, r3, lsl #4
     608:	00000254 	andeq	r0, r0, r4, asr r2
     60c:	fa0d0018 	blx	340674 <_Min_Stack_Size+0x340274>
     610:	03000002 	movweq	r0, #2
     614:	b0030103 	andlt	r0, r3, r3, lsl #2
     618:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     61c:	01090328 	tsteq	r9, r8, lsr #6
     620:	000006a3 	andeq	r0, r0, r3, lsr #13
     624:	0002bd01 	andeq	fp, r2, r1, lsl #26
     628:	010b0300 	mrseq	r0, (UNDEF: 59)
     62c:	00025411 	andeq	r5, r2, r1, lsl r4
     630:	3a010000 	bcc	40638 <_Min_Stack_Size+0x40238>
     634:	03000006 	movweq	r0, #6
     638:	5411010c 	ldrpl	r0, [r1], #-268	; 0xfffffef4
     63c:	04000002 	streq	r0, [r0], #-2
     640:	0004f401 	andeq	pc, r4, r1, lsl #8
     644:	010d0300 	mrseq	r0, SP_mon
     648:	00025411 	andeq	r5, r2, r1, lsl r4
     64c:	cc010800 	stcgt	8, cr0, [r1], {-0}
     650:	03000002 	movweq	r0, #2
     654:	5411010e 	ldrpl	r0, [r1], #-270	; 0xfffffef2
     658:	0c000002 	stceq	0, cr0, [r0], {2}
     65c:	52444903 	subpl	r4, r4, #49152	; 0xc000
     660:	010f0300 	mrseq	r0, SP_hyp
     664:	00025411 	andeq	r5, r2, r1, lsl r4
     668:	4f031000 	svcmi	0x00031000
     66c:	03005244 	movweq	r5, #580	; 0x244
     670:	54110110 	ldrpl	r0, [r1], #-272	; 0xfffffef0
     674:	14000002 	strne	r0, [r0], #-2
     678:	00001601 	andeq	r1, r0, r1, lsl #12
     67c:	01110300 	tsteq	r1, r0, lsl #6
     680:	00025411 	andeq	r5, r2, r1, lsl r4
     684:	08011800 	stmdaeq	r1, {fp, ip}
     688:	03000008 	movweq	r0, #8
     68c:	54110112 	ldrpl	r0, [r1], #-274	; 0xfffffeee
     690:	1c000002 	stcne	0, cr0, [r0], {2}
     694:	52464103 	subpl	r4, r6, #-1073741824	; 0xc0000000
     698:	01130300 	tsteq	r3, r0, lsl #6
     69c:	0006b311 	andeq	fp, r6, r1, lsl r3
     6a0:	04002000 	streq	r2, [r0], #-0
     6a4:	00000254 	andeq	r0, r0, r4, asr r2
     6a8:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
     6ac:	00022405 	andeq	r2, r2, r5, lsl #8
     6b0:	07000100 	streq	r0, [r0, -r0, lsl #2]
     6b4:	000006a3 	andeq	r0, r0, r3, lsr #13
     6b8:	00067e0d 	andeq	r7, r6, sp, lsl #28
     6bc:	01140300 	tsteq	r4, r0, lsl #6
     6c0:	00061b03 	andeq	r1, r6, r3, lsl #22
     6c4:	03900e00 	orrseq	r0, r0, #0, 28
     6c8:	088e0150 	stmeq	lr, {r4, r6, r8}
     6cc:	43030000 	movwmi	r0, #12288	; 0x3000
     6d0:	52030052 	andpl	r0, r3, #82	; 0x52
     6d4:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     6d8:	01000000 	mrseq	r0, (UNDEF: 0)
     6dc:	00000676 	andeq	r0, r0, r6, ror r6
     6e0:	11015303 	tstne	r1, r3, lsl #6
     6e4:	00000254 	andeq	r0, r0, r4, asr r2
     6e8:	00030104 	andeq	r0, r3, r4, lsl #2
     6ec:	54030000 	strpl	r0, [r3], #-0
     6f0:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     6f4:	03080000 	movweq	r0, #32768	; 0x8000
     6f8:	00524943 	subseq	r4, r2, r3, asr #18
     6fc:	11015503 	tstne	r1, r3, lsl #10
     700:	00000254 	andeq	r0, r0, r4, asr r2
     704:	07ff010c 	ldrbeq	r0, [pc, ip, lsl #2]!
     708:	56030000 	strpl	r0, [r3], -r0
     70c:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     710:	01100000 	tsteq	r0, r0
     714:	00000546 	andeq	r0, r0, r6, asr #10
     718:	11015703 	tstne	r1, r3, lsl #14
     71c:	00000254 	andeq	r0, r0, r4, asr r2
     720:	02c30114 	sbceq	r0, r3, #20, 2
     724:	58030000 	stmdapl	r3, {}	; <UNPREDICTABLE>
     728:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     72c:	01180000 	tsteq	r8, r0
     730:	00000569 	andeq	r0, r0, r9, ror #10
     734:	11015903 	tstne	r1, r3, lsl #18
     738:	00000248 	andeq	r0, r0, r8, asr #4
     73c:	0372011c 	cmneq	r2, #28, 2
     740:	5a030000 	bpl	c0748 <_Min_Stack_Size+0xc0348>
     744:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     748:	01200000 			; <UNDEFINED> instruction: 0x01200000
     74c:	00000054 	andeq	r0, r0, r4, asr r0
     750:	11015b03 	tstne	r1, r3, lsl #22
     754:	00000254 	andeq	r0, r0, r4, asr r2
     758:	05730124 	ldrbeq	r0, [r3, #-292]!	; 0xfffffedc
     75c:	5c030000 	stcpl	0, cr0, [r3], {-0}
     760:	05941101 	ldreq	r1, [r4, #257]	; 0x101
     764:	01280000 			; <UNDEFINED> instruction: 0x01280000
     768:	00000234 	andeq	r0, r0, r4, lsr r2
     76c:	11015d03 	tstne	r1, r3, lsl #26
     770:	00000254 	andeq	r0, r0, r4, asr r2
     774:	06cf0130 			; <UNDEFINED> instruction: 0x06cf0130
     778:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
     77c:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     780:	01340000 	teqeq	r4, r0
     784:	00000359 	andeq	r0, r0, r9, asr r3
     788:	11015f03 	tstne	r1, r3, lsl #30
     78c:	00000254 	andeq	r0, r0, r4, asr r2
     790:	057d0138 	ldrbeq	r0, [sp, #-312]!	; 0xfffffec8
     794:	60030000 	andvs	r0, r3, r0
     798:	02481101 	subeq	r1, r8, #1073741824	; 0x40000000
     79c:	013c0000 	teqeq	ip, r0
     7a0:	00000008 	andeq	r0, r0, r8
     7a4:	11016103 	tstne	r1, r3, lsl #2
     7a8:	00000254 	andeq	r0, r0, r4, asr r2
     7ac:	04cb0140 	strbeq	r0, [fp], #320	; 0x140
     7b0:	62030000 	andvs	r0, r3, #0
     7b4:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     7b8:	01440000 	mrseq	r0, (UNDEF: 68)
     7bc:	00000587 	andeq	r0, r0, r7, lsl #11
     7c0:	11016303 	tstne	r1, r3, lsl #6
     7c4:	00000594 	muleq	r0, r4, r5
     7c8:	04dd0148 	ldrbeq	r0, [sp], #328	; 0x148
     7cc:	64030000 	strvs	r0, [r3], #-0
     7d0:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     7d4:	01500000 	cmpeq	r0, r0
     7d8:	000000f3 	strdeq	r0, [r0], -r3
     7dc:	11016503 	tstne	r1, r3, lsl #10
     7e0:	00000254 	andeq	r0, r0, r4, asr r2
     7e4:	06b60154 	ssateq	r0, #23, r4, asr #2
     7e8:	66030000 	strvs	r0, [r3], -r0
     7ec:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     7f0:	01580000 	cmpeq	r8, r0
     7f4:	00000591 	muleq	r0, r1, r5
     7f8:	11016703 	tstne	r1, r3, lsl #14
     7fc:	00000248 	andeq	r0, r0, r8, asr #4
     800:	0428015c 	strteq	r0, [r8], #-348	; 0xfffffea4
     804:	68030000 	stmdavs	r3, {}	; <UNPREDICTABLE>
     808:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     80c:	01600000 	cmneq	r0, r0
     810:	0000002e 	andeq	r0, r0, lr, lsr #32
     814:	11016903 	tstne	r1, r3, lsl #18
     818:	00000254 	andeq	r0, r0, r4, asr r2
     81c:	059b0164 	ldreq	r0, [fp, #356]	; 0x164
     820:	6a030000 	bvs	c0828 <_Min_Stack_Size+0xc0428>
     824:	05941101 	ldreq	r1, [r4, #257]	; 0x101
     828:	01680000 	cmneq	r8, r0
     82c:	000000a2 	andeq	r0, r0, r2, lsr #1
     830:	11016b03 	tstne	r1, r3, lsl #22
     834:	00000254 	andeq	r0, r0, r4, asr r2
     838:	53430370 	movtpl	r0, #13168	; 0x3370
     83c:	6c030052 	stcvs	0, cr0, [r3], {82}	; 0x52
     840:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     844:	01740000 	cmneq	r4, r0
     848:	000005a5 	andeq	r0, r0, r5, lsr #11
     84c:	11016d03 	tstne	r1, r3, lsl #26
     850:	00000594 	muleq	r0, r4, r5
     854:	023c0178 	eorseq	r0, ip, #120, 2
     858:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
     85c:	02541101 	subseq	r1, r4, #1073741824	; 0x40000000
     860:	01800000 	orreq	r0, r0, r0
     864:	000006e9 	andeq	r0, r0, r9, ror #13
     868:	11016f03 	tstne	r1, r3, lsl #30
     86c:	00000254 	andeq	r0, r0, r4, asr r2
     870:	07c30184 	strbeq	r0, [r3, r4, lsl #3]
     874:	70030000 	andvc	r0, r3, r0
     878:	05351101 	ldreq	r1, [r5, #-257]!	; 0xfffffeff
     87c:	01880000 	orreq	r0, r8, r0
     880:	00000000 	andeq	r0, r0, r0
     884:	11017103 	tstne	r1, r3, lsl #2
     888:	00000254 	andeq	r0, r0, r4, asr r2
     88c:	0e0d008c 	cdpeq	0, 0, cr0, cr13, cr12, {4}
     890:	03000003 	movweq	r0, #3
     894:	c5030172 	strgt	r0, [r3, #-370]	; 0xfffffe8e
     898:	06000006 	streq	r0, [r0], -r6
     89c:	05130408 	ldreq	r0, [r3, #-1032]	; 0xfffffbf8
     8a0:	041c0000 	ldreq	r0, [ip], #-0
     8a4:	0d080106 	stfeqs	f0, [r8, #-24]	; 0xffffffe8
     8a8:	0c000007 	stceq	0, cr0, [r0], {7}
     8ac:	000008a4 	andeq	r0, r0, r4, lsr #17
     8b0:	08ab041d 	stmiaeq	fp!, {r0, r2, r3, r4, sl}
     8b4:	411e0000 	tstmi	lr, r0
     8b8:	02000005 	andeq	r0, r0, #5
     8bc:	02540f06 	subseq	r0, r4, #6, 30
     8c0:	03050000 	movweq	r0, #20480	; 0x5000
     8c4:	20000450 	andcs	r0, r0, r0, asr r4
     8c8:	00075c13 	andeq	r5, r7, r3, lsl ip
     8cc:	24017600 	strcs	r7, [r1], #-1536	; 0xfffffa00
     8d0:	e2000002 	and	r0, r0, #2
     8d4:	0b000008 	bleq	8fc <_Min_Stack_Size+0x4fc>
     8d8:	00000224 	andeq	r0, r0, r4, lsr #4
     8dc:	0008b00b 	andeq	fp, r8, fp
     8e0:	e91f0000 	ldmdb	pc, {}	; <UNPREDICTABLE>
     8e4:	06000007 	streq	r0, [r0], -r7
     8e8:	e4130d68 	ldr	r0, [r3], #-3432	; 0xfffff298
     8ec:	64000005 	strvs	r0, [r0], #-5
     8f0:	00021d01 	andeq	r1, r2, r1, lsl #26
     8f4:	00091300 	andeq	r1, r9, r0, lsl #6
     8f8:	02240b00 	eoreq	r0, r4, #0, 22
     8fc:	b00b0000 	andlt	r0, fp, r0
     900:	0b000008 	bleq	928 <_Min_Stack_Size+0x528>
     904:	000008a2 	andeq	r0, r0, r2, lsr #17
     908:	0002240b 	andeq	r2, r2, fp, lsl #8
     90c:	02240b00 	eoreq	r0, r4, #0, 22
     910:	0f000000 	svceq	0x00000000
     914:	00000444 	andeq	r0, r0, r4, asr #8
     918:	0006484e 	andeq	r4, r6, lr, asr #16
     91c:	00001c08 	andeq	r1, r0, r8, lsl #24
     920:	209c0100 	addscs	r0, ip, r0, lsl #2
     924:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     928:	1d053a02 	vstrne	s6, [r5, #-8]
     92c:	c4000002 	strgt	r0, [r0], #-2
     930:	84080005 	strhi	r0, [r8], #-5
     934:	01000000 	mrseq	r0, (UNDEF: 0)
     938:	04590f9c 	ldrbeq	r0, [r9], #-3996	; 0xfffff064
     93c:	bc160000 	ldclt	0, cr0, [r6], {-0}
     940:	08080004 	stmdaeq	r8, {r2}
     944:	01000001 	tsteq	r0, r1
     948:	05090f9c 	streq	r0, [r9, #-3996]	; 0xfffff064
     94c:	700d0000 	andvc	r0, sp, r0
     950:	4c080004 	stcmi	0, cr0, [r8], {4}
     954:	01000000 	mrseq	r0, (UNDEF: 0)
     958:	0498219c 	ldreq	r2, [r8], #412	; 0x19c
     95c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     960:	00044006 	andeq	r4, r4, r6
     964:	00003008 	andeq	r3, r0, r8
     968:	8d9c0100 	ldfhis	f0, [ip]
     96c:	22000009 	andcs	r0, r0, #9
     970:	0200736d 	andeq	r7, r0, #-1275068415	; 0xb4000001
     974:	025e1e08 	subseq	r1, lr, #8, 28	; 0x80
     978:	91020000 	mrsls	r0, (UNDEF: 2)
     97c:	04c0236c 	strbeq	r2, [r0], #876	; 0x36c
     980:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     984:	0002480e 	andeq	r4, r2, lr, lsl #16
     988:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     98c:	03352400 	teqeq	r5, #0, 8
     990:	e6010000 	str	r0, [r1], -r0
     994:	02481a07 	subeq	r1, r8, #28672	; 0x7000
     998:	03fc0000 	mvnseq	r0, #0
     99c:	00440800 	subeq	r0, r4, r0, lsl #16
     9a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     9a4:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
     9a8:	00036c10 	andeq	r6, r3, r0, lsl ip
     9ac:	3207e600 	andcc	lr, r7, #0, 12
     9b0:	00000248 	andeq	r0, r0, r8, asr #4
     9b4:	00749102 	rsbseq	r9, r4, r2, lsl #2
     9b8:	00001b25 	andeq	r1, r0, r5, lsr #22
     9bc:	07180100 	ldreq	r0, [r8, -r0, lsl #2]
     9c0:	0003a816 	andeq	sl, r3, r6, lsl r8
     9c4:	00005408 	andeq	r5, r0, r8, lsl #8
     9c8:	109c0100 	addsne	r0, ip, r0, lsl #2
     9cc:	000007db 	ldrdeq	r0, [r0], -fp
     9d0:	bc330718 	ldclt	7, cr0, [r3], #-96	; 0xffffffa0
     9d4:	02000001 	andeq	r0, r0, #1
     9d8:	24107791 	ldrcs	r7, [r0], #-1937	; 0xfffff86f
     9dc:	18000006 	stmdane	r0, {r1, r2}
     9e0:	02484207 	subeq	r4, r8, #1879048192	; 0x70000000
     9e4:	91020000 	mrsls	r0, (UNDEF: 2)
     9e8:	2f000070 	svccs	0x00000070
     9ec:	05000005 	streq	r0, [r0, #-5]
     9f0:	50040100 	andpl	r0, r4, r0, lsl #2
     9f4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     9f8:	0000011a 	andeq	r0, r0, sl, lsl r1
     9fc:	0008461d 	andeq	r4, r8, sp, lsl r6
     a00:	0004a100 	andeq	sl, r4, r0, lsl #2
     a04:	00004500 	andeq	r4, r0, r0, lsl #10
     a08:	00000000 	andeq	r0, r0, r0
     a0c:	0003a800 	andeq	sl, r3, r0, lsl #16
     a10:	06010200 	streq	r0, [r1], -r0, lsl #4
     a14:	00000706 	andeq	r0, r0, r6, lsl #14
     a18:	00077a08 	andeq	r7, r7, r8, lsl #20
     a1c:	182b0200 	stmdane	fp!, {r9}
     a20:	00000039 	andeq	r0, r0, r9, lsr r0
     a24:	04080102 	streq	r0, [r8], #-258	; 0xfffffefe
     a28:	02000007 	andeq	r0, r0, #7
     a2c:	05af0502 	streq	r0, [pc, #1282]!	; f36 <_Min_Stack_Size+0xb36>
     a30:	02020000 	andeq	r0, r2, #0
     a34:	00079607 	andeq	r9, r7, r7, lsl #12
     a38:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     a3c:	0000040f 	andeq	r0, r0, pc, lsl #8
     a40:	00071208 	andeq	r1, r7, r8, lsl #4
     a44:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
     a48:	00000061 	andeq	r0, r0, r1, rrx
     a4c:	7f070402 	svcvc	0x00070402
     a50:	02000002 	andeq	r0, r0, #2
     a54:	040a0508 	streq	r0, [sl], #-1288	; 0xfffffaf8
     a58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     a5c:	00027a07 	andeq	r7, r2, r7, lsl #20
     a60:	05040f00 	streq	r0, [r4, #-3840]	; 0xfffff100
     a64:	00746e69 	rsbseq	r6, r4, r9, ror #28
     a68:	84070402 	strhi	r0, [r7], #-1026	; 0xfffffbfe
     a6c:	08000002 	stmdaeq	r0, {r1}
     a70:	0000077c 	andeq	r0, r0, ip, ror r7
     a74:	2d131803 	ldccs	8, cr1, [r3, #-12]
     a78:	07000000 	streq	r0, [r0, -r0]
     a7c:	00000084 	andeq	r0, r0, r4, lsl #1
     a80:	00008406 	andeq	r8, r0, r6, lsl #8
     a84:	07140800 	ldreq	r0, [r4, -r0, lsl #16]
     a88:	30030000 	andcc	r0, r3, r0
     a8c:	00005514 	andeq	r5, r0, r4, lsl r5
     a90:	009a0700 	addseq	r0, sl, r0, lsl #14
     a94:	a6060000 	strge	r0, [r6], -r0
     a98:	0c000000 	stceq	0, cr0, [r0], {-0}
     a9c:	01b8048c 			; <UNDEFINED> instruction: 0x01b8048c
     aa0:	000001e0 	andeq	r0, r0, r0, ror #3
     aa4:	00030801 	andeq	r0, r3, r1, lsl #16
     aa8:	01ba0400 			; <UNDEFINED> instruction: 0x01ba0400
     aac:	0000ab12 	andeq	sl, r0, r2, lsl fp
     ab0:	c0010000 	andgt	r0, r1, r0
     ab4:	04000006 	streq	r0, [r0], #-6
     ab8:	a61201bb 			; <UNDEFINED> instruction: 0xa61201bb
     abc:	04000000 	streq	r0, [r0], #-0
     ac0:	00068b01 	andeq	r8, r6, r1, lsl #22
     ac4:	01bc0400 			; <UNDEFINED> instruction: 0x01bc0400
     ac8:	0000a612 	andeq	sl, r0, r2, lsl r6
     acc:	97010800 	strls	r0, [r1, -r0, lsl #16]
     ad0:	04000003 	streq	r0, [r0], #-3
     ad4:	a61201bd 			; <UNDEFINED> instruction: 0xa61201bd
     ad8:	0c000000 	stceq	0, cr0, [r0], {-0}
     adc:	52435303 	subpl	r5, r3, #201326592	; 0xc000000
     ae0:	01be0400 			; <UNDEFINED> instruction: 0x01be0400
     ae4:	0000a612 	andeq	sl, r0, r2, lsl r6
     ae8:	43031000 	movwmi	r1, #12288	; 0x3000
     aec:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
     af0:	a61201bf 			; <UNDEFINED> instruction: 0xa61201bf
     af4:	14000000 	strne	r0, [r0], #-0
     af8:	50485303 	subpl	r5, r8, r3, lsl #6
     afc:	01c00400 	biceq	r0, r0, r0, lsl #8
     b00:	0001f012 	andeq	pc, r1, r2, lsl r0	; <UNPREDICTABLE>
     b04:	22011800 	andcs	r1, r1, #0, 16
     b08:	04000004 	streq	r0, [r0], #-4
     b0c:	a61201c1 	ldrge	r0, [r2], -r1, asr #3
     b10:	24000000 	strcs	r0, [r0], #-0
     b14:	00045401 	andeq	r5, r4, r1, lsl #8
     b18:	01c20400 	biceq	r0, r2, r0, lsl #8
     b1c:	0000a612 	andeq	sl, r0, r2, lsl r6
     b20:	88012800 	stmdahi	r1, {fp, sp}
     b24:	04000003 	streq	r0, [r0], #-3
     b28:	a61201c3 	ldrge	r0, [r2], -r3, asr #3
     b2c:	2c000000 	stccs	0, cr0, [r0], {-0}
     b30:	00009d01 	andeq	r9, r0, r1, lsl #26
     b34:	01c40400 	biceq	r0, r4, r0, lsl #8
     b38:	0000a612 	andeq	sl, r0, r2, lsl r6
     b3c:	54013000 	strpl	r3, [r1], #-0
     b40:	04000005 	streq	r0, [r0], #-5
     b44:	a61201c5 	ldrge	r0, [r2], -r5, asr #3
     b48:	34000000 	strcc	r0, [r0], #-0
     b4c:	00067101 	andeq	r7, r6, r1, lsl #2
     b50:	01c60400 	biceq	r0, r6, r0, lsl #8
     b54:	0000a612 	andeq	sl, r0, r2, lsl r6
     b58:	44013800 	strmi	r3, [r1], #-2048	; 0xfffff800
     b5c:	04000003 	streq	r0, [r0], #-3
     b60:	a61201c7 	ldrge	r0, [r2], -r7, asr #3
     b64:	3c000000 	stccc	0, cr0, [r0], {-0}
     b68:	52465003 	subpl	r5, r6, #3
     b6c:	01c80400 	biceq	r0, r8, r0, lsl #8
     b70:	00020a12 	andeq	r0, r2, r2, lsl sl
     b74:	44034000 	strmi	r4, [r3], #-0
     b78:	04005246 	streq	r5, [r0], #-582	; 0xfffffdba
     b7c:	ab1201c9 	blge	4812a8 <_Min_Stack_Size+0x480ea8>
     b80:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     b84:	52444103 	subpl	r4, r4, #-1073741824	; 0xc0000000
     b88:	01ca0400 	biceq	r0, sl, r0, lsl #8
     b8c:	0000ab12 	andeq	sl, r0, r2, lsl fp
     b90:	ee014c00 	cdp	12, 0, cr4, cr1, cr0, {0}
     b94:	04000000 	streq	r0, [r0], #-0
     b98:	241201cb 	ldrcs	r0, [r2], #-459	; 0xfffffe35
     b9c:	50000002 	andpl	r0, r0, r2
     ba0:	0007be01 	andeq	fp, r7, r1, lsl #28
     ba4:	01cc0400 	biceq	r0, ip, r0, lsl #8
     ba8:	00023e12 	andeq	r3, r2, r2, lsl lr
     bac:	69016000 	stmdbvs	r1, {sp, lr}
     bb0:	04000005 	streq	r0, [r0], #-5
     bb4:	431201cd 	tstmi	r2, #1073741875	; 0x40000033
     bb8:	74000002 	strvc	r0, [r0], #-2
     bbc:	00001001 	andeq	r1, r0, r1
     bc0:	01ce0400 	biceq	r0, lr, r0, lsl #8
     bc4:	0000a612 	andeq	sl, r0, r2, lsl r6
     bc8:	04008800 	streq	r8, [r0], #-2048	; 0xfffff800
     bcc:	00000090 	muleq	r0, r0, r0
     bd0:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     bd4:	00007d05 	andeq	r7, r0, r5, lsl #26
     bd8:	07000b00 	streq	r0, [r0, -r0, lsl #22]
     bdc:	000001e0 	andeq	r0, r0, r0, ror #3
     be0:	0000ab04 	andeq	sl, r0, r4, lsl #22
     be4:	00020500 	andeq	r0, r2, r0, lsl #10
     be8:	007d0500 	rsbseq	r0, sp, r0, lsl #10
     bec:	00010000 	andeq	r0, r1, r0
     bf0:	0001f506 	andeq	pc, r1, r6, lsl #10
     bf4:	02050700 	andeq	r0, r5, #0, 14
     bf8:	ab040000 	blge	100c00 <_Min_Stack_Size+0x100800>
     bfc:	1f000000 	svcne	0x00000000
     c00:	05000002 	streq	r0, [r0, #-2]
     c04:	0000007d 	andeq	r0, r0, sp, ror r0
     c08:	0f060003 	svceq	0x00060003
     c0c:	07000002 	streq	r0, [r0, -r2]
     c10:	0000021f 	andeq	r0, r0, pc, lsl r2
     c14:	0000ab04 	andeq	sl, r0, r4, lsl #22
     c18:	00023900 	andeq	r3, r2, r0, lsl #18
     c1c:	007d0500 	rsbseq	r0, sp, r0, lsl #10
     c20:	00040000 	andeq	r0, r4, r0
     c24:	00022906 	andeq	r2, r2, r6, lsl #18
     c28:	02390700 	eorseq	r0, r9, #0, 14
     c2c:	9a040000 	bls	100c34 <_Min_Stack_Size+0x100834>
     c30:	53000000 	movwpl	r0, #0
     c34:	05000002 	streq	r0, [r0, #-2]
     c38:	0000007d 	andeq	r0, r0, sp, ror r0
     c3c:	680d0004 	stmdavs	sp, {r2}
     c40:	04000006 	streq	r0, [r0], #-6
     c44:	00b001cf 	adcseq	r0, r0, pc, asr #3
     c48:	9a040000 	bls	100c50 <_Min_Stack_Size+0x100850>
     c4c:	6f000000 	svcvs	0x00000000
     c50:	05000002 	streq	r0, [r0, #-2]
     c54:	0000007d 	andeq	r0, r0, sp, ror r0
     c58:	9a040000 	bls	100c60 <_Min_Stack_Size+0x100860>
     c5c:	7f000000 	svcvc	0x00000000
     c60:	05000002 	streq	r0, [r0, #-2]
     c64:	0000007d 	andeq	r0, r0, sp, ror r0
     c68:	1f0a0001 	svcne	0x000a0001
     c6c:	4a000005 	bmi	c88 <_Min_Stack_Size+0x888>
     c70:	00009a11 	andeq	r9, r0, r1, lsl sl
     c74:	00950400 	addseq	r0, r5, r0, lsl #8
     c78:	029a0000 	addseq	r0, sl, #0
     c7c:	7d050000 	stcvc	0, cr0, [r5, #-0]
     c80:	0f000000 	svceq	0x00000000
     c84:	028a0600 	addeq	r0, sl, #0, 12
     c88:	a30a0000 	movwge	r0, #40960	; 0xa000
     c8c:	4c000008 	stcmi	0, cr0, [r0], {8}
     c90:	00029a17 	andeq	r9, r2, r7, lsl sl
     c94:	00950400 	addseq	r0, r5, r0, lsl #8
     c98:	02ba0000 	adcseq	r0, sl, #0
     c9c:	7d050000 	stcvc	0, cr0, [r5, #-0]
     ca0:	07000000 	streq	r0, [r0, -r0]
     ca4:	02aa0600 	adceq	r0, sl, #0, 12
     ca8:	310a0000 	mrscc	r0, (UNDEF: 10)
     cac:	4d000008 	stcmi	0, cr0, [r0, #-32]	; 0xffffffe0
     cb0:	0002ba17 	andeq	fp, r2, r7, lsl sl
     cb4:	06900c00 	ldreq	r0, [r0], r0, lsl #24
     cb8:	04930150 	ldreq	r0, [r3], #336	; 0x150
     cbc:	43030000 	movwmi	r0, #12288	; 0x3000
     cc0:	52060052 	andpl	r0, r6, #82	; 0x52
     cc4:	00a61101 	adceq	r1, r6, r1, lsl #2
     cc8:	01000000 	mrseq	r0, (UNDEF: 0)
     ccc:	00000676 	andeq	r0, r0, r6, ror r6
     cd0:	11015306 	tstne	r1, r6, lsl #6
     cd4:	000000a6 	andeq	r0, r0, r6, lsr #1
     cd8:	00030104 	andeq	r0, r3, r4, lsl #2
     cdc:	54060000 	strpl	r0, [r6], #-0
     ce0:	00a61101 	adceq	r1, r6, r1, lsl #2
     ce4:	03080000 	movweq	r0, #32768	; 0x8000
     ce8:	00524943 	subseq	r4, r2, r3, asr #18
     cec:	11015506 	tstne	r1, r6, lsl #10
     cf0:	000000a6 	andeq	r0, r0, r6, lsr #1
     cf4:	07ff010c 	ldrbeq	r0, [pc, ip, lsl #2]!
     cf8:	56060000 	strpl	r0, [r6], -r0
     cfc:	00a61101 	adceq	r1, r6, r1, lsl #2
     d00:	01100000 	tsteq	r0, r0
     d04:	00000546 	andeq	r0, r0, r6, asr #10
     d08:	11015706 	tstne	r1, r6, lsl #14
     d0c:	000000a6 	andeq	r0, r0, r6, lsr #1
     d10:	02c30114 	sbceq	r0, r3, #20, 2
     d14:	58060000 	stmdapl	r6, {}	; <UNPREDICTABLE>
     d18:	00a61101 	adceq	r1, r6, r1, lsl #2
     d1c:	01180000 	tsteq	r8, r0
     d20:	00000569 	andeq	r0, r0, r9, ror #10
     d24:	11015906 	tstne	r1, r6, lsl #18
     d28:	0000009a 	muleq	r0, sl, r0
     d2c:	0372011c 	cmneq	r2, #28, 2
     d30:	5a060000 	bpl	180d38 <_Min_Stack_Size+0x180938>
     d34:	00a61101 	adceq	r1, r6, r1, lsl #2
     d38:	01200000 			; <UNDEFINED> instruction: 0x01200000
     d3c:	00000054 	andeq	r0, r0, r4, asr r0
     d40:	11015b06 	tstne	r1, r6, lsl #22
     d44:	000000a6 	andeq	r0, r0, r6, lsr #1
     d48:	05730124 	ldrbeq	r0, [r3, #-292]!	; 0xfffffedc
     d4c:	5c060000 	stcpl	0, cr0, [r6], {-0}
     d50:	026f1101 	rsbeq	r1, pc, #1073741824	; 0x40000000
     d54:	01280000 			; <UNDEFINED> instruction: 0x01280000
     d58:	00000234 	andeq	r0, r0, r4, lsr r2
     d5c:	11015d06 	tstne	r1, r6, lsl #26
     d60:	000000a6 	andeq	r0, r0, r6, lsr #1
     d64:	06cf0130 			; <UNDEFINED> instruction: 0x06cf0130
     d68:	5e060000 	cdppl	0, 0, cr0, cr6, cr0, {0}
     d6c:	00a61101 	adceq	r1, r6, r1, lsl #2
     d70:	01340000 	teqeq	r4, r0
     d74:	00000359 	andeq	r0, r0, r9, asr r3
     d78:	11015f06 	tstne	r1, r6, lsl #30
     d7c:	000000a6 	andeq	r0, r0, r6, lsr #1
     d80:	057d0138 	ldrbeq	r0, [sp, #-312]!	; 0xfffffec8
     d84:	60060000 	andvs	r0, r6, r0
     d88:	009a1101 	addseq	r1, sl, r1, lsl #2
     d8c:	013c0000 	teqeq	ip, r0
     d90:	00000008 	andeq	r0, r0, r8
     d94:	11016106 	tstne	r1, r6, lsl #2
     d98:	000000a6 	andeq	r0, r0, r6, lsr #1
     d9c:	04cb0140 	strbeq	r0, [fp], #320	; 0x140
     da0:	62060000 	andvs	r0, r6, #0
     da4:	00a61101 	adceq	r1, r6, r1, lsl #2
     da8:	01440000 	mrseq	r0, (UNDEF: 68)
     dac:	00000587 	andeq	r0, r0, r7, lsl #11
     db0:	11016306 	tstne	r1, r6, lsl #6
     db4:	0000026f 	andeq	r0, r0, pc, ror #4
     db8:	04dd0148 	ldrbeq	r0, [sp], #328	; 0x148
     dbc:	64060000 	strvs	r0, [r6], #-0
     dc0:	00a61101 	adceq	r1, r6, r1, lsl #2
     dc4:	01500000 	cmpeq	r0, r0
     dc8:	000000f3 	strdeq	r0, [r0], -r3
     dcc:	11016506 	tstne	r1, r6, lsl #10
     dd0:	000000a6 	andeq	r0, r0, r6, lsr #1
     dd4:	06b60154 	ssateq	r0, #23, r4, asr #2
     dd8:	66060000 	strvs	r0, [r6], -r0
     ddc:	00a61101 	adceq	r1, r6, r1, lsl #2
     de0:	01580000 	cmpeq	r8, r0
     de4:	00000591 	muleq	r0, r1, r5
     de8:	11016706 	tstne	r1, r6, lsl #14
     dec:	0000009a 	muleq	r0, sl, r0
     df0:	0428015c 	strteq	r0, [r8], #-348	; 0xfffffea4
     df4:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
     df8:	00a61101 	adceq	r1, r6, r1, lsl #2
     dfc:	01600000 	cmneq	r0, r0
     e00:	0000002e 	andeq	r0, r0, lr, lsr #32
     e04:	11016906 	tstne	r1, r6, lsl #18
     e08:	000000a6 	andeq	r0, r0, r6, lsr #1
     e0c:	059b0164 	ldreq	r0, [fp, #356]	; 0x164
     e10:	6a060000 	bvs	180e18 <_Min_Stack_Size+0x180a18>
     e14:	026f1101 	rsbeq	r1, pc, #1073741824	; 0x40000000
     e18:	01680000 	cmneq	r8, r0
     e1c:	000000a2 	andeq	r0, r0, r2, lsr #1
     e20:	11016b06 	tstne	r1, r6, lsl #22
     e24:	000000a6 	andeq	r0, r0, r6, lsr #1
     e28:	53430370 	movtpl	r0, #13168	; 0x3370
     e2c:	6c060052 	stcvs	0, cr0, [r6], {82}	; 0x52
     e30:	00a61101 	adceq	r1, r6, r1, lsl #2
     e34:	01740000 	cmneq	r4, r0
     e38:	000005a5 	andeq	r0, r0, r5, lsr #11
     e3c:	11016d06 	tstne	r1, r6, lsl #26
     e40:	0000026f 	andeq	r0, r0, pc, ror #4
     e44:	023c0178 	eorseq	r0, ip, #120, 2
     e48:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
     e4c:	00a61101 	adceq	r1, r6, r1, lsl #2
     e50:	01800000 	orreq	r0, r0, r0
     e54:	000006e9 	andeq	r0, r0, r9, ror #13
     e58:	11016f06 	tstne	r1, r6, lsl #30
     e5c:	000000a6 	andeq	r0, r0, r6, lsr #1
     e60:	07c30184 	strbeq	r0, [r3, r4, lsl #3]
     e64:	70060000 	andvc	r0, r6, r0
     e68:	025f1101 	subseq	r1, pc, #1073741824	; 0x40000000
     e6c:	01880000 	orreq	r0, r8, r0
     e70:	00000000 	andeq	r0, r0, r0
     e74:	11017106 	tstne	r1, r6, lsl #2
     e78:	000000a6 	andeq	r0, r0, r6, lsr #1
     e7c:	0e0d008c 	cdpeq	0, 0, cr0, cr13, cr12, {4}
     e80:	06000003 	streq	r0, [r0], -r3
     e84:	02ca0172 	sbceq	r0, sl, #-2147483620	; 0x8000001c
     e88:	7f0b0000 	svcvc	0x000b0000
     e8c:	8a000002 	bhi	e9c <_Min_Stack_Size+0xa9c>
     e90:	2c03050a 	cfstr32cs	mvfx0, [r3], {10}
     e94:	0b200004 	bleq	800eac <_Min_Stack_Size+0x800aac>
     e98:	0000029f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     e9c:	03050f8b 	movweq	r0, #24459	; 0x5f8b
     ea0:	08000c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp}
     ea4:	0002bf0b 	andeq	fp, r2, fp, lsl #30
     ea8:	050f8c00 	streq	r8, [pc, #-3072]	; 2b0 <_Min_Heap_Size+0xb0>
     eac:	00000003 	andeq	r0, r0, r3
     eb0:	07e91000 	strbeq	r1, [r9, r0]!
     eb4:	dd010000 	stcle	0, cr0, [r1, #-0]
     eb8:	00068806 	andeq	r8, r6, r6, lsl #16
     ebc:	00010008 	andeq	r0, r1, r8
     ec0:	209c0100 	addscs	r0, ip, r0, lsl #2
     ec4:	11000005 	tstne	r0, r5
     ec8:	00706d74 	rsbseq	r6, r0, r4, ror sp
     ecc:	9a0cdf01 	bls	338ad8 <_Min_Stack_Size+0x3386d8>
     ed0:	02000000 	andeq	r0, r0, #0
     ed4:	3f097091 	svccc	0x00097091
     ed8:	15000008 	strne	r0, [r0, #-8]
     edc:	0000009a 	muleq	r0, sl, r0
     ee0:	09749102 	ldmdbeq	r4!, {r1, r8, ip, pc}^
     ee4:	0000082c 	andeq	r0, r0, ip, lsr #16
     ee8:	00009a21 	andeq	r9, r0, r1, lsr #20
     eec:	6c910200 	lfmvs	f0, 4, [r1], {0}
     ef0:	00081d09 	andeq	r1, r8, r9, lsl #26
     ef4:	009a2b00 	addseq	r2, sl, r0, lsl #22
     ef8:	91020000 	mrsls	r0, (UNDEF: 2)
     efc:	08270968 	stmdaeq	r7!, {r3, r5, r6, r8, fp}
     f00:	9a3a0000 	bls	e80f08 <_Min_Stack_Size+0xe80b08>
     f04:	02000000 	andeq	r0, r0, #0
     f08:	12006491 	andne	r6, r0, #-1862270976	; 0x91000000
     f0c:	00000812 	andeq	r0, r0, r2, lsl r8
     f10:	6406a801 	strvs	sl, [r6], #-2049	; 0xfffff7ff
     f14:	24080006 	strcs	r0, [r8], #-6
     f18:	01000000 	mrseq	r0, (UNDEF: 0)
     f1c:	001e009c 	mulseq	lr, ip, r0
     f20:	00020000 	andeq	r0, r2, r0
     f24:	00000368 	andeq	r0, r0, r8, ror #6
     f28:	06240104 	strteq	r0, [r4], -r4, lsl #2
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	08b10000 	ldmeq	r1!, {}	; <UNPREDICTABLE>
     f34:	04a10000 	strteq	r0, [r1], #0
     f38:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
     f3c:	80010000 	andhi	r0, r1, r0
     f40:	000014ab 	andeq	r1, r0, fp, lsr #9
     f44:	04010005 	streq	r0, [r1], #-5
     f48:	0000037a 	andeq	r0, r0, sl, ror r3
     f4c:	00011a15 	andeq	r1, r1, r5, lsl sl
     f50:	0ccb1d00 	stcleq	13, cr1, [fp], {0}
     f54:	04a10000 	strteq	r0, [r1], #0
     f58:	005f0000 	subseq	r0, pc, r0
     f5c:	00000000 	andeq	r0, r0, r0
     f60:	06db0000 	ldrbeq	r0, [fp], r0
     f64:	3b160000 	blcc	580f6c <_Min_Stack_Size+0x580b6c>
     f68:	03000009 	movweq	r0, #9
     f6c:	003217d1 	ldrsbteq	r1, [r2], -r1
     f70:	04080000 	streq	r0, [r8], #-0
     f74:	00028407 	andeq	r8, r2, r7, lsl #8
     f78:	00320d00 	eorseq	r0, r2, r0, lsl #26
     f7c:	04170000 	ldreq	r0, [r7], #-0
     f80:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     f84:	05080800 	streq	r0, [r8, #-2048]	; 0xfffff800
     f88:	0000040a 	andeq	r0, r0, sl, lsl #8
     f8c:	13040808 	movwne	r0, #18440	; 0x4808
     f90:	08000005 	stmdaeq	r0, {r0, r2}
     f94:	07060601 	streq	r0, [r6, -r1, lsl #12]
     f98:	01080000 	mrseq	r0, (UNDEF: 8)
     f9c:	00070408 	andeq	r0, r7, r8, lsl #8
     fa0:	05020800 	streq	r0, [r2, #-2048]	; 0xfffff800
     fa4:	000005af 	andeq	r0, r0, pc, lsr #11
     fa8:	96070208 	strls	r0, [r7], -r8, lsl #4
     fac:	08000007 	stmdaeq	r0, {r0, r1, r2}
     fb0:	040f0504 	streq	r0, [pc], #-1284	; fb8 <_Min_Stack_Size+0xbb8>
     fb4:	04080000 	streq	r0, [r8], #-0
     fb8:	00027f07 	andeq	r7, r2, r7, lsl #30
     fbc:	07080800 	streq	r0, [r8, -r0, lsl #16]
     fc0:	0000027a 	andeq	r0, r0, sl, ror r2
     fc4:	5a090418 	bpl	24202c <_Min_Stack_Size+0x241c2c>
     fc8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     fcc:	00000090 	muleq	r0, r0, r0
     fd0:	0d080108 	stfeqs	f0, [r8, #-32]	; 0xffffffe0
     fd4:	14000007 	strne	r0, [r0], #-7
     fd8:	00000090 	muleq	r0, r0, r0
     fdc:	0000900d 	andeq	r9, r0, sp
     fe0:	00970900 	addseq	r0, r7, r0, lsl #18
     fe4:	ab090000 	blge	240fec <_Min_Stack_Size+0x240bec>
     fe8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     fec:	012b1810 			; <UNDEFINED> instruction: 0x012b1810
     ff0:	00000103 	andeq	r0, r0, r3, lsl #2
     ff4:	000b7706 	andeq	r7, fp, r6, lsl #14
     ff8:	16012c00 	strne	r2, [r1], -r0, lsl #24
     ffc:	000000a1 	andeq	r0, r0, r1, lsr #1
    1000:	0a8b0600 	beq	fe2c2808 <_estack+0xde2b2808>
    1004:	012d0000 			; <UNDEFINED> instruction: 0x012d0000
    1008:	00008b16 	andeq	r8, r0, r6, lsl fp
    100c:	21060400 	tstcs	r6, r0, lsl #8
    1010:	2e00000c 	cdpcs	0, 0, cr0, cr0, cr12, {0}
    1014:	00321601 	eorseq	r1, r2, r1, lsl #12
    1018:	06080000 	streq	r0, [r8], -r0
    101c:	00000dec 	andeq	r0, r0, ip, ror #27
    1020:	3216012f 	andscc	r0, r6, #-1073741813	; 0xc000000b
    1024:	0c000000 	stceq	0, cr0, [r0], {-0}
    1028:	000ae106 	andeq	lr, sl, r6, lsl #2
    102c:	16013000 	strne	r3, [r1], -r0
    1030:	00000039 	andeq	r0, r0, r9, lsr r0
    1034:	0d530610 	ldcleq	6, cr0, [r3, #-64]	; 0xffffffc0
    1038:	01310000 	teqeq	r1, r0
    103c:	00003216 	andeq	r3, r0, r6, lsl r2
    1040:	11001400 	tstne	r0, r0, lsl #8
    1044:	0000094b 	andeq	r0, r0, fp, asr #18
    1048:	00ac0132 	adceq	r0, ip, r2, lsr r1
    104c:	030d0000 	movweq	r0, #53248	; 0xd000
    1050:	10000001 	andne	r0, r0, r1
    1054:	6a013818 	bvs	4f0bc <_Min_Stack_Size+0x4ecbc>
    1058:	06000001 	streq	r0, [r0], -r1
    105c:	00000b77 	andeq	r0, r0, r7, ror fp
    1060:	a1160139 	tstge	r6, r9, lsr r1
    1064:	00000000 	andeq	r0, r0, r0
    1068:	000a8b06 	andeq	r8, sl, r6, lsl #22
    106c:	16013a00 	strne	r3, [r1], -r0, lsl #20
    1070:	0000008b 	andeq	r0, r0, fp, lsl #1
    1074:	0c210604 	stceq	6, cr0, [r1], #-16
    1078:	013b0000 	teqeq	fp, r0
    107c:	00003216 	andeq	r3, r0, r6, lsl r2
    1080:	ec060800 	stc	8, cr0, [r6], {-0}
    1084:	3c00000d 	stccc	0, cr0, [r0], {13}
    1088:	00391601 	eorseq	r1, r9, r1, lsl #12
    108c:	060c0000 	streq	r0, [ip], -r0
    1090:	00000ae1 	andeq	r0, r0, r1, ror #21
    1094:	3216013d 	andscc	r0, r6, #1073741839	; 0x4000000f
    1098:	10000000 	andne	r0, r0, r0
    109c:	000d5306 	andeq	r5, sp, r6, lsl #6
    10a0:	16013e00 	strne	r3, [r1], -r0, lsl #28
    10a4:	00000032 	andeq	r0, r0, r2, lsr r0
    10a8:	81110014 	tsthi	r1, r4, lsl r0
    10ac:	3f000009 	svccc	0x00000009
    10b0:	00011301 	andeq	r1, r1, r1, lsl #6
    10b4:	016a0d00 	cmneq	sl, r0, lsl #26
    10b8:	a8100000 	ldmdage	r0, {}	; <UNPREDICTABLE>
    10bc:	01c50146 	biceq	r0, r5, r6, asr #2
    10c0:	4b060000 	blmi	1810c8 <_Min_Stack_Size+0x180cc8>
    10c4:	4700000c 	strmi	r0, [r0, -ip]
    10c8:	01c51b01 	biceq	r1, r5, r1, lsl #22
    10cc:	06000000 	streq	r0, [r0], -r0
    10d0:	00000b16 	andeq	r0, r0, r6, lsl fp
    10d4:	3e1b0148 	mufccem	f0, f3, #0.0
    10d8:	10000000 	andne	r0, r0, r0
    10dc:	00092906 	andeq	r2, r9, r6, lsl #18
    10e0:	1b014900 	blne	534e8 <_Min_Stack_Size+0x530e8>
    10e4:	0000003e 	andeq	r0, r0, lr, lsr r0
    10e8:	55611a14 	strbpl	r1, [r1, #-2580]!	; 0xfffff5ec
    10ec:	4a020070 	bmi	812b4 <_Min_Stack_Size+0x80eb4>
    10f0:	01d51b01 	bicseq	r1, r5, r1, lsl #22
    10f4:	06180000 	ldreq	r0, [r8], -r0
    10f8:	00000cae 	andeq	r0, r0, lr, lsr #25
    10fc:	e51b014b 	ldr	r0, [fp, #-331]	; 0xfffffeb5
    1100:	60000001 	andvs	r0, r0, r1
    1104:	00900a00 	addseq	r0, r0, r0, lsl #20
    1108:	01d50000 	bicseq	r0, r5, r0
    110c:	320c0000 	andcc	r0, ip, #0
    1110:	0f000000 	svceq	0x00000000
    1114:	01030a00 	tsteq	r3, r0, lsl #20
    1118:	01e50000 	mvneq	r0, r0
    111c:	320c0000 	andcc	r0, ip, #0
    1120:	02000000 	andeq	r0, r0, #0
    1124:	016a0a00 	cmneq	sl, r0, lsl #20
    1128:	01f50000 	mvnseq	r0, r0
    112c:	320c0000 	andcc	r0, ip, #0
    1130:	02000000 	andeq	r0, r0, #0
    1134:	0bb81100 	bleq	fee0553c <_estack+0xdedf553c>
    1138:	014f0000 	mrseq	r0, SPSR
    113c:	0000017a 	andeq	r0, r0, sl, ror r1
    1140:	0001f50d 	andeq	pc, r1, sp, lsl #10
    1144:	0a931b00 	beq	fe4c7d4c <_estack+0xde4b7d4c>
    1148:	57020000 	strpl	r0, [r2, -r0]
    114c:	01f51601 	mvnseq	r1, r1, lsl #12
    1150:	5a0a0000 	bpl	281158 <_Min_Stack_Size+0x280d58>
    1154:	22000000 	andcs	r0, r0, #0
    1158:	0c000002 	stceq	0, cr0, [r0], {2}
    115c:	00000032 	andeq	r0, r0, r2, lsr r0
    1160:	d41c000f 	ldrle	r0, [ip], #-15
    1164:	0100000d 	tsteq	r0, sp
    1168:	021216fd 	andseq	r1, r2, #265289728	; 0xfd00000
    116c:	03050000 	movweq	r0, #20480	; 0x5000
    1170:	00000000 	andeq	r0, r0, r0
    1174:	0002051d 	andeq	r0, r2, sp, lsl r5
    1178:	01120100 	tsteq	r2, r0, lsl #2
    117c:	54030503 	strpl	r0, [r3], #-1283	; 0xfffffafd
    1180:	0a200004 	beq	801198 <_Min_Stack_Size+0x800d98>
    1184:	00000090 	muleq	r0, r0, r0
    1188:	00000254 	andeq	r0, r0, r4, asr r2
    118c:	0000321e 	andeq	r3, r0, lr, lsl r2
    1190:	0003ff00 	andeq	pc, r3, r0, lsl #30
    1194:	000a8701 	andeq	r8, sl, r1, lsl #14
    1198:	03011300 	movweq	r1, #4864	; 0x1300
    119c:	00000243 	andeq	r0, r0, r3, asr #4
    11a0:	04fc0305 	ldrbteq	r0, [ip], #773	; 0x305
    11a4:	f8012000 			; <UNDEFINED> instruction: 0xf8012000
    11a8:	1400000b 	strne	r0, [r0], #-11
    11ac:	01c50301 	biceq	r0, r5, r1, lsl #6
    11b0:	03050000 	movweq	r0, #20480	; 0x5000
    11b4:	200008fc 	strdcs	r0, [r0], -ip
    11b8:	000da901 	andeq	sl, sp, r1, lsl #18
    11bc:	16011700 	strne	r1, [r1], -r0, lsl #14
    11c0:	0000005a 	andeq	r0, r0, sl, asr r0
    11c4:	00000305 	andeq	r0, r0, r5, lsl #6
    11c8:	ec120000 	ldc	0, cr0, [r2], {-0}
    11cc:	2900000a 	stmdbcs	r0, {r1, r3}
    11d0:	00000026 	andeq	r0, r0, r6, lsr #32
    11d4:	0000029e 	muleq	r0, lr, r2
    11d8:	0000a10b 	andeq	sl, r0, fp, lsl #2
    11dc:	a4120000 	ldrge	r0, [r2], #-0
    11e0:	1f00000a 	svcne	0x0000000a
    11e4:	00000084 	andeq	r0, r0, r4, lsl #1
    11e8:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    11ec:	0000840b 	andeq	r8, r0, fp, lsl #8
    11f0:	00a60b00 	adceq	r0, r6, r0, lsl #22
    11f4:	260b0000 	strcs	r0, [fp], -r0
    11f8:	00000000 	andeq	r0, r0, r0
    11fc:	000db912 	andeq	fp, sp, r2, lsl r9
    1200:	00842100 	addeq	r2, r4, r0, lsl #2
    1204:	02da0000 	sbcseq	r0, sl, #0
    1208:	840b0000 	strhi	r0, [fp], #-0
    120c:	0b000000 	bleq	1214 <_Min_Stack_Size+0xe14>
    1210:	0000003e 	andeq	r0, r0, lr, lsr r0
    1214:	0000260b 	andeq	r2, r0, fp, lsl #12
    1218:	370f0000 	strcc	r0, [pc, -r0]
    121c:	1100000a 	tstne	r0, sl
    1220:	00003208 	andeq	r3, r0, r8, lsl #4
    1224:	00000000 	andeq	r0, r0, r0
    1228:	00007400 	andeq	r7, r0, r0, lsl #8
    122c:	3d9c0100 	ldfccs	f0, [ip]
    1230:	02000003 	andeq	r0, r0, #3
    1234:	00000b58 	andeq	r0, r0, r8, asr fp
    1238:	322f0811 	eorcc	r0, pc, #1114112	; 0x110000
    123c:	02000000 	andeq	r0, r0, #0
    1240:	e1016491 			; <UNDEFINED> instruction: 0xe1016491
    1244:	1200000a 	andne	r0, r0, #10
    1248:	00320c08 	eorseq	r0, r2, r8, lsl #24
    124c:	91020000 	mrsls	r0, (UNDEF: 2)
    1250:	0dec016c 	stfeqe	f0, [ip, #432]!	; 0x1b0
    1254:	08130000 	ldmdaeq	r3, {}	; <UNPREDICTABLE>
    1258:	0000320c 	andeq	r3, r0, ip, lsl #4
    125c:	68910200 	ldmvs	r1, {r9}
    1260:	14007204 	strne	r7, [r0], #-516	; 0xfffffdfc
    1264:	00320c08 	eorseq	r0, r2, r8, lsl #24
    1268:	91020000 	mrsls	r0, (UNDEF: 2)
    126c:	0b0f0174 	bleq	3c1844 <_Min_Stack_Size+0x3c1444>
    1270:	08150000 	ldmdaeq	r5, {}	; <UNPREDICTABLE>
    1274:	00033d1b 	andeq	r3, r3, fp, lsl sp
    1278:	70910200 	addsvc	r0, r1, r0, lsl #4
    127c:	02000900 	andeq	r0, r0, #0, 18
    1280:	d7030000 	strle	r0, [r3, -r0]
    1284:	fc000009 	stc2	0, cr0, [r0], {9}
    1288:	00320a07 	eorseq	r0, r2, r7, lsl #20
    128c:	00000000 	andeq	r0, r0, r0
    1290:	00300000 	eorseq	r0, r0, r0
    1294:	9c010000 	stcls	0, cr0, [r1], {-0}
    1298:	0000037b 	andeq	r0, r0, fp, ror r3
    129c:	000b5802 	andeq	r5, fp, r2, lsl #16
    12a0:	3207fc00 	andcc	pc, r7, #0, 24
    12a4:	00000032 	andeq	r0, r0, r2, lsr r0
    12a8:	016c9102 	cmneq	ip, r2, lsl #2
    12ac:	00000bc6 	andeq	r0, r0, r6, asr #23
    12b0:	7b1907fd 	blvc	6432ac <_Min_Stack_Size+0x642eac>
    12b4:	02000003 	andeq	r0, r0, #3
    12b8:	09007491 	stmdbeq	r0, {r0, r4, r7, sl, ip, sp, lr}
    12bc:	00000103 	andeq	r0, r0, r3, lsl #2
    12c0:	000d8603 	andeq	r8, sp, r3, lsl #12
    12c4:	0507a400 	streq	sl, [r7, #-1024]	; 0xfffffc00
    12c8:	0000003e 	andeq	r0, r0, lr, lsr r0
    12cc:	00000000 	andeq	r0, r0, r0
    12d0:	00000128 	andeq	r0, r0, r8, lsr #2
    12d4:	04299c01 	strteq	r9, [r9], #-3073	; 0xfffff3ff
    12d8:	d6020000 	strle	r0, [r2], -r0
    12dc:	a400000d 	strge	r0, [r0], #-13
    12e0:	005a2b07 	subseq	r2, sl, r7, lsl #22
    12e4:	91020000 	mrsls	r0, (UNDEF: 2)
    12e8:	00730e5f 	rsbseq	r0, r3, pc, asr lr
    12ec:	a14307a4 	smlaltbge	r0, r3, r4, r7
    12f0:	02000000 	andeq	r0, r0, #0
    12f4:	05015891 	streq	r5, [r1, #-2193]	; 0xfffff76f
    12f8:	a500000e 	strge	r0, [r0, #-14]
    12fc:	003e1907 	eorseq	r1, lr, r7, lsl #18
    1300:	91020000 	mrsls	r0, (UNDEF: 2)
    1304:	0ac10174 	beq	ff0418dc <_estack+0xdf0318dc>
    1308:	07a60000 	streq	r0, [r6, r0]!
    130c:	00003219 	andeq	r3, r0, r9, lsl r2
    1310:	68910200 	ldmvs	r1, {r9}
    1314:	000d5901 	andeq	r5, sp, r1, lsl #18
    1318:	1907a700 	stmdbne	r7, {r8, r9, sl, sp, pc}
    131c:	00000032 	andeq	r0, r0, r2, lsr r0
    1320:	01609102 	cmneq	r0, r2, lsl #2
    1324:	00000bc6 	andeq	r0, r0, r6, asr #23
    1328:	7b1907a8 	blvc	6431d0 <_Min_Stack_Size+0x642dd0>
    132c:	02000003 	andeq	r0, r0, #3
    1330:	00076c91 	muleq	r7, r1, ip
    1334:	12000000 	andne	r0, r0, #0
    1338:	0f000000 	svceq	0x00000000
    133c:	01000004 	tsteq	r0, r4
    1340:	00000de1 	andeq	r0, r0, r1, ror #27
    1344:	3d0307aa 	stccc	7, cr0, [r3, #-680]	; 0xfffffd58
    1348:	02000003 	andeq	r0, r0, #3
    134c:	05007091 	streq	r7, [r0, #-145]	; 0xffffff6f
    1350:	00000000 	andeq	r0, r0, r0
    1354:	000000da 	ldrdeq	r0, [r0], -sl
    1358:	000c6901 	andeq	r6, ip, r1, lsl #18
    135c:	0507bb00 	streq	fp, [r7, #-2816]	; 0xfffff500
    1360:	00000032 	andeq	r0, r0, r2, lsr r0
    1364:	00649102 	rsbeq	r9, r4, r2, lsl #2
    1368:	0b410300 	bleq	1041f70 <_Min_Stack_Size+0x1041b70>
    136c:	07730000 	ldrbeq	r0, [r3, -r0]!
    1370:	00003e05 	andeq	r3, r0, r5, lsl #28
    1374:	00000000 	andeq	r0, r0, r0
    1378:	0000b800 	andeq	fp, r0, r0, lsl #16
    137c:	c29c0100 	addsgt	r0, ip, #0, 2
    1380:	02000004 	andeq	r0, r0, #4
    1384:	00000dd6 	ldrdeq	r0, [r0], -r6
    1388:	5a2b0773 	bpl	ac315c <_Min_Stack_Size+0xac2d5c>
    138c:	02000000 	andeq	r0, r0, #0
    1390:	61045f91 			; <UNDEFINED> instruction: 0x61045f91
    1394:	07740063 	ldrbeq	r0, [r4, -r3, rrx]!
    1398:	0004c219 	andeq	ip, r4, r9, lsl r2
    139c:	60910200 	addsvs	r0, r1, r0, lsl #4
    13a0:	000bc601 	andeq	ip, fp, r1, lsl #12
    13a4:	19077500 	stmdbne	r7, {r8, sl, ip, sp, lr}
    13a8:	0000037b 	andeq	r0, r0, fp, ror r3
    13ac:	016c9102 	cmneq	ip, r2, lsl #2
    13b0:	00000d59 	andeq	r0, r0, r9, asr sp
    13b4:	320c0776 	andcc	r0, ip, #30932992	; 0x1d80000
    13b8:	02000000 	andeq	r0, r0, #0
    13bc:	72046491 	andvc	r6, r4, #-1862270976	; 0x91000000
    13c0:	07077700 	streq	r7, [r7, -r0, lsl #14]
    13c4:	0000003e 	andeq	r0, r0, lr, lsr r0
    13c8:	07749102 	ldrbeq	r9, [r4, -r2, lsl #2]!
    13cc:	00000000 	andeq	r0, r0, r0
    13d0:	00000012 	andeq	r0, r0, r2, lsl r0
    13d4:	000004a8 	andeq	r0, r0, r8, lsr #9
    13d8:	000de101 	andeq	lr, sp, r1, lsl #2
    13dc:	03077900 	movweq	r7, #30976	; 0x7900
    13e0:	0000033d 	andeq	r0, r0, sp, lsr r3
    13e4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    13e8:	00000005 	andeq	r0, r0, r5
    13ec:	00006000 	andeq	r6, r0, r0
    13f0:	0c690100 	stfeqe	f0, [r9], #-0
    13f4:	077f0000 	ldrbeq	r0, [pc, -r0]!
    13f8:	00003205 	andeq	r3, r0, r5, lsl #4
    13fc:	68910200 	ldmvs	r1, {r9}
    1400:	5a0a0000 	bpl	281408 <_Min_Stack_Size+0x281008>
    1404:	d2000000 	andle	r0, r0, #0
    1408:	0c000004 	stceq	0, cr0, [r0], {4}
    140c:	00000032 	andeq	r0, r0, r2, lsr r0
    1410:	531f0001 	tstpl	pc, #1
    1414:	0100000a 	tsteq	r0, sl
    1418:	0006075e 	andeq	r0, r6, lr, asr r7
    141c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1420:	01000000 	mrseq	r0, (UNDEF: 0)
    1424:	0c80039c 	stceq	3, cr0, [r0], {156}	; 0x9c
    1428:	07420000 	strbeq	r0, [r2, -r0]
    142c:	00003e05 	andeq	r3, r0, r5, lsl #28
    1430:	00000000 	andeq	r0, r0, r0
    1434:	00006c00 	andeq	r6, r0, r0, lsl #24
    1438:	7f9c0100 	svcvc	0x009c0100
    143c:	02000005 	andeq	r0, r0, #5
    1440:	00000b58 	andeq	r0, r0, r8, asr fp
    1444:	322c0742 	eorcc	r0, ip, #17301504	; 0x1080000
    1448:	02000000 	andeq	r0, r0, #0
    144c:	53025c91 	movwpl	r5, #11409	; 0x2c91
    1450:	4200000d 	andmi	r0, r0, #13
    1454:	00324207 	eorseq	r4, r2, r7, lsl #4
    1458:	91020000 	mrsls	r0, (UNDEF: 2)
    145c:	00720458 	rsbseq	r0, r2, r8, asr r4
    1460:	3e070743 	cdpcc	7, 0, cr0, cr7, cr3, {2}
    1464:	02000000 	andeq	r0, r0, #0
    1468:	0f017491 	svceq	0x00017491
    146c:	4400000b 	strmi	r0, [r0], #-11
    1470:	033d1b07 	teqeq	sp, #7168	; 0x1c00
    1474:	91020000 	mrsls	r0, (UNDEF: 2)
    1478:	0a31016c 	beq	c41a30 <_Min_Stack_Size+0xc41630>
    147c:	07450000 	strbeq	r0, [r5, -r0]
    1480:	00057f24 	andeq	r7, r5, r4, lsr #30
    1484:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1488:	00000007 	andeq	r0, r0, r7
    148c:	00001200 	andeq	r1, r0, r0, lsl #4
    1490:	00056500 	andeq	r6, r5, r0, lsl #10
    1494:	0de10100 	stfeqe	f0, [r1]
    1498:	07470000 	strbeq	r0, [r7, -r0]
    149c:	00033d03 	andeq	r3, r3, r3, lsl #26
    14a0:	70910200 	addsvc	r0, r1, r0, lsl #4
    14a4:	00000500 	andeq	r0, r0, r0, lsl #10
    14a8:	002c0000 	eoreq	r0, ip, r0
    14ac:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    14b0:	4a00000c 	bmi	14e8 <_Min_Stack_Size+0x10e8>
    14b4:	00320507 	eorseq	r0, r2, r7, lsl #10
    14b8:	91020000 	mrsls	r0, (UNDEF: 2)
    14bc:	09000068 	stmdbeq	r0, {r3, r5, r6}
    14c0:	00000175 	andeq	r0, r0, r5, ror r1
    14c4:	000b8d03 	andeq	r8, fp, r3, lsl #26
    14c8:	05071f00 	streq	r1, [r7, #-3840]	; 0xfffff100
    14cc:	0000003e 	andeq	r0, r0, lr, lsr r0
    14d0:	00000000 	andeq	r0, r0, r0
    14d4:	0000006c 	andeq	r0, r0, ip, rrx
    14d8:	061e9c01 	ldreq	r9, [lr], -r1, lsl #24
    14dc:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    14e0:	1f00000b 	svcne	0x0000000b
    14e4:	00322a07 	eorseq	r2, r2, r7, lsl #20
    14e8:	91020000 	mrsls	r0, (UNDEF: 2)
    14ec:	0d53025c 	lfmeq	f0, 2, [r3, #-368]	; 0xfffffe90
    14f0:	071f0000 	ldreq	r0, [pc, -r0]
    14f4:	00003240 	andeq	r3, r0, r0, asr #4
    14f8:	58910200 	ldmpl	r1, {r9}
    14fc:	20007204 	andcs	r7, r0, r4, lsl #4
    1500:	003e0707 	eorseq	r0, lr, r7, lsl #14
    1504:	91020000 	mrsls	r0, (UNDEF: 2)
    1508:	0b0f0174 	bleq	3c1ae0 <_Min_Stack_Size+0x3c16e0>
    150c:	07210000 	streq	r0, [r1, -r0]!
    1510:	00033d1b 	andeq	r3, r3, fp, lsl sp
    1514:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1518:	70557004 	subsvc	r7, r5, r4
    151c:	22072200 	andcs	r2, r7, #0, 4
    1520:	0000061e 	andeq	r0, r0, lr, lsl r6
    1524:	07649102 	strbeq	r9, [r4, -r2, lsl #2]!
    1528:	00000000 	andeq	r0, r0, r0
    152c:	00000012 	andeq	r0, r0, r2, lsl r0
    1530:	00000604 	andeq	r0, r0, r4, lsl #12
    1534:	000de101 	andeq	lr, sp, r1, lsl #2
    1538:	03072400 	movweq	r2, #29696	; 0x7400
    153c:	0000033d 	andeq	r0, r0, sp, lsr r3
    1540:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1544:	00000005 	andeq	r0, r0, r5
    1548:	00002c00 	andeq	r2, r0, r0, lsl #24
    154c:	0c690100 	stfeqe	f0, [r9], #-0
    1550:	07270000 	streq	r0, [r7, -r0]!
    1554:	00003205 	andeq	r3, r0, r5, lsl #4
    1558:	68910200 	ldmvs	r1, {r9}
    155c:	0e090000 	cdpeq	0, 0, cr0, cr9, cr0, {0}
    1560:	03000001 	movweq	r0, #1
    1564:	00000c2e 	andeq	r0, r0, lr, lsr #24
    1568:	3e0506fc 	mcrcc	6, 0, r0, cr5, cr12, {7}
    156c:	00000000 	andeq	r0, r0, r0
    1570:	6c000000 	stcvs	0, cr0, [r0], {-0}
    1574:	01000000 	mrseq	r0, (UNDEF: 0)
    1578:	0006bd9c 	muleq	r6, ip, sp
    157c:	0b580200 	bleq	1601d84 <_Min_Stack_Size+0x1601984>
    1580:	06fc0000 	ldrbteq	r0, [ip], r0
    1584:	0000322b 	andeq	r3, r0, fp, lsr #4
    1588:	5c910200 	lfmpl	f0, 4, [r1], {0}
    158c:	000b7702 	andeq	r7, fp, r2, lsl #14
    1590:	4406fc00 	strmi	pc, [r6], #-3072	; 0xfffff400
    1594:	000000a1 	andeq	r0, r0, r1, lsr #1
    1598:	04589102 	ldrbeq	r9, [r8], #-258	; 0xfffffefe
    159c:	06fd0072 	uxtaheq	r0, sp, r2
    15a0:	00003e07 	andeq	r3, r0, r7, lsl #28
    15a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    15a8:	000b0f01 	andeq	r0, fp, r1, lsl #30
    15ac:	1b06fe00 	blne	1c0db4 <_Min_Stack_Size+0x1c09b4>
    15b0:	0000033d 	andeq	r0, r0, sp, lsr r3
    15b4:	016c9102 	cmneq	ip, r2, lsl #2
    15b8:	00000a31 	andeq	r0, r0, r1, lsr sl
    15bc:	7f2406ff 	svcvc	0x002406ff
    15c0:	02000005 	andeq	r0, r0, #5
    15c4:	00076491 	muleq	r7, r1, r4
    15c8:	12000000 	andne	r0, r0, #0
    15cc:	a3000000 	movwge	r0, #0
    15d0:	01000006 	tsteq	r0, r6
    15d4:	00000de1 	andeq	r0, r0, r1, ror #27
    15d8:	3d030701 	stccc	7, cr0, [r3, #-4]
    15dc:	02000003 	andeq	r0, r0, #3
    15e0:	05007091 	streq	r7, [r0, #-145]	; 0xffffff6f
    15e4:	00000000 	andeq	r0, r0, r0
    15e8:	0000002c 	andeq	r0, r0, ip, lsr #32
    15ec:	000c6901 	andeq	r6, ip, r1, lsl #18
    15f0:	05070400 	streq	r0, [r7, #-1024]	; 0xfffffc00
    15f4:	00000032 	andeq	r0, r0, r2, lsr r0
    15f8:	00689102 	rsbeq	r9, r8, r2, lsl #2
    15fc:	0d380300 	ldceq	3, cr0, [r8, #-0]
    1600:	06d90000 	ldrbeq	r0, [r9], r0
    1604:	00003e05 	andeq	r3, r0, r5, lsl #28
    1608:	00000000 	andeq	r0, r0, r0
    160c:	00006c00 	andeq	r6, r0, r0, lsl #24
    1610:	579c0100 	ldrpl	r0, [ip, r0, lsl #2]
    1614:	02000007 	andeq	r0, r0, #7
    1618:	00000b58 	andeq	r0, r0, r8, asr fp
    161c:	322906d9 	eorcc	r0, r9, #227540992	; 0xd900000
    1620:	02000000 	andeq	r0, r0, #0
    1624:	77025c91 			; <UNDEFINED> instruction: 0x77025c91
    1628:	d900000b 	stmdble	r0, {r0, r1, r3}
    162c:	00a14206 	adceq	r4, r1, r6, lsl #4
    1630:	91020000 	mrsls	r0, (UNDEF: 2)
    1634:	00720458 	rsbseq	r0, r2, r8, asr r4
    1638:	3e0706da 	mcrcc	6, 0, r0, cr7, cr10, {6}
    163c:	02000000 	andeq	r0, r0, #0
    1640:	0f017491 	svceq	0x00017491
    1644:	db00000b 	blle	1678 <_Min_Stack_Size+0x1278>
    1648:	033d1b06 	teqeq	sp, #6144	; 0x1800
    164c:	91020000 	mrsls	r0, (UNDEF: 2)
    1650:	5570046c 	ldrbpl	r0, [r0, #-1132]!	; 0xfffffb94
    1654:	06dc0070 			; <UNDEFINED> instruction: 0x06dc0070
    1658:	00061e22 	andeq	r1, r6, r2, lsr #28
    165c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1660:	00000007 	andeq	r0, r0, r7
    1664:	00001200 	andeq	r1, r0, r0, lsl #4
    1668:	00073d00 	andeq	r3, r7, r0, lsl #26
    166c:	0de10100 	stfeqe	f0, [r1]
    1670:	06de0000 	ldrbeq	r0, [lr], r0
    1674:	00033d03 	andeq	r3, r3, r3, lsl #26
    1678:	70910200 	addsvc	r0, r1, r0, lsl #4
    167c:	00000500 	andeq	r0, r0, r0, lsl #10
    1680:	002c0000 	eoreq	r0, ip, r0
    1684:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1688:	e100000c 	tst	r0, ip
    168c:	00320506 	eorseq	r0, r2, r6, lsl #10
    1690:	91020000 	mrsls	r0, (UNDEF: 2)
    1694:	03000068 	movweq	r0, #104	; 0x68
    1698:	00000af3 	strdeq	r0, [r0], -r3
    169c:	3e0506ae 	cfmadd32cc	mvax5, mvfx0, mvfx5, mvfx14
    16a0:	00000000 	andeq	r0, r0, r0
    16a4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    16a8:	01000000 	mrseq	r0, (UNDEF: 0)
    16ac:	00081e9c 	muleq	r8, ip, lr
    16b0:	0b580200 	bleq	1601eb8 <_Min_Stack_Size+0x1601ab8>
    16b4:	06ae0000 	strteq	r0, [lr], r0
    16b8:	0000322a 	andeq	r3, r0, sl, lsr #4
    16bc:	5c910200 	lfmpl	f0, 4, [r1], {0}
    16c0:	000b7702 	andeq	r7, fp, r2, lsl #14
    16c4:	4306ae00 	movwmi	sl, #28160	; 0x6e00
    16c8:	000000a1 	andeq	r0, r0, r1, lsr #1
    16cc:	02589102 	subseq	r9, r8, #-2147483648	; 0x80000000
    16d0:	00000a8b 	andeq	r0, r0, fp, lsl #21
    16d4:	845006ae 	ldrbhi	r0, [r0], #-1710	; 0xfffff952
    16d8:	02000000 	andeq	r0, r0, #0
    16dc:	dc025491 	cfstrsle	mvf5, [r2], {145}	; 0x91
    16e0:	ae00000b 	cdpge	0, 0, cr0, cr0, cr11, {0}
    16e4:	00326206 	eorseq	r6, r2, r6, lsl #4
    16e8:	91020000 	mrsls	r0, (UNDEF: 2)
    16ec:	0d530250 	lfmeq	f0, 2, [r3, #-320]	; 0xfffffec0
    16f0:	06ae0000 	strteq	r0, [lr], r0
    16f4:	00003277 	andeq	r3, r0, r7, ror r2
    16f8:	00910200 	addseq	r0, r1, r0, lsl #4
    16fc:	af007204 	svcge	0x00007204
    1700:	003e0706 	eorseq	r0, lr, r6, lsl #14
    1704:	91020000 	mrsls	r0, (UNDEF: 2)
    1708:	0b0f0174 	bleq	3c1ce0 <_Min_Stack_Size+0x3c18e0>
    170c:	06b00000 	ldrteq	r0, [r0], r0
    1710:	00033d1b 	andeq	r3, r3, fp, lsl sp
    1714:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1718:	000a3101 	andeq	r3, sl, r1, lsl #2
    171c:	2406b100 	strcs	fp, [r6], #-256	; 0xffffff00
    1720:	0000057f 	andeq	r0, r0, pc, ror r5
    1724:	07649102 	strbeq	r9, [r4, -r2, lsl #2]!
    1728:	00000000 	andeq	r0, r0, r0
    172c:	00000012 	andeq	r0, r0, r2, lsl r0
    1730:	00000804 	andeq	r0, r0, r4, lsl #16
    1734:	000de101 	andeq	lr, sp, r1, lsl #2
    1738:	0306b300 	movweq	fp, #25344	; 0x6300
    173c:	0000033d 	andeq	r0, r0, sp, lsr r3
    1740:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1744:	00000005 	andeq	r0, r0, r5
    1748:	00005400 	andeq	r5, r0, r0, lsl #8
    174c:	0c690100 	stfeqe	f0, [r9], #-0
    1750:	06b60000 	ldrteq	r0, [r6], r0
    1754:	00003205 	andeq	r3, r0, r5, lsl #4
    1758:	68910200 	ldmvs	r1, {r9}
    175c:	e4030000 	str	r0, [r3], #-0
    1760:	7b000005 	blvc	177c <_Min_Stack_Size+0x137c>
    1764:	003e0506 	eorseq	r0, lr, r6, lsl #10
    1768:	0b340000 	bleq	d01770 <_Min_Stack_Size+0xd01370>
    176c:	00940800 	addseq	r0, r4, r0, lsl #16
    1770:	9c010000 	stcls	0, cr0, [r1], {-0}
    1774:	000008e5 	andeq	r0, r0, r5, ror #17
    1778:	000b5802 	andeq	r5, fp, r2, lsl #16
    177c:	28067b00 	stmdacs	r6, {r8, r9, fp, ip, sp, lr}
    1780:	00000032 	andeq	r0, r0, r2, lsr r0
    1784:	025c9102 	subseq	r9, ip, #-2147483648	; 0x80000000
    1788:	00000b77 	andeq	r0, r0, r7, ror fp
    178c:	a141067b 	hvcge	4203	; 0x106b
    1790:	02000000 	andeq	r0, r0, #0
    1794:	8b025891 	blhi	979e0 <_Min_Stack_Size+0x975e0>
    1798:	7b00000a 	blvc	17c8 <_Min_Stack_Size+0x13c8>
    179c:	00844e06 	addeq	r4, r4, r6, lsl #28
    17a0:	91020000 	mrsls	r0, (UNDEF: 2)
    17a4:	0bdc0254 	bleq	ff7020fc <_estack+0xdf6f20fc>
    17a8:	067b0000 	ldrbteq	r0, [fp], -r0
    17ac:	00003260 	andeq	r3, r0, r0, ror #4
    17b0:	50910200 	addspl	r0, r1, r0, lsl #4
    17b4:	000d5302 	andeq	r5, sp, r2, lsl #6
    17b8:	75067b00 	strvc	r7, [r6, #-2816]	; 0xfffff500
    17bc:	00000032 	andeq	r0, r0, r2, lsr r0
    17c0:	04009102 	streq	r9, [r0], #-258	; 0xfffffefe
    17c4:	067c0072 			; <UNDEFINED> instruction: 0x067c0072
    17c8:	00003e07 	andeq	r3, r0, r7, lsl #28
    17cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    17d0:	000b0f01 	andeq	r0, fp, r1, lsl #30
    17d4:	1b067d00 	blne	1a0bdc <_Min_Stack_Size+0x1a07dc>
    17d8:	0000033d 	andeq	r0, r0, sp, lsr r3
    17dc:	046c9102 	strbteq	r9, [ip], #-258	; 0xfffffefe
    17e0:	00705570 	rsbseq	r5, r0, r0, ror r5
    17e4:	1e22067e 	mcrne	6, 1, r0, cr2, cr14, {3}
    17e8:	02000006 	andeq	r0, r0, #6
    17ec:	42076491 	andmi	r6, r7, #-1862270976	; 0x91000000
    17f0:	1208000b 	andne	r0, r8, #11
    17f4:	cb000000 	blgt	17fc <_Min_Stack_Size+0x13fc>
    17f8:	01000008 	tsteq	r0, r8
    17fc:	00000de1 	andeq	r0, r0, r1, ror #27
    1800:	3d030680 	stccc	6, cr0, [r3, #-512]	; 0xfffffe00
    1804:	02000003 	andeq	r0, r0, #3
    1808:	05007091 	streq	r7, [r0, #-145]	; 0xffffff6f
    180c:	08000b5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, fp}
    1810:	00000050 	andeq	r0, r0, r0, asr r0
    1814:	000c6901 	andeq	r6, ip, r1, lsl #18
    1818:	05068300 	streq	r8, [r6, #-768]	; 0xfffffd00
    181c:	00000032 	andeq	r0, r0, r2, lsr r0
    1820:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1824:	0c500300 	mrrceq	3, 0, r0, r0, cr0	; <UNPREDICTABLE>
    1828:	06450000 	strbeq	r0, [r5], -r0
    182c:	00003e05 	andeq	r3, r0, r5, lsl #28
    1830:	00000000 	andeq	r0, r0, r0
    1834:	00010800 	andeq	r0, r1, r0, lsl #16
    1838:	909c0100 	addsls	r0, ip, r0, lsl #2
    183c:	02000009 	andeq	r0, r0, #9
    1840:	00000b77 	andeq	r0, r0, r7, ror fp
    1844:	a12a0645 			; <UNDEFINED> instruction: 0xa12a0645
    1848:	02000000 	andeq	r0, r0, #0
    184c:	8b026491 	blhi	9aa98 <_Min_Stack_Size+0x9a698>
    1850:	4500000a 	strmi	r0, [r0, #-10]
    1854:	00843706 	addeq	r3, r4, r6, lsl #14
    1858:	91020000 	mrsls	r0, (UNDEF: 2)
    185c:	0bdc0260 	bleq	ff7021e4 <_estack+0xdf6f21e4>
    1860:	06450000 	strbeq	r0, [r5], -r0
    1864:	00003249 	andeq	r3, r0, r9, asr #4
    1868:	5c910200 	lfmpl	f0, 4, [r1], {0}
    186c:	000d5302 	andeq	r5, sp, r2, lsl #6
    1870:	5e064500 	cfsh32pl	mvfx4, mvfx6, #0
    1874:	00000032 	andeq	r0, r0, r2, lsr r0
    1878:	01589102 	cmpeq	r8, r2, lsl #2
    187c:	00000b58 	andeq	r0, r0, r8, asr fp
    1880:	3e070646 	cfmadd32cc	mvax2, mvfx0, mvfx7, mvfx6
    1884:	02000000 	andeq	r0, r0, #0
    1888:	0f017491 	svceq	0x00017491
    188c:	4700000b 	strmi	r0, [r0, -fp]
    1890:	033d1b06 	teqeq	sp, #6144	; 0x1800
    1894:	91020000 	mrsls	r0, (UNDEF: 2)
    1898:	00000768 	andeq	r0, r0, r8, ror #14
    189c:	00120000 	andseq	r0, r2, r0
    18a0:	09760000 	ldmdbeq	r6!, {}^	; <UNPREDICTABLE>
    18a4:	e1010000 	mrs	r0, (UNDEF: 1)
    18a8:	4900000d 	stmdbmi	r0, {r0, r2, r3}
    18ac:	033d0306 	teqeq	sp, #402653184	; 0x18000000
    18b0:	91020000 	mrsls	r0, (UNDEF: 2)
    18b4:	00050070 	andeq	r0, r5, r0, ror r0
    18b8:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    18bc:	01000000 	mrseq	r0, (UNDEF: 0)
    18c0:	00000c69 	andeq	r0, r0, r9, ror #24
    18c4:	3203064a 	andcc	r0, r3, #77594624	; 0x4a00000
    18c8:	02000000 	andeq	r0, r0, #0
    18cc:	00006c91 	muleq	r0, r1, ip
    18d0:	000c0603 	andeq	r0, ip, r3, lsl #12
    18d4:	05061500 	streq	r1, [r6, #-1280]	; 0xfffffb00
    18d8:	0000003e 	andeq	r0, r0, lr, lsr r0
    18dc:	00000000 	andeq	r0, r0, r0
    18e0:	00000104 	andeq	r0, r0, r4, lsl #2
    18e4:	0a3b9c01 	beq	ee88f0 <_Min_Stack_Size+0xee84f0>
    18e8:	77020000 	strvc	r0, [r2, -r0]
    18ec:	1500000b 	strne	r0, [r0, #-11]
    18f0:	00a12c06 	adceq	r2, r1, r6, lsl #24
    18f4:	91020000 	mrsls	r0, (UNDEF: 2)
    18f8:	0a8b0264 	beq	fe2c2290 <_estack+0xde2b2290>
    18fc:	06150000 	ldreq	r0, [r5], -r0
    1900:	00008439 	andeq	r8, r0, r9, lsr r4
    1904:	60910200 	addsvs	r0, r1, r0, lsl #4
    1908:	000bdc02 	andeq	sp, fp, r2, lsl #24
    190c:	4b061500 	blmi	186d14 <_Min_Stack_Size+0x186914>
    1910:	00000032 	andeq	r0, r0, r2, lsr r0
    1914:	025c9102 	subseq	r9, ip, #-2147483648	; 0x80000000
    1918:	00000d53 	andeq	r0, r0, r3, asr sp
    191c:	32600615 	rsbcc	r0, r0, #22020096	; 0x1500000
    1920:	02000000 	andeq	r0, r0, #0
    1924:	58015891 	stmdapl	r1, {r0, r4, r7, fp, ip, lr}
    1928:	1600000b 	strne	r0, [r0], -fp
    192c:	003e0706 	eorseq	r0, lr, r6, lsl #14
    1930:	91020000 	mrsls	r0, (UNDEF: 2)
    1934:	0b0f0174 	bleq	3c1f0c <_Min_Stack_Size+0x3c1b0c>
    1938:	06170000 	ldreq	r0, [r7], -r0
    193c:	00033d1b 	andeq	r3, r3, fp, lsl sp
    1940:	68910200 	ldmvs	r1, {r9}
    1944:	00000007 	andeq	r0, r0, r7
    1948:	00001200 	andeq	r1, r0, r0, lsl #4
    194c:	000a2100 	andeq	r2, sl, r0, lsl #2
    1950:	0de10100 	stfeqe	f0, [r1]
    1954:	06190000 	ldreq	r0, [r9], -r0
    1958:	00033d03 	andeq	r3, r3, r3, lsl #26
    195c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1960:	00000500 	andeq	r0, r0, r0, lsl #10
    1964:	00d40000 	sbcseq	r0, r4, r0
    1968:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    196c:	1a00000c 	bne	19a4 <_Min_Stack_Size+0x15a4>
    1970:	00320306 	eorseq	r0, r2, r6, lsl #6
    1974:	91020000 	mrsls	r0, (UNDEF: 2)
    1978:	0f00006c 	svceq	0x0000006c
    197c:	00000914 	andeq	r0, r0, r4, lsl r9
    1980:	003205f9 	ldrshteq	r0, [r2], -r9
    1984:	00000000 	andeq	r0, r0, r0
    1988:	00380000 	eorseq	r0, r8, r0
    198c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1990:	00000a80 	andeq	r0, r0, r0, lsl #21
    1994:	000b5802 	andeq	r5, fp, r2, lsl #16
    1998:	2805f900 	stmdacs	r5, {r8, fp, ip, sp, lr, pc}
    199c:	00000032 	andeq	r0, r0, r2, lsr r0
    19a0:	016c9102 	cmneq	ip, r2, lsl #2
    19a4:	00000bc6 	andeq	r0, r0, r6, asr #23
    19a8:	7b1905fa 	blvc	643198 <_Min_Stack_Size+0x642d98>
    19ac:	02000003 	andeq	r0, r0, #3
    19b0:	76047491 			; <UNDEFINED> instruction: 0x76047491
    19b4:	1b05fb00 	blne	1805bc <_Min_Stack_Size+0x1801bc>
    19b8:	00000032 	andeq	r0, r0, r2, lsr r0
    19bc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    19c0:	000b640f 	andeq	r6, fp, pc, lsl #8
    19c4:	3205e400 	andcc	lr, r5, #0, 8
    19c8:	00000000 	andeq	r0, r0, r0
    19cc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    19d0:	01000000 	mrseq	r0, (UNDEF: 0)
    19d4:	000ac59c 	muleq	sl, ip, r5
    19d8:	0b580200 	bleq	16021e0 <_Min_Stack_Size+0x1601de0>
    19dc:	05e40000 	strbeq	r0, [r4, #0]!
    19e0:	00003226 	andeq	r3, r0, r6, lsr #4
    19e4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    19e8:	000bc601 	andeq	ip, fp, r1, lsl #12
    19ec:	1b05e500 	blne	17adf4 <_Min_Stack_Size+0x17a9f4>
    19f0:	00000ac5 	andeq	r0, r0, r5, asr #21
    19f4:	04749102 	ldrbteq	r9, [r4], #-258	; 0xfffffefe
    19f8:	05e60076 	strbeq	r0, [r6, #118]!	; 0x76
    19fc:	0000321b 	andeq	r3, r0, fp, lsl r2
    1a00:	70910200 	addsvc	r0, r1, r0, lsl #4
    1a04:	016a0900 	cmneq	sl, r0, lsl #18
    1a08:	0c030000 	stceq	0, cr0, [r3], {-0}
    1a0c:	c800000e 	stmdagt	r0, {r1, r2, r3}
    1a10:	003e0505 	eorseq	r0, lr, r5, lsl #10
    1a14:	00000000 	andeq	r0, r0, r0
    1a18:	00480000 	subeq	r0, r8, r0
    1a1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a20:	00000b29 	andeq	r0, r0, r9, lsr #22
    1a24:	000bc601 	andeq	ip, fp, r1, lsl #12
    1a28:	1b05c900 	blne	173e30 <_Min_Stack_Size+0x173a30>
    1a2c:	00000ac5 	andeq	r0, r0, r5, asr #21
    1a30:	016c9102 	cmneq	ip, r2, lsl #2
    1a34:	00000ae1 	andeq	r0, r0, r1, ror #21
    1a38:	320c05ca 	andcc	r0, ip, #847249408	; 0x32800000
    1a3c:	02000000 	andeq	r0, r0, #0
    1a40:	72046891 	andvc	r6, r4, #9502720	; 0x910000
    1a44:	0705cb00 	streq	ip, [r5, -r0, lsl #22]
    1a48:	0000003e 	andeq	r0, r0, lr, lsr r0
    1a4c:	05749102 	ldrbeq	r9, [r4, #-258]!	; 0xfffffefe
    1a50:	00000000 	andeq	r0, r0, r0
    1a54:	00000012 	andeq	r0, r0, r2, lsl r0
    1a58:	000de101 	andeq	lr, sp, r1, lsl #2
    1a5c:	0305cd00 	movweq	ip, #23808	; 0x5d00
    1a60:	0000033d 	andeq	r0, r0, sp, lsr r3
    1a64:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1a68:	0df20300 	ldcleq	3, cr0, [r2]
    1a6c:	05b10000 	ldreq	r0, [r1, #0]!
    1a70:	00003e05 	andeq	r3, r0, r5, lsl #28
    1a74:	00000000 	andeq	r0, r0, r0
    1a78:	00001c00 	andeq	r1, r0, r0, lsl #24
    1a7c:	519c0100 	orrspl	r0, ip, r0, lsl #2
    1a80:	0400000b 	streq	r0, [r0], #-11
    1a84:	05b20072 	ldreq	r0, [r2, #114]!	; 0x72
    1a88:	00003e07 	andeq	r3, r0, r7, lsl #28
    1a8c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a90:	0ac90300 	beq	ff242698 <_estack+0xdf232698>
    1a94:	05950000 	ldreq	r0, [r5]
    1a98:	00003e05 	andeq	r3, r0, r5, lsl #28
    1a9c:	00000000 	andeq	r0, r0, r0
    1aa0:	00003200 	andeq	r3, r0, r0, lsl #4
    1aa4:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    1aa8:	0400000b 	streq	r0, [r0], #-11
    1aac:	05960063 	ldreq	r0, [r6, #99]	; 0x63
    1ab0:	00009008 	andeq	r9, r0, r8
    1ab4:	73910200 	orrsvc	r0, r1, #0, 4
    1ab8:	97007204 	strls	r7, [r0, -r4, lsl #4]
    1abc:	003e0705 	eorseq	r0, lr, r5, lsl #14
    1ac0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ac4:	a6030074 			; <UNDEFINED> instruction: 0xa6030074
    1ac8:	56000009 	strpl	r0, [r0], -r9
    1acc:	00320a05 	eorseq	r0, r2, r5, lsl #20
    1ad0:	00000000 	andeq	r0, r0, r0
    1ad4:	00ac0000 	adceq	r0, ip, r0
    1ad8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1adc:	00000c2f 	andeq	r0, r0, pc, lsr #24
    1ae0:	000b5802 	andeq	r5, fp, r2, lsl #16
    1ae4:	26055600 	strcs	r5, [r5], -r0, lsl #12
    1ae8:	00000032 	andeq	r0, r0, r2, lsr r0
    1aec:	0e5c9102 	logeqe	f1, f2
    1af0:	05560063 	ldrbeq	r0, [r6, #-99]	; 0xffffff9d
    1af4:	00009038 	andeq	r9, r0, r8, lsr r0
    1af8:	5b910200 	blpl	fe442300 <_estack+0xde432300>
    1afc:	000bc601 	andeq	ip, fp, r1, lsl #12
    1b00:	19055700 	stmdbne	r5, {r8, r9, sl, ip, lr}
    1b04:	0000037b 	andeq	r0, r0, fp, ror r3
    1b08:	01649102 	cmneq	r4, r2, lsl #2
    1b0c:	00000dec 	andeq	r0, r0, ip, ror #27
    1b10:	32190558 	andscc	r0, r9, #88, 10	; 0x16000000
    1b14:	02000000 	andeq	r0, r0, #0
    1b18:	05017491 	streq	r7, [r1, #-1169]	; 0xfffffb6f
    1b1c:	5900000e 	stmdbpl	r0, {r1, r2, r3}
    1b20:	00321905 	eorseq	r1, r2, r5, lsl #18
    1b24:	91020000 	mrsls	r0, (UNDEF: 2)
    1b28:	0a9f0170 	beq	fe7c20f0 <_estack+0xde7b20f0>
    1b2c:	055a0000 	ldrbeq	r0, [sl, #-0]
    1b30:	000c2f19 	andeq	r2, ip, r9, lsl pc
    1b34:	60910200 	addsvs	r0, r1, r0, lsl #4
    1b38:	00000007 	andeq	r0, r0, r7
    1b3c:	00001200 	andeq	r1, r0, r0, lsl #4
    1b40:	000c1500 	andeq	r1, ip, r0, lsl #10
    1b44:	0de10100 	stfeqe	f0, [r1]
    1b48:	055e0000 	ldrbeq	r0, [lr, #-0]
    1b4c:	00033d03 	andeq	r3, r3, r3, lsl #26
    1b50:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1b54:	00000500 	andeq	r0, r0, r0, lsl #10
    1b58:	00800000 	addeq	r0, r0, r0
    1b5c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1b60:	5f00000c 	svcpl	0x0000000c
    1b64:	00320305 	eorseq	r0, r2, r5, lsl #6
    1b68:	91020000 	mrsls	r0, (UNDEF: 2)
    1b6c:	09000068 	stmdbeq	r0, {r3, r5, r6}
    1b70:	0000009c 	muleq	r0, ip, r0
    1b74:	000a0d03 	andeq	r0, sl, r3, lsl #26
    1b78:	0a051b00 	beq	148780 <_Min_Stack_Size+0x148380>
    1b7c:	00000032 	andeq	r0, r0, r2, lsr r0
    1b80:	00000000 	andeq	r0, r0, r0
    1b84:	00000098 	muleq	r0, r8, r0
    1b88:	0cdd9c01 	ldcleq	12, cr9, [sp], {1}
    1b8c:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    1b90:	1b00000b 	blne	1bc4 <_Min_Stack_Size+0x17c4>
    1b94:	00322a05 	eorseq	r2, r2, r5, lsl #20
    1b98:	91020000 	mrsls	r0, (UNDEF: 2)
    1b9c:	00630e5c 	rsbeq	r0, r3, ip, asr lr
    1ba0:	903c051b 	eorsls	r0, ip, fp, lsl r5
    1ba4:	02000000 	andeq	r0, r0, #0
    1ba8:	c6015b91 			; <UNDEFINED> instruction: 0xc6015b91
    1bac:	1c00000b 	stcne	0, cr0, [r0], {11}
    1bb0:	037b1905 	cmneq	fp, #81920	; 0x14000
    1bb4:	91020000 	mrsls	r0, (UNDEF: 2)
    1bb8:	0dec0164 	stfeqe	f0, [ip, #400]!	; 0x190
    1bbc:	051d0000 	ldreq	r0, [sp, #-0]
    1bc0:	00003219 	andeq	r3, r0, r9, lsl r2
    1bc4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1bc8:	000e0501 	andeq	r0, lr, r1, lsl #10
    1bcc:	19051e00 	stmdbne	r5, {r9, sl, fp, ip}
    1bd0:	00000032 	andeq	r0, r0, r2, lsr r0
    1bd4:	01709102 	cmneq	r0, r2, lsl #2
    1bd8:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    1bdc:	2f19051f 	svccs	0x0019051f
    1be0:	0200000c 	andeq	r0, r0, #12
    1be4:	00076091 	muleq	r7, r1, r0
    1be8:	12000000 	andne	r0, r0, #0
    1bec:	c3000000 	movwgt	r0, #0
    1bf0:	0100000c 	tsteq	r0, ip
    1bf4:	00000de1 	andeq	r0, r0, r1, ror #27
    1bf8:	3d030523 	cfstr32cc	mvfx0, [r3, #-140]	; 0xffffff74
    1bfc:	02000003 	andeq	r0, r0, #3
    1c00:	05006c91 	streq	r6, [r0, #-3217]	; 0xfffff36f
    1c04:	00000000 	andeq	r0, r0, r0
    1c08:	0000006c 	andeq	r0, r0, ip, rrx
    1c0c:	000c6901 	andeq	r6, ip, r1, lsl #18
    1c10:	03052400 	movweq	r2, #21504	; 0x5400
    1c14:	00000032 	andeq	r0, r0, r2, lsr r0
    1c18:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1c1c:	0d5f0f00 	ldcleq	15, cr0, [pc, #-0]	; 1c24 <_Min_Stack_Size+0x1824>
    1c20:	04e90000 	strbteq	r0, [r9], #0
    1c24:	00000032 	andeq	r0, r0, r2, lsr r0
    1c28:	00000000 	andeq	r0, r0, r0
    1c2c:	00000078 	andeq	r0, r0, r8, ror r0
    1c30:	0d4f9c01 	stcleq	12, cr9, [pc, #-4]	; 1c34 <_Min_Stack_Size+0x1834>
    1c34:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    1c38:	e900000b 	stmdb	r0, {r0, r1, r3}
    1c3c:	00323004 	eorseq	r3, r2, r4
    1c40:	91020000 	mrsls	r0, (UNDEF: 2)
    1c44:	00630e64 	rsbeq	r0, r3, r4, ror #28
    1c48:	904204e9 	subls	r0, r2, r9, ror #9
    1c4c:	02000000 	andeq	r0, r0, #0
    1c50:	c6016391 			; <UNDEFINED> instruction: 0xc6016391
    1c54:	ea00000b 	b	1c88 <_Min_Stack_Size+0x1888>
    1c58:	037b1904 	cmneq	fp, #4, 18	; 0x10000
    1c5c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c60:	0dec016c 	stfeqe	f0, [ip, #432]!	; 0x1b0
    1c64:	04eb0000 	strbteq	r0, [fp], #0
    1c68:	00003219 	andeq	r3, r0, r9, lsl r2
    1c6c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1c70:	000e0501 	andeq	r0, lr, r1, lsl #10
    1c74:	1904ec00 	stmdbne	r4, {sl, fp, sp, lr, pc}
    1c78:	00000032 	andeq	r0, r0, r2, lsr r0
    1c7c:	01709102 	cmneq	r0, r2, lsl #2
    1c80:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    1c84:	2f1904ed 	svccs	0x001904ed
    1c88:	0200000c 	andeq	r0, r0, #12
    1c8c:	03006891 	movweq	r6, #2193	; 0x891
    1c90:	0000075c 	andeq	r0, r0, ip, asr r7
    1c94:	320a04cb 	andcc	r0, sl, #-889192448	; 0xcb000000
    1c98:	0c000000 	stceq	0, cr0, [r0], {-0}
    1c9c:	2608000b 	strcs	r0, [r8], -fp
    1ca0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ca4:	000d959c 	muleq	sp, ip, r5
    1ca8:	0b580200 	bleq	16024b0 <_Min_Stack_Size+0x16020b0>
    1cac:	04cb0000 	strbeq	r0, [fp], #0
    1cb0:	0000322a 	andeq	r3, r0, sl, lsr #4
    1cb4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1cb8:	cb00730e 	blgt	1e8f8 <_Min_Stack_Size+0x1e4f8>
    1cbc:	00a14304 	adceq	r4, r1, r4, lsl #6
    1cc0:	91020000 	mrsls	r0, (UNDEF: 2)
    1cc4:	654c0468 	strbvs	r0, [ip, #-1128]	; 0xfffffb98
    1cc8:	04cc006e 	strbeq	r0, [ip], #110	; 0x6e
    1ccc:	0000320c 	andeq	r3, r0, ip, lsl #4
    1cd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1cd4:	0be70300 	bleq	ff9c28dc <_estack+0xdf9b28dc>
    1cd8:	04ad0000 	strteq	r0, [sp], #0
    1cdc:	0000320a 	andeq	r3, r0, sl, lsl #4
    1ce0:	000ac000 	andeq	ip, sl, r0
    1ce4:	00004c08 	andeq	r4, r0, r8, lsl #24
    1ce8:	229c0100 	addscs	r0, ip, #0, 2
    1cec:	0200000e 	andeq	r0, r0, #14
    1cf0:	00000b58 	andeq	r0, r0, r8, asr fp
    1cf4:	322404ad 	eorcc	r0, r4, #-1392508928	; 0xad000000
    1cf8:	02000000 	andeq	r0, r0, #0
    1cfc:	8b026491 	blhi	9af48 <_Min_Stack_Size+0x9ab48>
    1d00:	ad00000a 	stcge	0, cr0, [r0, #-40]	; 0xffffffd8
    1d04:	00a63d04 	adceq	r3, r6, r4, lsl #26
    1d08:	91020000 	mrsls	r0, (UNDEF: 2)
    1d0c:	09420260 	stmdbeq	r2, {r5, r6, r9}^
    1d10:	04ad0000 	strteq	r0, [sp], #0
    1d14:	0000324f 	andeq	r3, r0, pc, asr #4
    1d18:	5c910200 	lfmpl	f0, 4, [r1], {0}
    1d1c:	000e0501 	andeq	r0, lr, r1, lsl #10
    1d20:	0c04ae00 	stceq	14, cr10, [r4], {-0}
    1d24:	00000032 	andeq	r0, r0, r2, lsr r0
    1d28:	076c9102 	strbeq	r9, [ip, -r2, lsl #2]!
    1d2c:	08000acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp}
    1d30:	00000012 	andeq	r0, r0, r2, lsl r0
    1d34:	00000e08 	andeq	r0, r0, r8, lsl #28
    1d38:	000de101 	andeq	lr, sp, r1, lsl #2
    1d3c:	0304b000 	movweq	fp, #16384	; 0x4000
    1d40:	0000033d 	andeq	r0, r0, sp, lsr r3
    1d44:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1d48:	000ade05 	andeq	sp, sl, r5, lsl #28
    1d4c:	00002008 	andeq	r2, r0, r8
    1d50:	0c690100 	stfeqe	f0, [r9], #-0
    1d54:	04b10000 	ldrteq	r0, [r1], #0
    1d58:	00003203 	andeq	r3, r0, r3, lsl #4
    1d5c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1d60:	26030000 	strcs	r0, [r3], -r0
    1d64:	9000000b 	andls	r0, r0, fp
    1d68:	00320a04 	eorseq	r0, r2, r4, lsl #20
    1d6c:	00000000 	andeq	r0, r0, r0
    1d70:	004c0000 	subeq	r0, ip, r0
    1d74:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d78:	00000eaf 	andeq	r0, r0, pc, lsr #29
    1d7c:	000b5802 	andeq	r5, fp, r2, lsl #16
    1d80:	2e049000 	cdpcs	0, 0, cr9, cr4, cr0, {0}
    1d84:	00000032 	andeq	r0, r0, r2, lsr r0
    1d88:	02649102 	rsbeq	r9, r4, #-2147483648	; 0x80000000
    1d8c:	00000a8b 	andeq	r0, r0, fp, lsl #21
    1d90:	a6470490 			; <UNDEFINED> instruction: 0xa6470490
    1d94:	02000000 	andeq	r0, r0, #0
    1d98:	42026091 	andmi	r6, r2, #145	; 0x91
    1d9c:	90000009 	andls	r0, r0, r9
    1da0:	00325904 	eorseq	r5, r2, r4, lsl #18
    1da4:	91020000 	mrsls	r0, (UNDEF: 2)
    1da8:	0e05015c 	mcreq	1, 0, r0, cr5, cr12, {2}
    1dac:	04910000 	ldreq	r0, [r1], #0
    1db0:	0000320c 	andeq	r3, r0, ip, lsl #4
    1db4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1db8:	00000007 	andeq	r0, r0, r7
    1dbc:	00001200 	andeq	r1, r0, r0, lsl #4
    1dc0:	000e9500 	andeq	r9, lr, r0, lsl #10
    1dc4:	0de10100 	stfeqe	f0, [r1]
    1dc8:	04930000 	ldreq	r0, [r3], #0
    1dcc:	00033d03 	andeq	r3, r3, r3, lsl #26
    1dd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1dd4:	00000500 	andeq	r0, r0, r0, lsl #10
    1dd8:	00200000 	eoreq	r0, r0, r0
    1ddc:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1de0:	9400000c 	strls	r0, [r0], #-12
    1de4:	00320304 	eorseq	r0, r2, r4, lsl #6
    1de8:	91020000 	mrsls	r0, (UNDEF: 2)
    1dec:	03000070 	movweq	r0, #112	; 0x70
    1df0:	00000cb4 			; <UNDEFINED> instruction: 0x00000cb4
    1df4:	320a0444 	andcc	r0, sl, #68, 8	; 0x44000000
    1df8:	20000000 	andcs	r0, r0, r0
    1dfc:	a008000a 	andge	r0, r8, sl
    1e00:	01000000 	mrseq	r0, (UNDEF: 0)
    1e04:	000f339c 	muleq	pc, ip, r3	; <UNPREDICTABLE>
    1e08:	0b580200 	bleq	1602610 <_Min_Stack_Size+0x1602210>
    1e0c:	04440000 	strbeq	r0, [r4], #-0
    1e10:	0000322a 	andeq	r3, r0, sl, lsr #4
    1e14:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1e18:	000a8b02 	andeq	r8, sl, r2, lsl #22
    1e1c:	43044400 	movwmi	r4, #17408	; 0x4400
    1e20:	000000a6 	andeq	r0, r0, r6, lsr #1
    1e24:	02609102 	rsbeq	r9, r0, #-2147483648	; 0x80000000
    1e28:	00000942 	andeq	r0, r0, r2, asr #18
    1e2c:	32550444 	subscc	r0, r5, #68, 8	; 0x44000000
    1e30:	02000000 	andeq	r0, r0, #0
    1e34:	05015c91 	streq	r5, [r1, #-3217]	; 0xfffff36f
    1e38:	4500000e 	strmi	r0, [r0, #-14]
    1e3c:	00321904 	eorseq	r1, r2, r4, lsl #18
    1e40:	91020000 	mrsls	r0, (UNDEF: 2)
    1e44:	0d590174 	ldfeqe	f0, [r9, #-464]	; 0xfffffe30
    1e48:	04460000 	strbeq	r0, [r6], #-0
    1e4c:	00003219 	andeq	r3, r0, r9, lsl r2
    1e50:	68910200 	ldmvs	r1, {r9}
    1e54:	000adb01 	andeq	sp, sl, r1, lsl #22
    1e58:	19044700 	stmdbne	r4, {r8, r9, sl, lr}
    1e5c:	000000a1 	andeq	r0, r0, r1, lsr #1
    1e60:	01709102 	cmneq	r0, r2, lsl #2
    1e64:	00000bc6 	andeq	r0, r0, r6, asr #23
    1e68:	7b190448 	blvc	642f90 <_Min_Stack_Size+0x642b90>
    1e6c:	02000003 	andeq	r0, r0, #3
    1e70:	03006c91 	movweq	r6, #3217	; 0xc91
    1e74:	00000960 	andeq	r0, r0, r0, ror #18
    1e78:	320a03f9 	andcc	r0, sl, #-469762045	; 0xe4000003
    1e7c:	00000000 	andeq	r0, r0, r0
    1e80:	a0000000 	andge	r0, r0, r0
    1e84:	01000000 	mrseq	r0, (UNDEF: 0)
    1e88:	000fb79c 	muleq	pc, ip, r7	; <UNPREDICTABLE>
    1e8c:	0b580200 	bleq	1602694 <_Min_Stack_Size+0x1602294>
    1e90:	03f90000 	mvnseq	r0, #0
    1e94:	00003234 	andeq	r3, r0, r4, lsr r2
    1e98:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1e9c:	000a8b02 	andeq	r8, sl, r2, lsl #22
    1ea0:	4d03f900 	vstrmi.16	s30, [r3, #-0]	; <UNPREDICTABLE>
    1ea4:	000000a6 	andeq	r0, r0, r6, lsr #1
    1ea8:	02609102 	rsbeq	r9, r0, #-2147483648	; 0x80000000
    1eac:	00000942 	andeq	r0, r0, r2, asr #18
    1eb0:	325f03f9 	subscc	r0, pc, #-469762045	; 0xe4000003
    1eb4:	02000000 	andeq	r0, r0, #0
    1eb8:	05015c91 	streq	r5, [r1, #-3217]	; 0xfffff36f
    1ebc:	fa00000e 	blx	1efc <_Min_Stack_Size+0x1afc>
    1ec0:	00321b03 	eorseq	r1, r2, r3, lsl #22
    1ec4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ec8:	0d590174 	ldfeqe	f0, [r9, #-464]	; 0xfffffe30
    1ecc:	03fb0000 	mvnseq	r0, #0
    1ed0:	0000321b 	andeq	r3, r0, fp, lsl r2
    1ed4:	68910200 	ldmvs	r1, {r9}
    1ed8:	000adb01 	andeq	sp, sl, r1, lsl #22
    1edc:	1b03fc00 	blne	100ee4 <_Min_Stack_Size+0x100ae4>
    1ee0:	000000a1 	andeq	r0, r0, r1, lsr #1
    1ee4:	01709102 	cmneq	r0, r2, lsl #2
    1ee8:	00000bc6 	andeq	r0, r0, r6, asr #23
    1eec:	7b1b03fd 	blvc	6c2ee8 <_Min_Stack_Size+0x6c2ae8>
    1ef0:	02000003 	andeq	r0, r0, #3
    1ef4:	20006c91 	mulcs	r0, r1, ip
    1ef8:	00000a63 	andeq	r0, r0, r3, ror #20
    1efc:	06033a01 	streq	r3, [r3], -r1, lsl #20
    1f00:	00000000 	andeq	r0, r0, r0
    1f04:	00000124 	andeq	r0, r0, r4, lsr #2
    1f08:	10389c01 	eorsne	r9, r8, r1, lsl #24
    1f0c:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    1f10:	3a00000b 	bcc	1f44 <_Min_Stack_Size+0x1b44>
    1f14:	00323303 	eorseq	r3, r2, r3, lsl #6
    1f18:	91020000 	mrsls	r0, (UNDEF: 2)
    1f1c:	0a8b0264 	beq	fe2c28b4 <_estack+0xde2b28b4>
    1f20:	033a0000 	teqeq	sl, #0
    1f24:	0000a64c 	andeq	sl, r0, ip, asr #12
    1f28:	60910200 	addsvs	r0, r1, r0, lsl #4
    1f2c:	00094202 	andeq	r4, r9, r2, lsl #4
    1f30:	5e033a00 	vmlapl.f32	s6, s6, s0
    1f34:	00000032 	andeq	r0, r0, r2, lsr r0
    1f38:	015c9102 	cmpeq	ip, r2, lsl #2
    1f3c:	00000adb 	ldrdeq	r0, [r0], -fp
    1f40:	a119033b 	tstge	r9, fp, lsr r3
    1f44:	02000000 	andeq	r0, r0, #0
    1f48:	c6017491 			; <UNDEFINED> instruction: 0xc6017491
    1f4c:	3c00000b 	stccc	0, cr0, [r0], {11}
    1f50:	037b1903 	cmneq	fp, #49152	; 0xc000
    1f54:	91020000 	mrsls	r0, (UNDEF: 2)
    1f58:	0d59016c 	ldfeqe	f0, [r9, #-432]	; 0xfffffe50
    1f5c:	033d0000 	teqeq	sp, #0
    1f60:	00003219 	andeq	r3, r0, r9, lsl r2
    1f64:	70910200 	addsvc	r0, r1, r0, lsl #4
    1f68:	000a9f01 	andeq	r9, sl, r1, lsl #30
    1f6c:	19033e00 	stmdbne	r3, {r9, sl, fp, ip, sp}
    1f70:	00000c2f 	andeq	r0, r0, pc, lsr #24
    1f74:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1f78:	000c9e03 	andeq	r9, ip, r3, lsl #28
    1f7c:	0a031300 	beq	c6b84 <_Min_Stack_Size+0xc6784>
    1f80:	00000032 	andeq	r0, r0, r2, lsr r0
    1f84:	00000000 	andeq	r0, r0, r0
    1f88:	00000036 	andeq	r0, r0, r6, lsr r0
    1f8c:	10a89c01 	adcne	r9, r8, r1, lsl #24
    1f90:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    1f94:	1300000b 	movwne	r0, #11
    1f98:	00322303 	eorseq	r2, r2, r3, lsl #6
    1f9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1fa0:	0a8b026c 	beq	fe2c2958 <_estack+0xde2b2958>
    1fa4:	03130000 	tsteq	r3, #0
    1fa8:	00008436 	andeq	r8, r0, r6, lsr r4
    1fac:	68910200 	ldmvs	r1, {r9}
    1fb0:	000bdc02 	andeq	sp, fp, r2, lsl #24
    1fb4:	48031300 	stmdami	r3, {r8, r9, ip}
    1fb8:	00000032 	andeq	r0, r0, r2, lsr r0
    1fbc:	01649102 	cmneq	r4, r2, lsl #2
    1fc0:	00000a24 	andeq	r0, r0, r4, lsr #20
    1fc4:	320c0314 	andcc	r0, ip, #20, 6	; 0x50000000
    1fc8:	02000000 	andeq	r0, r0, #0
    1fcc:	00057091 	muleq	r5, r1, r0
    1fd0:	20000000 	andcs	r0, r0, r0
    1fd4:	01000000 	mrseq	r0, (UNDEF: 0)
    1fd8:	00000c69 	andeq	r0, r0, r9, ror #24
    1fdc:	32030316 	andcc	r0, r3, #1476395008	; 0x58000000
    1fe0:	02000000 	andeq	r0, r0, #0
    1fe4:	00007491 	muleq	r0, r1, r4
    1fe8:	0009f503 	andeq	pc, r9, r3, lsl #10
    1fec:	0a02f300 	beq	bebf4 <_Min_Stack_Size+0xbe7f4>
    1ff0:	00000032 	andeq	r0, r0, r2, lsr r0
    1ff4:	00000000 	andeq	r0, r0, r0
    1ff8:	00000036 	andeq	r0, r0, r6, lsr r0
    1ffc:	11189c01 	tstne	r8, r1, lsl #24
    2000:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    2004:	f300000b 	vhadd.u8	d0, d0, d11
    2008:	00322b02 	eorseq	r2, r2, r2, lsl #22
    200c:	91020000 	mrsls	r0, (UNDEF: 2)
    2010:	0a8b026c 	beq	fe2c29c8 <_estack+0xde2b29c8>
    2014:	02f30000 	rscseq	r0, r3, #0
    2018:	0000843e 	andeq	r8, r0, lr, lsr r4
    201c:	68910200 	ldmvs	r1, {r9}
    2020:	000bdc02 	andeq	sp, fp, r2, lsl #24
    2024:	5002f300 	andpl	pc, r2, r0, lsl #6
    2028:	00000032 	andeq	r0, r0, r2, lsr r0
    202c:	01649102 	cmneq	r4, r2, lsl #2
    2030:	00000a24 	andeq	r0, r0, r4, lsr #20
    2034:	320c02f4 	andcc	r0, ip, #244, 4	; 0x4000000f
    2038:	02000000 	andeq	r0, r0, #0
    203c:	00057091 	muleq	r5, r1, r0
    2040:	20000000 	andcs	r0, r0, r0
    2044:	01000000 	mrseq	r0, (UNDEF: 0)
    2048:	00000c69 	andeq	r0, r0, r9, ror #24
    204c:	320302f6 	andcc	r0, r3, #1610612751	; 0x6000000f
    2050:	02000000 	andeq	r0, r0, #0
    2054:	00007491 	muleq	r0, r1, r4
    2058:	000aab03 	andeq	sl, sl, r3, lsl #22
    205c:	0a029200 	beq	a6864 <_Min_Stack_Size+0xa6464>
    2060:	00000032 	andeq	r0, r0, r2, lsr r0
    2064:	00000000 	andeq	r0, r0, r0
    2068:	0000010c 	andeq	r0, r0, ip, lsl #2
    206c:	11e29c01 	mvnne	r9, r1, lsl #24
    2070:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    2074:	9200000b 	andls	r0, r0, #11
    2078:	00322902 	eorseq	r2, r2, r2, lsl #18
    207c:	91020000 	mrsls	r0, (UNDEF: 2)
    2080:	0adb0254 	beq	ff6c29d8 <_estack+0xdf6b29d8>
    2084:	02920000 	addseq	r0, r2, #0
    2088:	0000843c 	andeq	r8, r0, ip, lsr r4
    208c:	50910200 	addspl	r0, r1, r0, lsl #4
    2090:	000bdc02 	andeq	sp, fp, r2, lsl #24
    2094:	4c029200 	sfmmi	f1, 1, [r2], {-0}
    2098:	00000032 	andeq	r0, r0, r2, lsr r0
    209c:	014c9102 	cmpeq	ip, r2, lsl #2
    20a0:	00000d9d 	muleq	r0, sp, sp
    20a4:	321b0293 	andscc	r0, fp, #805306377	; 0x30000009
    20a8:	02000000 	andeq	r0, r0, #0
    20ac:	24015c91 	strcs	r5, [r1], #-3217	; 0xfffff36f
    20b0:	9400000a 	strls	r0, [r0], #-10
    20b4:	00321b02 	eorseq	r1, r2, r2, lsl #22
    20b8:	91020000 	mrsls	r0, (UNDEF: 2)
    20bc:	0ae10174 	beq	ff842694 <_estack+0xdf832694>
    20c0:	02950000 	addseq	r0, r5, #0
    20c4:	0000321b 	andeq	r3, r0, fp, lsl r2
    20c8:	70910200 	addsvc	r0, r1, r0, lsl #4
    20cc:	000dec01 	andeq	lr, sp, r1, lsl #24
    20d0:	1b029600 	blne	a78d8 <_Min_Stack_Size+0xa74d8>
    20d4:	00000032 	andeq	r0, r0, r2, lsr r0
    20d8:	01609102 	cmneq	r0, r2, lsl #2
    20dc:	00000a8b 	andeq	r0, r0, fp, lsl #21
    20e0:	861b0297 			; <UNDEFINED> instruction: 0x861b0297
    20e4:	02000000 	andeq	r0, r0, #0
    20e8:	c6016c91 			; <UNDEFINED> instruction: 0xc6016c91
    20ec:	9800000b 	stmdals	r0, {r0, r1, r3}
    20f0:	0ac51b02 	beq	ff148d00 <_estack+0xdf138d00>
    20f4:	91020000 	mrsls	r0, (UNDEF: 2)
    20f8:	0ae70164 	beq	ff9c2690 <_estack+0xdf9b2690>
    20fc:	02990000 	addseq	r0, r9, #0
    2100:	000c2f1b 	andeq	r2, ip, fp, lsl pc
    2104:	58910200 	ldmpl	r1, {r9}
    2108:	00000005 	andeq	r0, r0, r5
    210c:	00001200 	andeq	r1, r0, r0, lsl #4
    2110:	0de10100 	stfeqe	f0, [r1]
    2114:	029b0000 	addseq	r0, fp, #0
    2118:	00033d03 	andeq	r3, r3, r3, lsl #26
    211c:	68910200 	ldmvs	r1, {r9}
    2120:	b9030000 	stmdblt	r3, {}	; <UNPREDICTABLE>
    2124:	36000009 	strcc	r0, [r0], -r9
    2128:	00320a02 	eorseq	r0, r2, r2, lsl #20
    212c:	00000000 	andeq	r0, r0, r0
    2130:	010c0000 	mrseq	r0, (UNDEF: 12)
    2134:	9c010000 	stcls	0, cr0, [r1], {-0}
    2138:	000012ac 	andeq	r1, r0, ip, lsr #5
    213c:	000b5802 	andeq	r5, fp, r2, lsl #16
    2140:	31023600 	tstcc	r2, r0, lsl #12
    2144:	00000032 	andeq	r0, r0, r2, lsr r0
    2148:	02549102 	subseq	r9, r4, #-2147483648	; 0x80000000
    214c:	00000adb 	ldrdeq	r0, [r0], -fp
    2150:	84440236 	strbhi	r0, [r4], #-566	; 0xfffffdca
    2154:	02000000 	andeq	r0, r0, #0
    2158:	dc025091 	stcle	0, cr5, [r2], {145}	; 0x91
    215c:	3600000b 	strcc	r0, [r0], -fp
    2160:	00325402 	eorseq	r5, r2, r2, lsl #8
    2164:	91020000 	mrsls	r0, (UNDEF: 2)
    2168:	0d9d014c 	ldfeqs	f0, [sp, #304]	; 0x130
    216c:	02370000 	eorseq	r0, r7, #0
    2170:	0000321b 	andeq	r3, r0, fp, lsl r2
    2174:	5c910200 	lfmpl	f0, 4, [r1], {0}
    2178:	000a2401 	andeq	r2, sl, r1, lsl #8
    217c:	1b023800 	blne	90184 <_Min_Stack_Size+0x8fd84>
    2180:	00000032 	andeq	r0, r0, r2, lsr r0
    2184:	01749102 	cmneq	r4, r2, lsl #2
    2188:	00000ae1 	andeq	r0, r0, r1, ror #21
    218c:	321b0239 	andscc	r0, fp, #-1879048189	; 0x90000003
    2190:	02000000 	andeq	r0, r0, #0
    2194:	ec017091 	stc	0, cr7, [r1], {145}	; 0x91
    2198:	3a00000d 	bcc	21d4 <_Min_Stack_Size+0x1dd4>
    219c:	00321b02 	eorseq	r1, r2, r2, lsl #22
    21a0:	91020000 	mrsls	r0, (UNDEF: 2)
    21a4:	0a8b0160 	beq	fe2c272c <_estack+0xde2b272c>
    21a8:	023b0000 	eorseq	r0, fp, #0
    21ac:	0000861b 	andeq	r8, r0, fp, lsl r6
    21b0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    21b4:	000bc601 	andeq	ip, fp, r1, lsl #12
    21b8:	1b023c00 	blne	911c0 <_Min_Stack_Size+0x90dc0>
    21bc:	0000037b 	andeq	r0, r0, fp, ror r3
    21c0:	01649102 	cmneq	r4, r2, lsl #2
    21c4:	00000ae7 	andeq	r0, r0, r7, ror #21
    21c8:	2f1b023d 	svccs	0x001b023d
    21cc:	0200000c 	andeq	r0, r0, #12
    21d0:	00055891 	muleq	r5, r1, r8
    21d4:	12000000 	andne	r0, r0, #0
    21d8:	01000000 	mrseq	r0, (UNDEF: 0)
    21dc:	00000de1 	andeq	r0, r0, r1, ror #27
    21e0:	3d03023f 	sfmcc	f0, 4, [r3, #-252]	; 0xffffff04
    21e4:	02000003 	andeq	r0, r0, #3
    21e8:	00006891 	muleq	r0, r1, r8
    21ec:	0009e121 	andeq	lr, r9, r1, lsr #2
    21f0:	02070100 	andeq	r0, r7, #0, 2
    21f4:	00003211 	andeq	r3, r0, r1, lsl r2
    21f8:	0009da00 	andeq	sp, r9, r0, lsl #20
    21fc:	00004608 	andeq	r4, r0, r8, lsl #12
    2200:	029c0100 	addseq	r0, ip, #0, 2
    2204:	02000013 	andeq	r0, r0, #19
    2208:	00000bc6 	andeq	r0, r0, r6, asr #23
    220c:	7b3b0207 	blvc	ec2a30 <_Min_Stack_Size+0xec2630>
    2210:	02000003 	andeq	r0, r0, #3
    2214:	e1016491 			; <UNDEFINED> instruction: 0xe1016491
    2218:	0800000a 	stmdaeq	r0, {r1, r3}
    221c:	00320c02 	eorseq	r0, r2, r2, lsl #24
    2220:	91020000 	mrsls	r0, (UNDEF: 2)
    2224:	0dec0170 	stfeqe	f0, [ip, #448]!	; 0x1c0
    2228:	02090000 	andeq	r0, r9, #0
    222c:	0000320c 	andeq	r3, r0, ip, lsl #4
    2230:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2234:	0a007204 	beq	1ea4c <_Min_Stack_Size+0x1e64c>
    2238:	00320c02 	eorseq	r0, r2, r2, lsl #24
    223c:	91020000 	mrsls	r0, (UNDEF: 2)
    2240:	c0130074 	andsgt	r0, r3, r4, ror r0
    2244:	f100000d 	cps	#13
    2248:	00000001 	andeq	r0, r0, r1
    224c:	00003400 	andeq	r3, r0, r0, lsl #8
    2250:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    2254:	02000013 	andeq	r0, r0, #19
    2258:	00000bc6 	andeq	r0, r0, r6, asr #23
    225c:	7b3701f1 	blvc	dc2a28 <_Min_Stack_Size+0xdc2628>
    2260:	02000003 	andeq	r0, r0, #3
    2264:	d6026c91 			; <UNDEFINED> instruction: 0xd6026c91
    2268:	f100000d 	cps	#13
    226c:	005a4c01 	subseq	r4, sl, r1, lsl #24
    2270:	91020000 	mrsls	r0, (UNDEF: 2)
    2274:	6361046b 	cmnvs	r1, #1795162112	; 0x6b000000
    2278:	1101f200 	mrsne	pc, R9_usr	; <UNPREDICTABLE>
    227c:	000004c2 	andeq	r0, r0, r2, asr #9
    2280:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2284:	00099813 	andeq	r9, r9, r3, lsl r8
    2288:	4a01ad00 	bmi	6d690 <_Min_Stack_Size+0x6d290>
    228c:	90080009 	andls	r0, r8, r9
    2290:	01000000 	mrseq	r0, (UNDEF: 0)
    2294:	0013c39c 	mulseq	r3, ip, r3
    2298:	0bc60200 	bleq	ff182aa0 <_estack+0xdf172aa0>
    229c:	01ad0000 			; <UNDEFINED> instruction: 0x01ad0000
    22a0:	00037b31 	andeq	r7, r3, r1, lsr fp
    22a4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    22a8:	000adb02 	andeq	sp, sl, r2, lsl #22
    22ac:	4401ad00 	strmi	sl, [r1], #-3328	; 0xfffff300
    22b0:	000000a1 	andeq	r0, r0, r1, lsr #1
    22b4:	02609102 	rsbeq	r9, r0, #-2147483648	; 0x80000000
    22b8:	00000942 	andeq	r0, r0, r2, asr #18
    22bc:	325401ad 	subscc	r0, r4, #1073741867	; 0x4000002b
    22c0:	02000000 	andeq	r0, r0, #0
    22c4:	a9015c91 	stmdbge	r1, {r0, r4, r7, sl, fp, ip, lr}
    22c8:	ae00000b 	cdpge	0, 0, cr0, cr0, cr11, {0}
    22cc:	00320c01 	eorseq	r0, r2, r1, lsl #24
    22d0:	91020000 	mrsls	r0, (UNDEF: 2)
    22d4:	0dec016c 	stfeqe	f0, [ip, #432]!	; 0x1b0
    22d8:	01af0000 			; <UNDEFINED> instruction: 0x01af0000
    22dc:	0000320c 	andeq	r3, r0, ip, lsl #4
    22e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    22e4:	6d655204 	sfmvs	f5, 2, [r5, #-16]!
    22e8:	0c01b000 	stceq	0, cr11, [r1], {-0}
    22ec:	00000032 	andeq	r0, r0, r2, lsr r0
    22f0:	01709102 	cmneq	r0, r2, lsl #2
    22f4:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    22f8:	2f1201b1 	svccs	0x001201b1
    22fc:	0200000c 	andeq	r0, r0, #12
    2300:	22006891 	andcs	r6, r0, #9502720	; 0x910000
    2304:	00000d29 	andeq	r0, r0, r9, lsr #26
    2308:	11016f01 	tstne	r1, r1, lsl #30
    230c:	00000032 	andeq	r0, r0, r2, lsr r0
    2310:	08000890 	stmdaeq	r0, {r4, r7, fp}
    2314:	000000ba 	strheq	r0, [r0], -sl
    2318:	14579c01 	ldrbne	r9, [r7], #-3073	; 0xfffff3ff
    231c:	c6020000 	strgt	r0, [r2], -r0
    2320:	6f00000b 	svcvs	0x0000000b
    2324:	037b3601 	cmneq	fp, #1048576	; 0x100000
    2328:	91020000 	mrsls	r0, (UNDEF: 2)
    232c:	0a8b025c 	beq	fe2c2ca4 <_estack+0xde2b2ca4>
    2330:	016f0000 	cmneq	pc, r0
    2334:	0000a149 	andeq	sl, r0, r9, asr #2
    2338:	58910200 	ldmpl	r1, {r9}
    233c:	00094202 	andeq	r4, r9, r2, lsl #4
    2340:	5b016f00 	blpl	5df48 <_Min_Stack_Size+0x5db48>
    2344:	00000032 	andeq	r0, r0, r2, lsr r0
    2348:	01549102 	cmpeq	r4, r2, lsl #2
    234c:	00000bcc 	andeq	r0, r0, ip, asr #23
    2350:	320c0170 	andcc	r0, ip, #112, 2
    2354:	02000000 	andeq	r0, r0, #0
    2358:	7d017491 	cfstrsvc	mvf7, [r1, #-580]	; 0xfffffdbc
    235c:	7100000b 	tstvc	r0, fp
    2360:	00320c01 	eorseq	r0, r2, r1, lsl #24
    2364:	91020000 	mrsls	r0, (UNDEF: 2)
    2368:	0ae10170 	beq	ff842930 <_estack+0xdf832930>
    236c:	01720000 	cmneq	r2, r0
    2370:	0000320c 	andeq	r3, r0, ip, lsl #4
    2374:	68910200 	ldmvs	r1, {r9}
    2378:	000dec01 	andeq	lr, sp, r1, lsl #24
    237c:	0c017300 	stceq	3, cr7, [r1], {-0}
    2380:	00000032 	andeq	r0, r0, r2, lsr r0
    2384:	016c9102 	cmneq	ip, r2, lsl #2
    2388:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    238c:	2f120174 	svccs	0x00120174
    2390:	0200000c 	andeq	r0, r0, #12
    2394:	13006491 	movwne	r6, #1169	; 0x491
    2398:	00000d21 	andeq	r0, r0, r1, lsr #26
    239c:	07dc0133 			; <UNDEFINED> instruction: 0x07dc0133
    23a0:	00b40800 	adcseq	r0, r4, r0, lsl #16
    23a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    23a8:	00001499 	muleq	r0, r9, r4
    23ac:	34007004 	strcc	r7, [r0], #-4
    23b0:	033d1b01 	teqeq	sp, #1024	; 0x400
    23b4:	91020000 	mrsls	r0, (UNDEF: 2)
    23b8:	0d7c0170 	ldfeqe	f0, [ip, #-448]!	; 0xfffffe40
    23bc:	01350000 	teqeq	r5, r0
    23c0:	0014a915 	andseq	sl, r4, r5, lsl r9
    23c4:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    23c8:	0408000c 	streq	r0, [r8], #-12
    23cc:	01360069 	teqeq	r6, r9, rrx
    23d0:	0000320c 	andeq	r3, r0, ip, lsl #4
    23d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    23d8:	00970a00 	addseq	r0, r7, r0, lsl #20
    23dc:	14a90000 	strtne	r0, [r9], #0
    23e0:	320c0000 	andcc	r0, ip, #0
    23e4:	10000000 	andne	r0, r0, r0
    23e8:	14991400 	ldrne	r1, [r9], #1024	; 0x400
    23ec:	Address 0x00000000000023ec is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
   0:	03000d01 	movweq	r0, #3329	; 0xd01
   4:	3b0b3a0e 	blcc	2ce844 <_Min_Stack_Size+0x2ce444>
   8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  INIT();
   c:	000b3813 	andeq	r3, fp, r3, lsl r8
  10:	00280200 	eoreq	r0, r8, r0, lsl #4
  14:	0b1c0e03 	bleq	703828 <_Min_Stack_Size+0x703428>
  18:	0d030000 	stceq	0, cr0, [r3, #-0]
  1c:	3a080300 	bcc	200c24 <_Min_Stack_Size+0x200824>
  if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
  20:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  24:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    FragLen = STRLEN(s);
  28:	0400000b 	streq	r0, [r0], #-11
  2c:	13490101 	movtne	r0, #37121	; 0x9101
    SEGGER_RTT_LOCK();
  30:	00001301 	andeq	r1, r0, r1, lsl #6
  34:	49002105 	stmdbmi	r0, {r0, r2, r8, sp}
  38:	000b2f13 	andeq	r2, fp, r3, lsl pc
  3c:	00240600 	eoreq	r0, r4, r0, lsl #12
    Avail = _GetAvailWriteSpace(pRing);
  40:	0b3e0b0b 	bleq	f82c74 <_Min_Stack_Size+0xf82874>
  44:	00000e03 	andeq	r0, r0, r3, lsl #28
    switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
  48:	49003507 	stmdbmi	r0, {r0, r1, r2, r8, sl, ip, sp}
  4c:	08000013 	stmdaeq	r0, {r0, r1, r4}
  50:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  54:	00000d1c 	andeq	r0, r0, ip, lsl sp
  58:	03000d09 	movweq	r0, #3337	; 0xd09
  5c:	01213a0e 			; <UNDEFINED> instruction: 0x01213a0e
      if (Avail < (FragLen + 4u)) {
  60:	2139053b 	teqcs	r9, fp, lsr r5
  64:	38134912 	ldmdacc	r3, {r1, r4, r8, fp, lr}
  68:	0a000005 	beq	84 <_Min_Heap_Size-0x17c>
        Status = 0;
  6c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
        _PostTerminalSwitch(pRing, TerminalId);
  70:	0b3b0b3a 	bleq	ec2d60 <_Min_Stack_Size+0xec2960>
  74:	13490b39 	movtne	r0, #39737	; 0x9b39
  78:	050b0000 	streq	r0, [fp, #-0]
        Status = (int)_WriteBlocking(pRing, s, FragLen);
  7c:	00134900 	andseq	r4, r3, r0, lsl #18
  80:	00260c00 	eoreq	r0, r6, r0, lsl #24
  84:	00001349 	andeq	r1, r0, r9, asr #6
        _PostTerminalSwitch(pRing, _ActiveTerminal);
  88:	0300160d 	movweq	r1, #1549	; 0x60d
  8c:	3b0b3a0e 	blcc	2ce8cc <_Min_Stack_Size+0x2ce4cc>
  90:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      break;
  94:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
      if (Avail < 4u) {
  98:	0b0b0113 	bleq	2c04ec <_Min_Stack_Size+0x2c00ec>
        Status = -1;
  9c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  a0:	01092139 	tsteq	r9, r9, lsr r1
        _PostTerminalSwitch(pRing, TerminalId);
  a4:	0f000013 	svceq	0x00000013
  a8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  ac:	213a0e03 	teqcs	sl, r3, lsl #28
        Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
  b0:	390b3b02 	stmdbcc	fp, {r1, r8, r9, fp, ip, sp}
  b4:	19270621 	stmdbne	r7!, {r0, r5, r9, sl}
  b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  bc:	197a1840 	ldmdbne	sl!, {r6, fp, ip}^
  c0:	05100000 	ldreq	r0, [r0, #-0]
  c4:	3a0e0300 	bcc	380ccc <_Min_Stack_Size+0x3808cc>
        _PostTerminalSwitch(pRing, _ActiveTerminal);
  c8:	053b0121 	ldreq	r0, [fp, #-289]!	; 0xfffffedf
  cc:	13490b39 	movtne	r0, #39737	; 0x9b39
  d0:	00001802 	andeq	r1, r0, r2, lsl #16
      break;
  d4:	03000d11 	movweq	r0, #3345	; 0xd11
      _PostTerminalSwitch(pRing, TerminalId);
  d8:	03213a08 			; <UNDEFINED> instruction: 0x03213a08
  dc:	21390b3b 	teqcs	r9, fp, lsr fp
      Status = (int)_WriteBlocking(pRing, s, FragLen);
  e0:	38134911 	ldmdacc	r3, {r0, r4, r8, fp, lr}
  e4:	1200000b 	andne	r0, r0, #11
  e8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  ec:	3b03213a 	blcc	c85dc <_Min_Stack_Size+0xc81dc>
      _PostTerminalSwitch(pRing, _ActiveTerminal);
  f0:	1121390b 			; <UNDEFINED> instruction: 0x1121390b
  f4:	0b381349 	bleq	e04e20 <_Min_Stack_Size+0xe04a20>
  f8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
      Status = -1;
  fc:	03193f01 	tsteq	r9, #1, 30
 100:	07213a0e 	streq	r3, [r1, -lr, lsl #20]!
    SEGGER_RTT_UNLOCK();
 104:	2139053b 	teqcs	r9, fp, lsr r5
 108:	4919270e 	ldmdbmi	r9, {r1, r2, r3, r8, r9, sl, sp}
    Status = -1;
 10c:	01193c13 	tsteq	r9, r3, lsl ip
 110:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
}
 114:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 118:	0e030b13 	vmoveq.32	d3[0], r0
 11c:	17550e1b 	smmlane	r5, fp, lr, r0
 120:	17100111 			; <UNDEFINED> instruction: 0x17100111
 124:	04150000 	ldreq	r0, [r5], #-0
 128:	0b0b3e01 	bleq	2cf934 <_Min_Stack_Size+0x2cf534>
 12c:	3a13490b 	bcc	4d2560 <_Min_Stack_Size+0x4d2160>
 130:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 134:	0013010b 	andseq	r0, r3, fp, lsl #2
 138:	00241600 	eoreq	r1, r4, r0, lsl #12
 13c:	0b3e0b0b 	bleq	f82d70 <_Min_Stack_Size+0xf82970>
 140:	00000803 	andeq	r0, r0, r3, lsl #16
 144:	0b011317 	bleq	44da8 <_Min_Stack_Size+0x449a8>
 148:	3b0b3a05 	blcc	2ce964 <_Min_Stack_Size+0x2ce564>
 14c:	010b3905 	tsteq	fp, r5, lsl #18
 150:	18000013 	stmdane	r0, {r0, r1, r4}
 154:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 158:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 15c:	13490b39 	movtne	r0, #39737	; 0x9b39
 160:	00000538 	andeq	r0, r0, r8, lsr r5
 164:	49002119 	stmdbmi	r0, {r0, r3, r4, r8, sp}
 168:	00052f13 	andeq	r2, r5, r3, lsl pc
 16c:	00341a00 	eorseq	r1, r4, r0, lsl #20
 170:	0b3a0e03 	bleq	e83984 <_Min_Stack_Size+0xe83584>
 174:	0b390b3b 	bleq	e42e68 <_Min_Stack_Size+0xe42a68>
 178:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 17c:	0000193c 	andeq	r1, r0, ip, lsr r9
 180:	0b01131b 	bleq	44df4 <_Min_Stack_Size+0x449f4>
 184:	3b0b3a0b 	blcc	2ce9b8 <_Min_Stack_Size+0x2ce5b8>
 188:	010b390b 	tsteq	fp, fp, lsl #18
 18c:	1c000013 	stcne	0, cr0, [r0], {19}
 190:	0b0b000f 	bleq	2c01d4 <_Min_Stack_Size+0x2bfdd4>
 194:	0f1d0000 	svceq	0x001d0000
 198:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 19c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 1a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1a4:	0b3b0b3a 	bleq	ec2e94 <_Min_Stack_Size+0xec2a94>
 1a8:	13490b39 	movtne	r0, #39737	; 0x9b39
 1ac:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 1b0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 1b4:	03193f00 	tsteq	r9, #0, 30
 1b8:	3b0b3a0e 	blcc	2ce9f8 <_Min_Stack_Size+0x2ce5f8>
 1bc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1c0:	00193c19 	andseq	r3, r9, r9, lsl ip
 1c4:	002e2000 	eoreq	r2, lr, r0
 1c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1cc:	0b3b0b3a 	bleq	ec2ebc <_Min_Stack_Size+0xec2abc>
 1d0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1d4:	01111349 	tsteq	r1, r9, asr #6
 1d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1dc:	0000197c 	andeq	r1, r0, ip, ror r9
 1e0:	3f012e21 	svccc	0x00012e21
 1e4:	3a0e0319 	bcc	380e50 <_Min_Stack_Size+0x380a50>
 1e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1ec:	1119270b 	tstne	r9, fp, lsl #14
 1f0:	40061201 	andmi	r1, r6, r1, lsl #4
 1f4:	01197a18 	tsteq	r9, r8, lsl sl
 1f8:	22000013 	andcs	r0, r0, #19
 1fc:	08030005 	stmdaeq	r3, {r0, r2}
 200:	0b3b0b3a 	bleq	ec2ef0 <_Min_Stack_Size+0xec2af0>
 204:	13490b39 	movtne	r0, #39737	; 0x9b39
 208:	00001802 	andeq	r1, r0, r2, lsl #16
 20c:	03003423 	movweq	r3, #1059	; 0x423
 210:	3b0b3a0e 	blcc	2cea50 <_Min_Stack_Size+0x2ce650>
 214:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 218:	00180213 	andseq	r0, r8, r3, lsl r2
 21c:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
 220:	0b3a0e03 	bleq	e83a34 <_Min_Stack_Size+0xe83634>
 224:	0b39053b 	bleq	e41718 <_Min_Stack_Size+0xe41318>
 228:	13491927 	movtne	r1, #39207	; 0x9927
 22c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 230:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
 234:	00001301 	andeq	r1, r0, r1, lsl #6
 238:	03012e25 	movweq	r2, #7717	; 0x1e25
 23c:	3b0b3a0e 	blcc	2cea7c <_Min_Stack_Size+0x2ce67c>
 240:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 244:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 248:	7a184006 	bvc	610268 <_Min_Stack_Size+0x60fe68>
 24c:	00000019 	andeq	r0, r0, r9, lsl r0
 250:	03000d01 	movweq	r0, #3329	; 0xd01
 254:	3b0b3a0e 	blcc	2cea94 <_Min_Stack_Size+0x2ce694>
 258:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 25c:	000b3813 	andeq	r3, fp, r3, lsl r8
 260:	00240200 	eoreq	r0, r4, r0, lsl #4
 264:	0b3e0b0b 	bleq	f82e98 <_Min_Stack_Size+0xf82a98>
 268:	00000e03 	andeq	r0, r0, r3, lsl #28
 26c:	03000d03 	movweq	r0, #3331	; 0xd03
 270:	3b0b3a08 	blcc	2cea98 <_Min_Stack_Size+0x2ce698>
 274:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 278:	000b3813 	andeq	r3, fp, r3, lsl r8
 27c:	01010400 	tsteq	r1, r0, lsl #8
 280:	13011349 	movwne	r1, #4937	; 0x1349
 284:	21050000 	mrscs	r0, (UNDEF: 5)
 288:	2f134900 	svccs	0x00134900
 28c:	0600000b 	streq	r0, [r0], -fp
 290:	13490026 	movtne	r0, #36902	; 0x9026
 294:	35070000 	strcc	r0, [r7, #-0]
 298:	00134900 	andseq	r4, r3, r0, lsl #18
 29c:	00160800 	andseq	r0, r6, r0, lsl #16
 2a0:	0b3a0e03 	bleq	e83ab4 <_Min_Stack_Size+0xe836b4>
 2a4:	0b390b3b 	bleq	e42f98 <_Min_Stack_Size+0xe42b98>
 2a8:	00001349 	andeq	r1, r0, r9, asr #6
 2ac:	03003409 	movweq	r3, #1033	; 0x409
 2b0:	01213a0e 			; <UNDEFINED> instruction: 0x01213a0e
 2b4:	01df213b 	bicseq	r2, pc, fp, lsr r1	; <UNPREDICTABLE>
 2b8:	13490b39 	movtne	r0, #39737	; 0x9b39
 2bc:	00001802 	andeq	r1, r0, r2, lsl #16
 2c0:	0300340a 	movweq	r3, #1034	; 0x40a
 2c4:	05213a0e 	streq	r3, [r1, #-2574]!	; 0xfffff5f2
 2c8:	0b390b3b 	bleq	e42fbc <_Min_Stack_Size+0xe42bbc>
 2cc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 2d0:	0000193c 	andeq	r1, r0, ip, lsr r9
 2d4:	4700340b 	strmi	r3, [r0, -fp, lsl #8]
 2d8:	01213a13 			; <UNDEFINED> instruction: 0x01213a13
 2dc:	0b390b3b 	bleq	e42fd0 <_Min_Stack_Size+0xe42bd0>
 2e0:	00001802 	andeq	r1, r0, r2, lsl #16
 2e4:	0b01130c 	bleq	44f1c <_Min_Stack_Size+0x44b1c>
 2e8:	3b0b3a0b 	blcc	2ceb1c <_Min_Stack_Size+0x2ce71c>
 2ec:	09213905 	stmdbeq	r1!, {r0, r2, r8, fp, ip, sp}
 2f0:	00001301 	andeq	r1, r0, r1, lsl #6
 2f4:	0300160d 	movweq	r1, #1549	; 0x60d
 2f8:	3b0b3a0e 	blcc	2ceb38 <_Min_Stack_Size+0x2ce738>
 2fc:	03213905 			; <UNDEFINED> instruction: 0x03213905
 300:	00001349 	andeq	r1, r0, r9, asr #6
 304:	2501110e 	strcs	r1, [r1, #-270]	; 0xfffffef2
 308:	030b130e 	movweq	r1, #45838	; 0xb30e
 30c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 310:	10011117 	andne	r1, r1, r7, lsl r1
 314:	0f000017 	svceq	0x00000017
 318:	0b0b0024 	bleq	2c03b0 <_Min_Stack_Size+0x2bffb0>
 31c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 320:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 324:	03193f01 	tsteq	r9, #1, 30
 328:	3b0b3a0e 	blcc	2ceb68 <_Min_Stack_Size+0x2ce768>
 32c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 330:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 334:	7a184006 	bvc	610354 <_Min_Stack_Size+0x60ff54>
 338:	00130119 	andseq	r0, r3, r9, lsl r1
 33c:	00341100 	eorseq	r1, r4, r0, lsl #2
 340:	0b3a0803 	bleq	e82354 <_Min_Stack_Size+0xe81f54>
 344:	0b390b3b 	bleq	e43038 <_Min_Stack_Size+0xe42c38>
 348:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 34c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 350:	03193f00 	tsteq	r9, #0, 30
 354:	3b0b3a0e 	blcc	2ceb94 <_Min_Stack_Size+0x2ce794>
 358:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 35c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 360:	7a184006 	bvc	610380 <_Min_Stack_Size+0x60ff80>
 364:	00000019 	andeq	r0, r0, r9, lsl r0
 368:	10001101 	andne	r1, r0, r1, lsl #2
 36c:	03065506 	movweq	r5, #25862	; 0x6506
 370:	250e1b0e 	strcs	r1, [lr, #-2830]	; 0xfffff4f2
 374:	0005130e 	andeq	r1, r5, lr, lsl #6
 378:	34010000 	strcc	r0, [r1], #-0
 37c:	3a0e0300 	bcc	380f84 <_Min_Stack_Size+0x380b84>
 380:	053b0121 	ldreq	r0, [fp, #-289]!	; 0xfffffedf
 384:	13490b39 	movtne	r0, #39737	; 0x9b39
 388:	00001802 	andeq	r1, r0, r2, lsl #16
 38c:	03000502 	movweq	r0, #1282	; 0x502
 390:	01213a0e 			; <UNDEFINED> instruction: 0x01213a0e
 394:	0b39053b 	bleq	e41888 <_Min_Stack_Size+0xe41488>
 398:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 39c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 3a0:	03193f01 	tsteq	r9, #1, 30
 3a4:	01213a0e 			; <UNDEFINED> instruction: 0x01213a0e
 3a8:	0b39053b 	bleq	e4189c <_Min_Stack_Size+0xe4149c>
 3ac:	13491927 	movtne	r1, #39207	; 0x9927
 3b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3b4:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
 3b8:	00001301 	andeq	r1, r0, r1, lsl #6
 3bc:	03003404 	movweq	r3, #1028	; 0x404
 3c0:	01213a08 			; <UNDEFINED> instruction: 0x01213a08
 3c4:	0b39053b 	bleq	e418b8 <_Min_Stack_Size+0xe414b8>
 3c8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3cc:	0b050000 	bleq	1403d4 <_Min_Stack_Size+0x13ffd4>
 3d0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 3d4:	06000006 	streq	r0, [r0], -r6
 3d8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 3dc:	3b02213a 	blcc	888cc <_Min_Stack_Size+0x884cc>
 3e0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 3e4:	000b3813 	andeq	r3, fp, r3, lsl r8
 3e8:	010b0700 	tsteq	fp, r0, lsl #14
 3ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3f0:	00001301 	andeq	r1, r0, r1, lsl #6
 3f4:	0b002408 	bleq	941c <_Min_Stack_Size+0x901c>
 3f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3fc:	0900000e 	stmdbeq	r0, {r1, r2, r3}
 400:	210b000f 	tstcs	fp, pc
 404:	00134904 	andseq	r4, r3, r4, lsl #18
 408:	01010a00 	tsteq	r1, r0, lsl #20
 40c:	13011349 	movwne	r1, #4937	; 0x1349
 410:	050b0000 	streq	r0, [fp, #-0]
 414:	00134900 	andseq	r4, r3, r0, lsl #18
 418:	00210c00 	eoreq	r0, r1, r0, lsl #24
 41c:	0b2f1349 	bleq	bc5148 <_Min_Stack_Size+0xbc4d48>
 420:	350d0000 	strcc	r0, [sp, #-0]
 424:	00134900 	andseq	r4, r3, r0, lsl #18
 428:	00050e00 	andeq	r0, r5, r0, lsl #28
 42c:	213a0803 	teqcs	sl, r3, lsl #16
 430:	39053b01 	stmdbcc	r5, {r0, r8, r9, fp, ip, sp}
 434:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 438:	0f000018 	svceq	0x00000018
 43c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 440:	213a0e03 	teqcs	sl, r3, lsl #28
 444:	39053b01 	stmdbcc	r5, {r0, r8, r9, fp, ip, sp}
 448:	19270a21 	stmdbne	r7!, {r0, r5, r9, fp}
 44c:	01111349 	tsteq	r1, r9, asr #6
 450:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 454:	1301197a 	movwne	r1, #6522	; 0x197a
 458:	13100000 	tstne	r0, #0
 45c:	3a0b0b01 	bcc	2c3068 <_Min_Stack_Size+0x2c2c68>
 460:	053b0221 	ldreq	r0, [fp, #-545]!	; 0xfffffddf
 464:	01092139 	tsteq	r9, r9, lsr r1
 468:	11000013 	tstne	r0, r3, lsl r0
 46c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 470:	3b02213a 	blcc	88960 <_Min_Stack_Size+0x88560>
 474:	03213905 			; <UNDEFINED> instruction: 0x03213905
 478:	00001349 	andeq	r1, r0, r9, asr #6
 47c:	3f012e12 	svccc	0x00012e12
 480:	3a0e0319 	bcc	3810ec <_Min_Stack_Size+0x380cec>
 484:	0b3b0421 	bleq	ec1510 <_Min_Stack_Size+0xec1110>
 488:	27092139 	smladxcs	r9, r9, r1, r2
 48c:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
 490:	00130119 	andseq	r0, r3, r9, lsl r1
 494:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 498:	213a0e03 	teqcs	sl, r3, lsl #28
 49c:	39053b01 	stmdbcc	r5, {r0, r8, r9, fp, ip, sp}
 4a0:	19270d21 	stmdbne	r7!, {r0, r5, r8, sl, fp}
 4a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4a8:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
 4ac:	00001301 	andeq	r1, r0, r1, lsl #6
 4b0:	49002614 	stmdbmi	r0, {r2, r4, r9, sl, sp}
 4b4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 4b8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 4bc:	0e030b13 	vmoveq.32	d3[0], r0
 4c0:	17550e1b 	smmlane	r5, fp, lr, r0
 4c4:	17100111 			; <UNDEFINED> instruction: 0x17100111
 4c8:	16160000 	ldrne	r0, [r6], -r0
 4cc:	3a0e0300 	bcc	3810d4 <_Min_Stack_Size+0x380cd4>
 4d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4d4:	0013490b 	andseq	r4, r3, fp, lsl #18
 4d8:	00241700 	eoreq	r1, r4, r0, lsl #14
 4dc:	0b3e0b0b 	bleq	f83110 <_Min_Stack_Size+0xf82d10>
 4e0:	00000803 	andeq	r0, r0, r3, lsl #16
 4e4:	0b000f18 	bleq	414c <_Min_Stack_Size+0x3d4c>
 4e8:	1900000b 	stmdbne	r0, {r0, r1, r3}
 4ec:	00000026 	andeq	r0, r0, r6, lsr #32
 4f0:	03000d1a 	movweq	r0, #3354	; 0xd1a
 4f4:	3b0b3a08 	blcc	2ced1c <_Min_Stack_Size+0x2ce91c>
 4f8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 4fc:	000b3813 	andeq	r3, fp, r3, lsl r8
 500:	00341b00 	eorseq	r1, r4, r0, lsl #22
 504:	0b3a0e03 	bleq	e83d18 <_Min_Stack_Size+0xe83918>
 508:	0b39053b 	bleq	e419fc <_Min_Stack_Size+0xe415fc>
 50c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 510:	0000193c 	andeq	r1, r0, ip, lsr r9
 514:	0300341c 	movweq	r3, #1052	; 0x41c
 518:	3b0b3a0e 	blcc	2ced58 <_Min_Stack_Size+0x2ce958>
 51c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 520:	00180213 	andseq	r0, r8, r3, lsl r2
 524:	00341d00 	eorseq	r1, r4, r0, lsl #26
 528:	0b3a1347 	bleq	e8524c <_Min_Stack_Size+0xe84e4c>
 52c:	0b39053b 	bleq	e41a20 <_Min_Stack_Size+0xe41620>
 530:	00001802 	andeq	r1, r0, r2, lsl #16
 534:	4900211e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sp}
 538:	00052f13 	andeq	r2, r5, r3, lsl pc
 53c:	002e1f00 	eoreq	r1, lr, r0, lsl #30
 540:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 544:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 548:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 54c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 550:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
 554:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 558:	03193f01 	tsteq	r9, #1, 30
 55c:	3b0b3a0e 	blcc	2ced9c <_Min_Stack_Size+0x2ce99c>
 560:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 564:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 568:	7c184006 	ldcvc	0, cr4, [r8], {6}
 56c:	00130119 	andseq	r0, r3, r9, lsl r1
 570:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
 574:	0b3a0e03 	bleq	e83d88 <_Min_Stack_Size+0xe83988>
 578:	0b39053b 	bleq	e41a6c <_Min_Stack_Size+0xe4166c>
 57c:	13491927 	movtne	r1, #39207	; 0x9927
 580:	06120111 			; <UNDEFINED> instruction: 0x06120111
 584:	197a1840 	ldmdbne	sl!, {r6, fp, ip}^
 588:	00001301 	andeq	r1, r0, r1, lsl #6
 58c:	03012e22 	movweq	r2, #7714	; 0x1e22
 590:	3b0b3a0e 	blcc	2cedd0 <_Min_Stack_Size+0x2ce9d0>
 594:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 598:	11134919 	tstne	r3, r9, lsl r9
 59c:	40061201 	andmi	r1, r6, r1, lsl #4
 5a0:	01197c18 	tsteq	r9, r8, lsl ip
 5a4:	00000013 	andeq	r0, r0, r3, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
   0:	0000004c 	andeq	r0, r0, ip, asr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
  INIT();
   c:	00000000 	andeq	r0, r0, r0
  10:	080003a8 	stmdaeq	r0, {r3, r5, r7, r8, r9}
  14:	00000054 	andeq	r0, r0, r4, asr r0
  18:	080003fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9}
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
  20:	08000440 	stmdaeq	r0, {r6, sl}
    pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  24:	00000030 	andeq	r0, r0, r0, lsr r0
    FragLen = STRLEN(s);
  28:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
  2c:	0000004c 	andeq	r0, r0, ip, asr #32
    SEGGER_RTT_LOCK();
  30:	080004bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl}
  34:	00000108 	andeq	r0, r0, r8, lsl #2
  38:	080005c4 	stmdaeq	r0, {r2, r6, r7, r8, sl}
  3c:	00000084 	andeq	r0, r0, r4, lsl #1
    Avail = _GetAvailWriteSpace(pRing);
  40:	08000648 	stmdaeq	r0, {r3, r6, r9, sl}
  44:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
    switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
  50:	00000024 	andeq	r0, r0, r4, lsr #32
  54:	09eb0002 	stmibeq	fp!, {r1}^
  58:	00040000 	andeq	r0, r4, r0
  5c:	00000000 	andeq	r0, r0, r0
      if (Avail < (FragLen + 4u)) {
  60:	08000664 	stmdaeq	r0, {r2, r5, r6, r9, sl}
  64:	00000024 	andeq	r0, r0, r4, lsr #32
  68:	08000688 	stmdaeq	r0, {r3, r7, r9, sl}
        Status = 0;
  6c:	00000100 	andeq	r0, r0, r0, lsl #2
	...
        _PostTerminalSwitch(pRing, TerminalId);
  78:	00000024 	andeq	r0, r0, r4, lsr #32
        Status = (int)_WriteBlocking(pRing, s, FragLen);
  7c:	0f1e0002 	svceq	0x001e0002
  80:	00040000 	andeq	r0, r4, r0
  84:	00000000 	andeq	r0, r0, r0
        _PostTerminalSwitch(pRing, _ActiveTerminal);
  88:	08000788 	stmdaeq	r0, {r3, r7, r8, r9, sl}
  8c:	00000050 	andeq	r0, r0, r0, asr r0
  90:	080007d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl}
      break;
  94:	00000002 	andeq	r0, r0, r2
	...
        Status = -1;
  a0:	00000134 	andeq	r0, r0, r4, lsr r1
        _PostTerminalSwitch(pRing, TerminalId);
  a4:	0f400002 	svceq	0x00400002
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
        Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
  b0:	080007dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl}
  b4:	000000b4 	strheq	r0, [r0], -r4
  b8:	08000890 	stmdaeq	r0, {r4, r7, fp}
  bc:	000000ba 	strheq	r0, [r0], -sl
  c0:	0800094a 	stmdaeq	r0, {r1, r3, r6, r8, fp}
  c4:	00000090 	muleq	r0, r0, r0
        _PostTerminalSwitch(pRing, _ActiveTerminal);
  c8:	00000000 	andeq	r0, r0, r0
  cc:	00000034 	andeq	r0, r0, r4, lsr r0
  d0:	080009da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp}
      break;
  d4:	00000046 	andeq	r0, r0, r6, asr #32
      _PostTerminalSwitch(pRing, TerminalId);
  d8:	00000000 	andeq	r0, r0, r0
  dc:	0000010c 	andeq	r0, r0, ip, lsl #2
      Status = (int)_WriteBlocking(pRing, s, FragLen);
  e0:	00000000 	andeq	r0, r0, r0
  e4:	0000010c 	andeq	r0, r0, ip, lsl #2
  e8:	00000000 	andeq	r0, r0, r0
  ec:	00000036 	andeq	r0, r0, r6, lsr r0
      _PostTerminalSwitch(pRing, _ActiveTerminal);
  f0:	00000000 	andeq	r0, r0, r0
  f4:	00000036 	andeq	r0, r0, r6, lsr r0
  f8:	00000000 	andeq	r0, r0, r0
      Status = -1;
  fc:	00000124 	andeq	r0, r0, r4, lsr #2
 100:	00000000 	andeq	r0, r0, r0
    SEGGER_RTT_UNLOCK();
 104:	000000a0 	andeq	r0, r0, r0, lsr #1
 108:	08000a20 	stmdaeq	r0, {r5, r9, fp}
    Status = -1;
 10c:	000000a0 	andeq	r0, r0, r0, lsr #1
 110:	00000000 	andeq	r0, r0, r0
}
 114:	0000004c 	andeq	r0, r0, ip, asr #32
 118:	08000ac0 	stmdaeq	r0, {r6, r7, r9, fp}
 11c:	0000004c 	andeq	r0, r0, ip, asr #32
 120:	08000b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp}
 124:	00000026 	andeq	r0, r0, r6, lsr #32
 128:	00000000 	andeq	r0, r0, r0
 12c:	00000078 	andeq	r0, r0, r8, ror r0
 130:	00000000 	andeq	r0, r0, r0
 134:	00000098 	muleq	r0, r8, r0
 138:	00000000 	andeq	r0, r0, r0
 13c:	000000ac 	andeq	r0, r0, ip, lsr #1
 140:	00000000 	andeq	r0, r0, r0
 144:	00000032 	andeq	r0, r0, r2, lsr r0
 148:	00000000 	andeq	r0, r0, r0
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	00000000 	andeq	r0, r0, r0
 154:	00000048 	andeq	r0, r0, r8, asr #32
 158:	00000000 	andeq	r0, r0, r0
 15c:	00000038 	andeq	r0, r0, r8, lsr r0
 160:	00000000 	andeq	r0, r0, r0
 164:	00000038 	andeq	r0, r0, r8, lsr r0
 168:	00000000 	andeq	r0, r0, r0
 16c:	00000104 	andeq	r0, r0, r4, lsl #2
 170:	00000000 	andeq	r0, r0, r0
 174:	00000108 	andeq	r0, r0, r8, lsl #2
 178:	08000b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp}
 17c:	00000094 	muleq	r0, r4, r0
 180:	00000000 	andeq	r0, r0, r0
 184:	00000098 	muleq	r0, r8, r0
 188:	00000000 	andeq	r0, r0, r0
 18c:	0000006c 	andeq	r0, r0, ip, rrx
 190:	00000000 	andeq	r0, r0, r0
 194:	0000006c 	andeq	r0, r0, ip, rrx
 198:	00000000 	andeq	r0, r0, r0
 19c:	0000006c 	andeq	r0, r0, ip, rrx
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	0000006c 	andeq	r0, r0, ip, rrx
 1a8:	00000000 	andeq	r0, r0, r0
 1ac:	0000000c 	andeq	r0, r0, ip
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	000000b8 	strheq	r0, [r0], -r8
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	00000128 	andeq	r0, r0, r8, lsr #2
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	00000030 	andeq	r0, r0, r0, lsr r0
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	00000074 	andeq	r0, r0, r4, ror r0
	...

Disassembly of section .debug_rnglists:

00000000 <.debug_rnglists>:
int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
   0:	00000035 	andeq	r0, r0, r5, lsr r0
   4:	00040005 	andeq	r0, r4, r5
   8:	00000000 	andeq	r0, r0, r0
  INIT();
   c:	0003a807 	andeq	sl, r3, r7, lsl #16
  10:	fc075408 	stc2	4, cr5, [r7], {8}
  14:	44080003 	strmi	r0, [r8], #-3
  18:	00044007 	andeq	r4, r4, r7
  1c:	70073008 	andvc	r3, r7, r8
  if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
  20:	4c080004 	stcmi	0, cr0, [r8], {4}
    pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  24:	0004bc07 	andeq	fp, r4, r7, lsl #24
    FragLen = STRLEN(s);
  28:	07028808 	streq	r8, [r2, -r8, lsl #16]
  2c:	080005c4 	stmdaeq	r0, {r2, r6, r7, r8, sl}
    SEGGER_RTT_LOCK();
  30:	48070184 	stmdami	r7, {r2, r7, r8}
  34:	1c080006 	stcne	0, cr0, [r8], {6}
  38:	00001600 	andeq	r1, r0, r0, lsl #12
  3c:	04000500 	streq	r0, [r0], #-1280	; 0xfffffb00
    Avail = _GetAvailWriteSpace(pRing);
  40:	00000000 	andeq	r0, r0, r0
  44:	06640700 	strbteq	r0, [r4], -r0, lsl #14
    switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
  48:	07240800 	streq	r0, [r4, -r0, lsl #16]!
  4c:	08000688 	stmdaeq	r0, {r3, r7, r9, sl}
  50:	f1000280 			; <UNDEFINED> instruction: 0xf1000280
  54:	05000000 	streq	r0, [r0, #-0]
  58:	00000400 	andeq	r0, r0, r0, lsl #8
  5c:	07000000 	streq	r0, [r0, -r0]
      if (Avail < (FragLen + 4u)) {
  60:	080007dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl}
  64:	900701b4 			; <UNDEFINED> instruction: 0x900701b4
  68:	ba080008 	blt	200090 <_Min_Stack_Size+0x1ffc90>
        Status = 0;
  6c:	094a0701 	stmdbeq	sl, {r0, r8, r9, sl}^
        _PostTerminalSwitch(pRing, TerminalId);
  70:	01900800 	orrseq	r0, r0, r0, lsl #16
  74:	00000007 	andeq	r0, r0, r7
  78:	da073400 	ble	1cd080 <_Min_Stack_Size+0x1ccc80>
        Status = (int)_WriteBlocking(pRing, s, FragLen);
  7c:	46080009 	strmi	r0, [r8], -r9
  80:	00000007 	andeq	r0, r0, r7
  84:	07028c00 	streq	r8, [r2, -r0, lsl #24]
        _PostTerminalSwitch(pRing, _ActiveTerminal);
  88:	00000000 	andeq	r0, r0, r0
  8c:	0007028c 	andeq	r0, r7, ip, lsl #5
  90:	36000000 	strcc	r0, [r0], -r0
      break;
  94:	00000007 	andeq	r0, r0, r7
      if (Avail < 4u) {
  98:	00073600 	andeq	r3, r7, r0, lsl #12
        Status = -1;
  9c:	a4000000 	strge	r0, [r0], #-0
  a0:	00000702 	andeq	r0, r0, r2, lsl #14
        _PostTerminalSwitch(pRing, TerminalId);
  a4:	01a00000 	moveq	r0, r0
  a8:	000a2007 	andeq	r2, sl, r7
  ac:	0701a008 	streq	sl, [r1, -r8]
        Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
  b0:	00000000 	andeq	r0, r0, r0
  b4:	0ac0074c 	beq	ff001dec <_estack+0xdeff1dec>
  b8:	074c0800 	strbeq	r0, [ip, -r0, lsl #16]
  bc:	08000b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp}
  c0:	00000726 	andeq	r0, r0, r6, lsr #14
  c4:	07780000 	ldrbeq	r0, [r8, -r0]!
        _PostTerminalSwitch(pRing, _ActiveTerminal);
  c8:	00000000 	andeq	r0, r0, r0
  cc:	00070198 	muleq	r7, r8, r1
  d0:	ac000000 	stcge	0, cr0, [r0], {-0}
      break;
  d4:	00000701 	andeq	r0, r0, r1, lsl #14
      _PostTerminalSwitch(pRing, TerminalId);
  d8:	07320000 	ldreq	r0, [r2, -r0]!
  dc:	00000000 	andeq	r0, r0, r0
      Status = (int)_WriteBlocking(pRing, s, FragLen);
  e0:	0000071c 	andeq	r0, r0, ip, lsl r7
  e4:	07480000 	strbeq	r0, [r8, -r0]
  e8:	00000000 	andeq	r0, r0, r0
  ec:	00000738 	andeq	r0, r0, r8, lsr r7
      _PostTerminalSwitch(pRing, _ActiveTerminal);
  f0:	07380000 	ldreq	r0, [r8, -r0]!
  f4:	00000000 	andeq	r0, r0, r0
  f8:	00070284 	andeq	r0, r7, r4, lsl #5
      Status = -1;
  fc:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
 100:	0b340702 	bleq	d01d10 <_Min_Stack_Size+0xd01910>
    SEGGER_RTT_UNLOCK();
 104:	01940800 	orrseq	r0, r4, r0, lsl #16
 108:	00000007 	andeq	r0, r0, r7
    Status = -1;
 10c:	07019800 	streq	r9, [r1, -r0, lsl #16]
 110:	00000000 	andeq	r0, r0, r0
}
 114:	0000076c 	andeq	r0, r0, ip, ror #14
 118:	076c0000 	strbeq	r0, [ip, -r0]!
 11c:	00000000 	andeq	r0, r0, r0
 120:	0000076c 	andeq	r0, r0, ip, ror #14
 124:	076c0000 	strbeq	r0, [ip, -r0]!
 128:	00000000 	andeq	r0, r0, r0
 12c:	0000070c 	andeq	r0, r0, ip, lsl #14
 130:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
 134:	00000007 	andeq	r0, r0, r7
 138:	0702a800 	streq	sl, [r2, -r0, lsl #16]
 13c:	00000000 	andeq	r0, r0, r0
 140:	00000730 	andeq	r0, r0, r0, lsr r7
 144:	00740000 	rsbseq	r0, r4, r0

Disassembly of section .debug_line:

00000000 <.debug_line>:
int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
       0:	000003a4 	andeq	r0, r0, r4, lsr #7
       4:	021a0003 	andseq	r0, sl, #3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
  INIT();
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
  if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
      20:	6d73692f 			; <UNDEFINED> instruction: 0x6d73692f
    pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
      24:	2f6c696f 	svccs	0x006c696f
    FragLen = STRLEN(s);
      28:	6a6f7270 	bvs	1bdc9f0 <_Min_Stack_Size+0x1bdc5f0>
      2c:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
    SEGGER_RTT_LOCK();
      30:	55434d2f 	strbpl	r4, [r3, #-3375]	; 0xfffff2d1
      34:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
      38:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
      3c:	575f3130 	smmlarpl	pc, r0, r1, r3	; <UNPREDICTABLE>
    Avail = _GetAvailWriteSpace(pRing);
      40:	74636165 	strbtvc	r6, [r3], #-357	; 0xfffffe9b
      44:	616c425f 	cmnvs	ip, pc, asr r2
    switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
      48:	69506b63 	ldmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
      4c:	722f6c6c 	eorvc	r6, pc, #108, 24	; 0x6c00
      50:	745f7474 	ldrbvc	r7, [pc], #-1140	; 58 <_Min_Heap_Size-0x1a8>
      54:	6c706d65 	ldclvs	13, cr6, [r0], #-404	; 0xfffffe6c
      58:	2f657461 	svccs	0x00657461
      5c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
      if (Avail < (FragLen + 4u)) {
      60:	2f737265 	svccs	0x00737265
      64:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
      68:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
        Status = 0;
      6c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
        _PostTerminalSwitch(pRing, TerminalId);
      70:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
      74:	2f656d6f 	svccs	0x00656d6f
      78:	6f6d7369 	svcvs	0x006d7369
        Status = (int)_WriteBlocking(pRing, s, FragLen);
      7c:	702f6c69 	eorvc	r6, pc, r9, ror #24
      80:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
      84:	2f737463 	svccs	0x00737463
        _PostTerminalSwitch(pRing, _ActiveTerminal);
      88:	2f55434d 	svccs	0x0055434d
      8c:	334d5453 	movtcc	r5, #54355	; 0xd453
      90:	30344632 	eorscc	r4, r4, r2, lsr r6
      break;
      94:	65575f31 	ldrbvs	r5, [r7, #-3889]	; 0xfffff0cf
      if (Avail < 4u) {
      98:	5f746361 	svcpl	0x00746361
        Status = -1;
      9c:	63616c42 	cmnvs	r1, #16896	; 0x4200
      a0:	6c69506b 	stclvs	0, cr5, [r9], #-428	; 0xfffffe54
        _PostTerminalSwitch(pRing, TerminalId);
      a4:	74722f6c 	ldrbtvc	r2, [r2], #-3948	; 0xfffff094
      a8:	65745f74 	ldrbvs	r5, [r4, #-3956]!	; 0xfffff08c
      ac:	616c706d 	cmnvs	ip, sp, rrx
        Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
      b0:	432f6574 			; <UNDEFINED> instruction: 0x432f6574
      b4:	2f65726f 	svccs	0x0065726f
      b8:	00637253 	rsbeq	r7, r3, r3, asr r2
      bc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 8 <_Min_Heap_Size-0x1f8>
      c0:	73692f65 	cmnvc	r9, #404	; 0x194
      c4:	6c696f6d 	stclvs	15, cr6, [r9], #-436	; 0xfffffe4c
        _PostTerminalSwitch(pRing, _ActiveTerminal);
      c8:	6f72702f 	svcvs	0x0072702f
      cc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
      d0:	434d2f73 	movtmi	r2, #57203	; 0xdf73
      break;
      d4:	54532f55 	ldrbpl	r2, [r3], #-3925	; 0xfffff0ab
      _PostTerminalSwitch(pRing, TerminalId);
      d8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      dc:	5f313034 	svcpl	0x00313034
      Status = (int)_WriteBlocking(pRing, s, FragLen);
      e0:	63616557 	cmnvs	r1, #364904448	; 0x15c00000
      e4:	6c425f74 	mcrrvs	15, 7, r5, r2, cr4
      e8:	506b6361 	rsbpl	r6, fp, r1, ror #6
      ec:	2f6c6c69 	svccs	0x006c6c69
      _PostTerminalSwitch(pRing, _ActiveTerminal);
      f0:	5f747472 	svcpl	0x00747472
      f4:	706d6574 	rsbvc	r6, sp, r4, ror r5
      f8:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
      Status = -1;
      fc:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
     100:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    SEGGER_RTT_UNLOCK();
     104:	534d432f 	movtpl	r4, #54063	; 0xd32f
     108:	442f5349 	strtmi	r5, [pc], #-841	; 110 <_Min_Heap_Size-0xf0>
    Status = -1;
     10c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     110:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xfffff09b
}
     114:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     118:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     11c:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
     120:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     124:	2f006564 	svccs	0x00006564
     128:	2f727375 	svccs	0x00727375
     12c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     130:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     134:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     138:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
     13c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     140:	616d2f65 	cmnvs	sp, r5, ror #30
     144:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     148:	752f0065 	strvc	r0, [pc, #-101]!	; eb <_Min_Heap_Size-0x115>
     14c:	612f7273 			; <UNDEFINED> instruction: 0x612f7273
     150:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     154:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     158:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     15c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     160:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     164:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
     168:	6f682f00 	svcvs	0x00682f00
     16c:	692f656d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	; <UNPREDICTABLE>
     170:	696f6d73 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     174:	72702f6c 	rsbsvc	r2, r0, #108, 30	; 0x1b0
     178:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
     17c:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; ffffffb4 <_estack+0xdffeffb4>
     180:	532f5543 			; <UNDEFINED> instruction: 0x532f5543
     184:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     188:	31303446 	teqcc	r0, r6, asr #8
     18c:	6165575f 	cmnvs	r5, pc, asr r7
     190:	425f7463 	subsmi	r7, pc, #1660944384	; 0x63000000
     194:	6b63616c 	blvs	18d874c <_Min_Stack_Size+0x18d834c>
     198:	6c6c6950 			; <UNDEFINED> instruction: 0x6c6c6950
     19c:	7474722f 	ldrbtvc	r7, [r4], #-559	; 0xfffffdd1
     1a0:	6d65745f 	cfstrdvs	mvd7, [r5, #-380]!	; 0xfffffe84
     1a4:	74616c70 	strbtvc	r6, [r1], #-3184	; 0xfffff390
     1a8:	54522f65 	ldrbpl	r2, [r2], #-3941	; 0xfffff09b
     1ac:	6e492f54 	mcrvs	15, 2, r2, cr9, cr4, {2}
     1b0:	63000063 	movwvs	r0, #99	; 0x63
     1b4:	5f65726f 	svcpl	0x0065726f
     1b8:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     1bc:	00010068 	andeq	r0, r1, r8, rrx
     1c0:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     1c4:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     1c8:	73000002 	movwvc	r0, #2
     1cc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     1d0:	31303466 	teqcc	r0, r6, ror #8
     1d4:	682e6378 	stmdavs	lr!, {r3, r4, r5, r6, r8, r9, sp, lr}
     1d8:	00000300 	andeq	r0, r0, r0, lsl #6
     1dc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     1e0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     1e4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     1e8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     1ec:	00000400 	andeq	r0, r0, r0, lsl #8
     1f0:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     1f4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     1f8:	00050068 	andeq	r0, r5, r8, rrx
     1fc:	73797300 	cmnvc	r9, #0, 6
     200:	5f6d6574 	svcpl	0x006d6574
     204:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     208:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     20c:	00682e78 	rsbeq	r2, r8, r8, ror lr
     210:	53000003 	movwpl	r0, #3
     214:	45474745 	strbmi	r4, [r7, #-1861]	; 0xfffff8bb
     218:	54525f52 	ldrbpl	r5, [r2], #-3922	; 0xfffff0ae
     21c:	00682e54 	rsbeq	r2, r8, r4, asr lr
     220:	00000006 	andeq	r0, r0, r6
     224:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     228:	0003a802 	andeq	sl, r3, r2, lsl #16
     22c:	0e980308 	cdpeq	3, 9, cr0, cr8, cr8, {0}
     230:	67060501 	strvs	r0, [r6, -r1, lsl #10]
     234:	054c3005 	strbeq	r3, [ip, #-5]
     238:	0f052e09 	svceq	0x00052e09
     23c:	2e300520 	cfabs64cs	mvdx0, mvdx0
     240:	052e2e05 	streq	r2, [lr, #-3589]!	; 0xfffff1fb
     244:	30054201 	andcc	r4, r5, r1, lsl #4
     248:	2e08051e 	mcrcs	5, 0, r0, cr8, cr14, {0}
     24c:	05202005 	streq	r2, [r0, #-5]!
     250:	30053c28 	andcc	r3, r5, r8, lsr #24
     254:	2e2e0520 	cfsh64cs	mvdx0, mvdx14, #16
     258:	02300105 	eorseq	r0, r0, #1073741825	; 0x40000001
     25c:	0101000a 	tsteq	r1, sl
     260:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     264:	0003fc02 	andeq	pc, r3, r2, lsl #24
     268:	0fe60308 	svceq	0x00e60308
     26c:	4b0e0501 	blmi	381678 <_Min_Stack_Size+0x381278>
     270:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     274:	0a053e0c 	beq	14faac <_Min_Stack_Size+0x14f6ac>
     278:	20140531 	andscs	r0, r4, r1, lsr r5
     27c:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
     280:	0a052103 	beq	148694 <_Min_Stack_Size+0x148294>
     284:	20120559 	andscs	r0, r2, r9, asr r5
     288:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff88b <_estack+0xdffef88b>
     28c:	0a052012 	beq	1482dc <_Min_Stack_Size+0x147edc>
     290:	21010531 	tstcs	r1, r1, lsr r5
     294:	01000702 	tsteq	r0, r2, lsl #14
     298:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
     29c:	02050021 	andeq	r0, r5, #33	; 0x21
     2a0:	08000440 	stmdaeq	r0, {r6, sl}
     2a4:	4b0e0519 	blmi	381710 <_Min_Stack_Size+0x381310>
     2a8:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
     2ac:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
     2b0:	1a052001 	bne	1482bc <_Min_Stack_Size+0x147ebc>
     2b4:	01040200 	mrseq	r0, R12_usr
     2b8:	3d01054a 	cfstr32cc	mvfx0, [r1, #-296]	; 0xfffffed8
     2bc:	01000902 	tsteq	r0, r2, lsl #18
     2c0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
     2c4:	02050015 	andeq	r0, r5, #21
     2c8:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
     2cc:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
     2d0:	05052f12 	streq	r2, [r5, #-3858]	; 0xfffff0ee
     2d4:	05836768 	streq	r6, [r3, #1896]	; 0x768
     2d8:	0a026801 	beq	9a2e4 <_Min_Stack_Size+0x99ee4>
     2dc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     2e0:	00190502 	andseq	r0, r9, r2, lsl #10
     2e4:	04bc0205 	ldrteq	r0, [ip], #517	; 0x205
     2e8:	15030800 	strne	r0, [r3, #-2048]	; 0xfffff800
     2ec:	30050501 	andcc	r0, r5, r1, lsl #10
     2f0:	830b0567 	movwhi	r0, #46439	; 0xb567
     2f4:	02000c05 	andeq	r0, r0, #1280	; 0x500
     2f8:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
     2fc:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
     300:	05054a01 	streq	r4, [r5, #-2561]	; 0xfffff5ff
     304:	83686730 	cmnhi	r8, #48, 14	; 0xc00000
     308:	68686868 	stmdavs	r8!, {r3, r5, r6, fp, sp, lr}^
     30c:	0a056884 	beq	15a524 <_Min_Stack_Size+0x15a124>
     310:	000c0567 	andeq	r0, ip, r7, ror #10
     314:	20010402 	andcs	r0, r1, r2, lsl #8
     318:	02000b05 	andeq	r0, r0, #5120	; 0x1400
     31c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     320:	0a053005 	beq	14c33c <_Min_Stack_Size+0x14bf3c>
     324:	000c0567 	andeq	r0, ip, r7, ror #10
     328:	20010402 	andcs	r0, r1, r2, lsl #8
     32c:	02000b05 	andeq	r0, r0, #5120	; 0x1400
     330:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     334:	0a053005 	beq	14c350 <_Min_Stack_Size+0x14bf50>
     338:	000b0584 	andeq	r0, fp, r4, lsl #11
     33c:	20010402 	andcs	r0, r1, r2, lsl #8
     340:	02002d05 	andeq	r2, r0, #320	; 0x140
     344:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     348:	0a023001 	beq	8c354 <_Min_Stack_Size+0x8bf54>
     34c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     350:	00100502 	andseq	r0, r0, r2, lsl #10
     354:	05c40205 	strbeq	r0, [r4, #517]	; 0x205
     358:	39030800 	stmdbcc	r3, {fp}
     35c:	3d050501 	cfstr32cc	mvfx0, [r5, #-4]
     360:	912f2f84 	smlawbls	pc, r4, pc, r2	; <UNPREDICTABLE>
     364:	02000905 	andeq	r0, r0, #81920	; 0x14000
     368:	00310104 	eorseq	r0, r1, r4, lsl #2
     36c:	67010402 	strvs	r0, [r1, -r2, lsl #8]
     370:	01040200 	mrseq	r0, R12_usr
     374:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
     378:	02004b01 	andeq	r4, r0, #1024	; 0x400
     37c:	00670104 	rsbeq	r0, r7, r4, lsl #2
     380:	4b010402 	blmi	41390 <_Min_Stack_Size+0x40f90>
     384:	01040200 	mrseq	r0, R12_usr
     388:	000c0245 	andeq	r0, ip, r5, asr #4
     38c:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
     390:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
     394:	00064802 	andeq	r4, r6, r2, lsl #16
     398:	00cd0308 	sbceq	r0, sp, r8, lsl #6
     39c:	2f090501 	svccs	0x00090501
     3a0:	02590105 	subseq	r0, r9, #1073741825	; 0x40000001
     3a4:	01010007 	tsteq	r1, r7
     3a8:	00000278 	andeq	r0, r0, r8, ror r2
     3ac:	01cd0003 	biceq	r0, sp, r3
     3b0:	01020000 	mrseq	r0, (UNDEF: 2)
     3b4:	000d0efb 	strdeq	r0, [sp], -fp
     3b8:	01010101 	tsteq	r1, r1, lsl #2
     3bc:	01000000 	mrseq	r0, (UNDEF: 0)
     3c0:	2f010000 	svccs	0x00010000
     3c4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     3c8:	6d73692f 			; <UNDEFINED> instruction: 0x6d73692f
     3cc:	2f6c696f 	svccs	0x006c696f
     3d0:	6a6f7270 	bvs	1bdcd98 <_Min_Stack_Size+0x1bdc998>
     3d4:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
     3d8:	55434d2f 	strbpl	r4, [r3, #-3375]	; 0xfffff2d1
     3dc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     3e0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     3e4:	575f3130 	smmlarpl	pc, r0, r1, r3	; <UNPREDICTABLE>
     3e8:	74636165 	strbtvc	r6, [r3], #-357	; 0xfffffe9b
     3ec:	616c425f 	cmnvs	ip, pc, asr r2
     3f0:	69506b63 	ldmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     3f4:	722f6c6c 	eorvc	r6, pc, #108, 24	; 0x6c00
     3f8:	745f7474 	ldrbvc	r7, [pc], #-1140	; 400 <_Min_Stack_Size>
     3fc:	6c706d65 	ldclvs	13, cr6, [r0], #-404	; 0xfffffe6c
     400:	2f657461 	svccs	0x00657461
     404:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
     408:	6372532f 	cmnvs	r2, #-1140850688	; 0xbc000000
     40c:	73752f00 	cmnvc	r5, #0, 30
     410:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
     414:	6f6e2d6d 	svcvs	0x006e2d6d
     418:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     41c:	2f696261 	svccs	0x00696261
     420:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     424:	2f656475 	svccs	0x00656475
     428:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     42c:	00656e69 	rsbeq	r6, r5, r9, ror #28
     430:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     434:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     438:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     43c:	61652d65 	cmnvs	r5, r5, ror #26
     440:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     444:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     448:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
     44c:	2f007379 	svccs	0x00007379
     450:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     454:	6d73692f 			; <UNDEFINED> instruction: 0x6d73692f
     458:	2f6c696f 	svccs	0x006c696f
     45c:	6a6f7270 	bvs	1bdce24 <_Min_Stack_Size+0x1bdca24>
     460:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
     464:	55434d2f 	strbpl	r4, [r3, #-3375]	; 0xfffff2d1
     468:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     46c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     470:	575f3130 	smmlarpl	pc, r0, r1, r3	; <UNPREDICTABLE>
     474:	74636165 	strbtvc	r6, [r3], #-357	; 0xfffffe9b
     478:	616c425f 	cmnvs	ip, pc, asr r2
     47c:	69506b63 	ldmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     480:	722f6c6c 	eorvc	r6, pc, #108, 24	; 0x6c00
     484:	745f7474 	ldrbvc	r7, [pc], #-1140	; 48c <_Min_Stack_Size+0x8c>
     488:	6c706d65 	ldclvs	13, cr6, [r0], #-404	; 0xfffffe6c
     48c:	2f657461 	svccs	0x00657461
     490:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     494:	2f737265 	svccs	0x00737265
     498:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     49c:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     4a0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     4a4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     4a8:	2f656d6f 	svccs	0x00656d6f
     4ac:	6f6d7369 	svcvs	0x006d7369
     4b0:	702f6c69 	eorvc	r6, pc, r9, ror #24
     4b4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     4b8:	2f737463 	svccs	0x00737463
     4bc:	2f55434d 	svccs	0x0055434d
     4c0:	334d5453 	movtcc	r5, #54355	; 0xd453
     4c4:	30344632 	eorscc	r4, r4, r2, lsr r6
     4c8:	65575f31 	ldrbvs	r5, [r7, #-3889]	; 0xfffff0cf
     4cc:	5f746361 	svcpl	0x00746361
     4d0:	63616c42 	cmnvs	r1, #16896	; 0x4200
     4d4:	6c69506b 	stclvs	0, cr5, [r9], #-428	; 0xfffffe54
     4d8:	74722f6c 	ldrbtvc	r2, [r2], #-3948	; 0xfffff094
     4dc:	65745f74 	ldrbvs	r5, [r4, #-3956]!	; 0xfffff08c
     4e0:	616c706d 	cmnvs	ip, sp, rrx
     4e4:	442f6574 	strtmi	r6, [pc], #-1396	; 4ec <_Min_Stack_Size+0xec>
     4e8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     4ec:	432f7372 			; <UNDEFINED> instruction: 0x432f7372
     4f0:	5349534d 	movtpl	r5, #37709	; 0x934d
     4f4:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
     4f8:	2f656369 	svccs	0x00656369
     4fc:	532f5453 			; <UNDEFINED> instruction: 0x532f5453
     500:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     504:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     508:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     50c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     510:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     514:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     518:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     51c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     520:	632e7878 			; <UNDEFINED> instruction: 0x632e7878
     524:	00000100 	andeq	r0, r0, r0, lsl #2
     528:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     52c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     530:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     534:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     538:	00000200 	andeq	r0, r0, r0, lsl #4
     53c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     540:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     544:	00030068 	andeq	r0, r3, r8, rrx
     548:	726f6300 	rsbvc	r6, pc, #0, 6
     54c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     550:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     554:	73000004 	movwvc	r0, #4
     558:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     55c:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     560:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     564:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     568:	00050068 	andeq	r0, r5, r8, rrx
     56c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     570:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     574:	63783130 	cmnvs	r8, #48, 2
     578:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     57c:	05000000 	streq	r0, [r0, #-0]
     580:	02050001 	andeq	r0, r5, #1
     584:	08000664 	stmdaeq	r0, {r2, r5, r6, r9, sl}
     588:	0101a803 	tsteq	r1, r3, lsl #16
     58c:	05311005 	ldreq	r1, [r1, #-5]!
     590:	820b0301 	andhi	r0, fp, #67108864	; 0x4000000
     594:	01000802 	tsteq	r0, r2, lsl #16
     598:	00010501 	andeq	r0, r1, r1, lsl #10
     59c:	06880205 	streq	r0, [r8], r5, lsl #4
     5a0:	dd030800 	stcle	8, cr0, [r3, #-0]
     5a4:	0c050101 	stfeqs	f0, [r5], {1}
     5a8:	2e15053d 	mrccs	5, 0, r0, cr5, cr13, {1}
     5ac:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
     5b0:	3a052e2b 	bcc	14be64 <_Min_Stack_Size+0x14ba64>
     5b4:	310c052e 	tstcc	ip, lr, lsr #10
     5b8:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
     5bc:	17053e03 	strne	r3, [r5, -r3, lsl #28]
     5c0:	3d0705cb 	cfstr32cc	mvfx0, [r7, #-812]	; 0xfffffcd4
     5c4:	05221705 	streq	r1, [r2, #-1797]!	; 0xfffff8fb
     5c8:	17053d07 	strne	r3, [r5, -r7, lsl #26]
     5cc:	2e370526 	cdpcs	5, 3, cr0, cr7, cr6, {1}
     5d0:	3d201105 	stfccs	f1, [r0, #-20]!	; 0xffffffec
     5d4:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
     5d8:	1d053e0a 	stcne	14, cr3, [r5, #-40]	; 0xffffffd8
     5dc:	4a2c053f 	bmi	b01ae0 <_Min_Stack_Size+0xb016e0>
     5e0:	052e4a05 	streq	r4, [lr, #-2565]!	; 0xfffff5fb
     5e4:	1d053c10 	stcne	12, cr3, [r5, #-64]	; 0xffffffc0
     5e8:	4a2c054f 	bmi	b01b2c <_Min_Stack_Size+0xb0172c>
     5ec:	052e4a05 	streq	r4, [lr, #-2565]!	; 0xfffff5fb
     5f0:	14053c10 	strne	r3, [r5], #-3088	; 0xfffff3f0
     5f4:	2e32053f 	mrccs	5, 1, r0, cr2, cr15, {1}
     5f8:	053c3805 	ldreq	r3, [ip, #-2053]!	; 0xfffff7fb
     5fc:	1f05200c 	svcne	0x0005200c
     600:	4a17052f 	bmi	5c1ac4 <_Min_Stack_Size+0x5c16c4>
     604:	052f0705 	streq	r0, [pc, #-1797]!	; ffffff07 <_estack+0xdffeff07>
     608:	07052217 	smladeq	r5, r7, r2, r2
     60c:	241c053d 	ldrcs	r0, [ip], #-1341	; 0xfffffac3
     610:	052e3405 	streq	r3, [lr, #-1029]!	; 0xfffffbfb
     614:	07053c16 	smladeq	r5, r6, ip, r3
     618:	2213052e 	andscs	r0, r3, #192937984	; 0xb800000
     61c:	02750105 	rsbseq	r0, r5, #1073741825	; 0x40000001
     620:	01010010 	tsteq	r1, r0, lsl r0
     624:	000000b3 	strheq	r0, [r0], -r3
     628:	006d0003 	rsbeq	r0, sp, r3
     62c:	01020000 	mrseq	r0, (UNDEF: 2)
     630:	000d0efb 	strdeq	r0, [sp], -fp
     634:	01010101 	tsteq	r1, r1, lsl #2
     638:	01000000 	mrseq	r0, (UNDEF: 0)
     63c:	2f010000 	svccs	0x00010000
     640:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     644:	6d73692f 			; <UNDEFINED> instruction: 0x6d73692f
     648:	2f6c696f 	svccs	0x006c696f
     64c:	6a6f7270 	bvs	1bdd014 <_Min_Stack_Size+0x1bdcc14>
     650:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
     654:	55434d2f 	strbpl	r4, [r3, #-3375]	; 0xfffff2d1
     658:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     65c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     660:	575f3130 	smmlarpl	pc, r0, r1, r3	; <UNPREDICTABLE>
     664:	74636165 	strbtvc	r6, [r3], #-357	; 0xfffffe9b
     668:	616c425f 	cmnvs	ip, pc, asr r2
     66c:	69506b63 	ldmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     670:	722f6c6c 	eorvc	r6, pc, #108, 24	; 0x6c00
     674:	745f7474 	ldrbvc	r7, [pc], #-1140	; 67c <_Min_Stack_Size+0x27c>
     678:	6c706d65 	ldclvs	13, cr6, [r0], #-404	; 0xfffffe6c
     67c:	00657461 	rsbeq	r7, r5, r1, ror #8
     680:	61747300 	cmnvs	r4, r0, lsl #6
     684:	70757472 	rsbsvc	r7, r5, r2, ror r4
     688:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     68c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     690:	63783130 	cmnvs	r8, #48, 2
     694:	0100732e 	tsteq	r0, lr, lsr #6
     698:	00000000 	andeq	r0, r0, r0
     69c:	07880205 	streq	r0, [r8, r5, lsl #4]
     6a0:	3d030800 	stccc	8, cr0, [r3, #-0]
     6a4:	21213101 			; <UNDEFINED> instruction: 0x21213101
     6a8:	21232121 			; <UNDEFINED> instruction: 0x21232121
     6ac:	21212321 			; <UNDEFINED> instruction: 0x21212321
     6b0:	21212123 			; <UNDEFINED> instruction: 0x21212123
     6b4:	21232123 			; <UNDEFINED> instruction: 0x21232123
     6b8:	2f303023 	svccs	0x00303023
     6bc:	31205903 			; <UNDEFINED> instruction: 0x31205903
     6c0:	0f032f2f 	svceq	0x00032f2f
     6c4:	02022f2e 	andeq	r2, r2, #46, 30	; 0xb8
     6c8:	00010100 	andeq	r0, r1, r0, lsl #2
     6cc:	07d80205 	ldrbeq	r0, [r8, r5, lsl #4]
     6d0:	f1030800 			; <UNDEFINED> instruction: 0xf1030800
     6d4:	01020100 	mrseq	r0, (UNDEF: 18)
     6d8:	79010100 	stmdbvc	r1, {r8}
     6dc:	0300000a 	movweq	r0, #10
     6e0:	00012200 	andeq	r2, r1, r0, lsl #4
     6e4:	fb010200 	blx	40eee <_Min_Stack_Size+0x40aee>
     6e8:	01000d0e 	tsteq	r0, lr, lsl #26
     6ec:	00010101 	andeq	r0, r1, r1, lsl #2
     6f0:	00010000 	andeq	r0, r1, r0
     6f4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     6f8:	2f656d6f 	svccs	0x00656d6f
     6fc:	6f6d7369 	svcvs	0x006d7369
     700:	702f6c69 	eorvc	r6, pc, r9, ror #24
     704:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     708:	2f737463 	svccs	0x00737463
     70c:	2f55434d 	svccs	0x0055434d
     710:	334d5453 	movtcc	r5, #54355	; 0xd453
     714:	30344632 	eorscc	r4, r4, r2, lsr r6
     718:	65575f31 	ldrbvs	r5, [r7, #-3889]	; 0xfffff0cf
     71c:	5f746361 	svcpl	0x00746361
     720:	63616c42 	cmnvs	r1, #16896	; 0x4200
     724:	6c69506b 	stclvs	0, cr5, [r9], #-428	; 0xfffffe54
     728:	74722f6c 	ldrbtvc	r2, [r2], #-3948	; 0xfffff094
     72c:	65745f74 	ldrbvs	r5, [r4, #-3956]!	; 0xfffff08c
     730:	616c706d 	cmnvs	ip, sp, rrx
     734:	522f6574 	eorpl	r6, pc, #116, 10	; 0x1d000000
     738:	532f5454 			; <UNDEFINED> instruction: 0x532f5454
     73c:	2f006372 	svccs	0x00006372
     740:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     744:	6d73692f 			; <UNDEFINED> instruction: 0x6d73692f
     748:	2f6c696f 	svccs	0x006c696f
     74c:	6a6f7270 	bvs	1bdd114 <_Min_Stack_Size+0x1bdcd14>
     750:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
     754:	55434d2f 	strbpl	r4, [r3, #-3375]	; 0xfffff2d1
     758:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     75c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     760:	575f3130 	smmlarpl	pc, r0, r1, r3	; <UNPREDICTABLE>
     764:	74636165 	strbtvc	r6, [r3], #-357	; 0xfffffe9b
     768:	616c425f 	cmnvs	ip, pc, asr r2
     76c:	69506b63 	ldmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     770:	722f6c6c 	eorvc	r6, pc, #108, 24	; 0x6c00
     774:	745f7474 	ldrbvc	r7, [pc], #-1140	; 77c <_Min_Stack_Size+0x37c>
     778:	6c706d65 	ldclvs	13, cr6, [r0], #-404	; 0xfffffe6c
     77c:	2f657461 	svccs	0x00657461
     780:	2f545452 	svccs	0x00545452
     784:	00636e49 	rsbeq	r6, r3, r9, asr #28
     788:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     78c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     790:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     794:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     798:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     79c:	61652d65 	cmnvs	r5, r5, ror #26
     7a0:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
     7a4:	2e322e31 	mrccs	14, 1, r2, cr2, cr1, {1}
     7a8:	6e692f30 	mcrvs	15, 3, r2, cr9, cr0, {1}
     7ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     7b0:	752f0065 	strvc	r0, [pc, #-101]!	; 753 <_Min_Stack_Size+0x353>
     7b4:	612f7273 			; <UNDEFINED> instruction: 0x612f7273
     7b8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     7bc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     7c0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     7c4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     7c8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     7cc:	45530000 	ldrbmi	r0, [r3, #-0]
     7d0:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
     7d4:	5454525f 	ldrbpl	r5, [r4], #-607	; 0xfffffda1
     7d8:	0100632e 	tsteq	r0, lr, lsr #6
     7dc:	45530000 	ldrbmi	r0, [r3, #-0]
     7e0:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
     7e4:	5454525f 	ldrbpl	r5, [r4], #-607	; 0xfffffda1
     7e8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     7ec:	74730000 	ldrbtvc	r0, [r3], #-0
     7f0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     7f4:	0300682e 	movweq	r6, #2094	; 0x82e
     7f8:	74730000 	ldrbtvc	r0, [r3], #-0
     7fc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     800:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     804:	05000000 	streq	r0, [r0, #-0]
     808:	0205001b 	andeq	r0, r5, #27
     80c:	080007dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl}
     810:	0102b203 	tsteq	r2, r3, lsl #4
     814:	05431905 	strbeq	r1, [r3, #-2309]	; 0xfffff6fb
     818:	19052f03 	stmdbne	r5, {r0, r1, r8, r9, sl, fp, sp}
     81c:	1b053d59 	blne	14fd88 <_Min_Stack_Size+0x14f988>
     820:	4b3d3d40 	blmi	f4fd28 <_Min_Stack_Size+0xf4f928>
     824:	1d053d3d 	stcne	13, cr3, [r5, #-244]	; 0xffffff0c
     828:	3d3d3d40 	ldccc	13, cr3, [sp, #-256]!	; 0xffffff00
     82c:	03053d3d 	movweq	r3, #23869	; 0x5d3d
     830:	2f0a0542 	svccs	0x000a0542
     834:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
     838:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
     83c:	1b052103 	blne	148c50 <_Min_Stack_Size+0x148850>
     840:	03040200 	movweq	r0, #16896	; 0x4200
     844:	0010053c 	andseq	r0, r0, ip, lsr r5
     848:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
     84c:	02002a05 	andeq	r2, r0, #20480	; 0x5000
     850:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
     854:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
     858:	03053c01 	movweq	r3, #23553	; 0x5c01
     85c:	2f01053f 	svccs	0x0001053f
     860:	01000e02 	tsteq	r0, r2, lsl #28
     864:	00650501 	rsbeq	r0, r5, r1, lsl #10
     868:	08900205 	ldmeq	r0, {r0, r2, r9}
     86c:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     870:	13050102 	movwne	r0, #20738	; 0x5102
     874:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
     878:	0b052f09 	bleq	14c4a4 <_Min_Stack_Size+0x14c0a4>
     87c:	3d08053e 	cfstr32cc	mvfx0, [r8, #-248]	; 0xffffff08
     880:	054b1f05 	strbeq	r1, [fp, #-3845]	; 0xfffff0fb
     884:	1e053c17 	mcrne	12, 0, r3, cr5, cr7, {0}
     888:	2e3e053e 	mrccs	5, 1, r0, cr14, cr14, {1}
     88c:	053c2d05 	ldreq	r2, [ip, #-3333]!	; 0xfffff2fb
     890:	05302017 	ldreq	r2, [r0, #-23]!	; 0xffffffe9
     894:	05594a15 	ldrbeq	r4, [r9, #-2581]	; 0xfffff5eb
     898:	0a056712 	beq	15a4e8 <_Min_Stack_Size+0x15a0e8>
     89c:	0305052e 	movweq	r0, #21806	; 0x552e
     8a0:	15053c09 	strne	r3, [r5, #-3081]	; 0xfffff3f7
     8a4:	4b4b4b59 	blmi	12d3610 <_Min_Stack_Size+0x12d3210>
     8a8:	054c1705 	strbeq	r1, [ip, #-1797]	; 0xfffff8fb
     8ac:	0d052e08 	stceq	14, cr2, [r5, #-32]	; 0xffffffe0
     8b0:	3005053d 	andcc	r0, r5, sp, lsr r5
     8b4:	052f1205 	streq	r1, [pc, #-517]!	; 6b7 <_Min_Stack_Size+0x2b7>
     8b8:	0a053d0c 	beq	14fcf0 <_Min_Stack_Size+0x14f8f0>
     8bc:	2101053d 	tstcs	r1, sp, lsr r5
     8c0:	01000402 	tsteq	r0, r2, lsl #8
     8c4:	005e0501 	subseq	r0, lr, r1, lsl #10
     8c8:	094a0205 	stmdbeq	sl, {r0, r2, r9}^
     8cc:	ac030800 	stcge	8, cr0, [r3], {-0}
     8d0:	09050103 	stmdbeq	r5, {r0, r1, r8}
     8d4:	3d0e056c 	cfstr32cc	mvfx0, [lr, #-432]	; 0xfffffe50
     8d8:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
     8dc:	12053d06 	andne	r3, r5, #384	; 0x180
     8e0:	2e0a054e 	cfsh32cs	mvfx0, mvfx10, #46
     8e4:	09030505 	stmdbeq	r3, {r0, r2, r8, sl}
     8e8:	1a05593c 	bne	156de0 <_Min_Stack_Size+0x1569e0>
     8ec:	3c12052f 	cfldr32cc	mvfx0, [r2], {47}	; 0x2f
     8f0:	1e030105 	adfnes	f0, f3, f5
     8f4:	0314052e 	tsteq	r4, #192937984	; 0xb800000
     8f8:	12052076 	andne	r2, r5, #118	; 0x76
     8fc:	2e0a052f 	cfsh32cs	mvfx0, mvfx10, #31
     900:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
     904:	0a055914 	beq	156d5c <_Min_Stack_Size+0x15695c>
     908:	3d05054b 	cfstr32cc	mvfx0, [r5, #-300]	; 0xfffffed4
     90c:	2f120583 	svccs	0x00120583
     910:	023f0105 	eorseq	r0, pc, #1073741825	; 0x40000001
     914:	01010004 	tsteq	r1, r4
     918:	05005805 	streq	r5, [r0, #-2053]	; 0xfffff7fb
     91c:	00000002 	andeq	r0, r0, r2
     920:	03f00300 	mvnseq	r0, #0, 6
     924:	69090501 	stmdbvs	r9, {r0, r8, sl}
     928:	052f1705 	streq	r1, [pc, #-1797]!	; 22b <_Min_Heap_Size+0x2b>
     92c:	03053c09 	movweq	r3, #23561	; 0x5c09
     930:	75010521 	strvc	r0, [r1, #-1313]	; 0xfffffadf
     934:	01000702 	tsteq	r0, r2, lsl #14
     938:	00420501 	subeq	r0, r2, r1, lsl #10
     93c:	09da0205 	ldmibeq	sl, {r0, r2, r9}^
     940:	86030800 	strhi	r0, [r3], -r0, lsl #16
     944:	09050104 	stmdbeq	r5, {r2, r8}
     948:	06053d52 			; <UNDEFINED> instruction: 0x06053d52
     94c:	4b0e053d 	blmi	381e48 <_Min_Stack_Size+0x381a48>
     950:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
     954:	07052e2a 	streq	r2, [r5, -sl, lsr #28]
     958:	3e0f052e 	cfsh32cc	mvfx0, mvfx15, #30
     95c:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
     960:	0105300a 	tsteq	r5, sl
     964:	00060221 	andeq	r0, r6, r1, lsr #4
     968:	60050101 	andvs	r0, r5, r1, lsl #2
     96c:	00020500 	andeq	r0, r2, r0, lsl #10
     970:	03000000 	movweq	r0, #0
     974:	050104b5 	streq	r0, [r1, #-1205]	; 0xfffffb4b
     978:	66090303 	strvs	r0, [r9], -r3, lsl #6
     97c:	01040200 	mrseq	r0, R12_usr
     980:	09057406 	stmdbeq	r5, {r1, r2, sl, ip, sp, lr}
     984:	0b052f06 	bleq	14c5a4 <_Min_Stack_Size+0x14c1a4>
     988:	2f090591 	svccs	0x00090591
     98c:	3d10053d 	cfldr32cc	mvfx0, [r0, #-244]	; 0xffffff0c
     990:	05320605 	ldreq	r0, [r2, #-1541]!	; 0xfffff9fb
     994:	11054b18 	tstne	r5, r8, lsl fp
     998:	12053d2e 	andne	r3, r5, #2944	; 0xb80
     99c:	2e0a0567 	cfsh32cs	mvfx0, mvfx10, #55
     9a0:	09030505 	stmdbeq	r3, {r0, r2, r8, sl}
     9a4:	5912053c 	ldmdbpl	r2, {r2, r3, r4, r5, r8, sl}
     9a8:	054b4b4b 	strbeq	r4, [fp, #-2891]	; 0xfffff4b5
     9ac:	08054f17 	stmdaeq	r5, {r0, r1, r2, r4, r8, r9, sl, fp, lr}
     9b0:	3d0d052e 	cfstr32cc	mvfx0, [sp, #-184]	; 0xffffff48
     9b4:	4b340f05 	blmi	d045d0 <_Min_Stack_Size+0xd041d0>
     9b8:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
     9bc:	0a053d12 	beq	14fe0c <_Min_Stack_Size+0x14fa0c>
     9c0:	0305052e 	movweq	r0, #21806	; 0x552e
     9c4:	12053c09 	andne	r3, r5, #2304	; 0x900
     9c8:	4b4b4b59 	blmi	12d3734 <_Min_Stack_Size+0x12d3334>
     9cc:	05500605 	ldrbeq	r0, [r0, #-1541]	; 0xfffff9fb
     9d0:	0a053d12 	beq	14fe20 <_Min_Stack_Size+0x14fa20>
     9d4:	2101053f 	tstcs	r1, pc, lsr r5
     9d8:	01000602 	tsteq	r0, r2, lsl #12
     9dc:	00580501 	subseq	r0, r8, r1, lsl #10
     9e0:	00000205 	andeq	r0, r0, r5, lsl #4
     9e4:	91030000 	mrsls	r0, (UNDEF: 3)
     9e8:	03050105 	movweq	r0, #20741	; 0x5105
     9ec:	00660903 	rsbeq	r0, r6, r3, lsl #18
     9f0:	06010402 	streq	r0, [r1], -r2, lsl #8
     9f4:	06090574 			; <UNDEFINED> instruction: 0x06090574
     9f8:	910b052f 	tstls	fp, pc, lsr #10
     9fc:	3d2f0905 			; <UNDEFINED> instruction: 0x3d2f0905
     a00:	053d1005 	ldreq	r1, [sp, #-5]!
     a04:	18053206 	stmdane	r5, {r1, r2, r9, ip, sp}
     a08:	2e11054b 	cfmac32cs	mvfx0, mvfx1, mvfx11
     a0c:	6712053d 			; <UNDEFINED> instruction: 0x6712053d
     a10:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
     a14:	3c090305 	stccc	3, cr0, [r9], {5}
     a18:	4b591205 	blmi	1645234 <_Min_Stack_Size+0x1644e34>
     a1c:	17054b4b 	strne	r4, [r5, -fp, asr #22]
     a20:	2e08054f 	cfsh32cs	mvfx0, mvfx8, #47
     a24:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
     a28:	054b340f 	strbeq	r3, [fp, #-1039]	; 0xfffffbf1
     a2c:	12056706 	andne	r6, r5, #1572864	; 0x180000
     a30:	2e0a053d 	mcrcs	5, 0, r0, cr10, cr13, {1}
     a34:	09030505 	stmdbeq	r3, {r0, r2, r8, sl}
     a38:	5912053c 	ldmdbpl	r2, {r2, r3, r4, r5, r8, sl}
     a3c:	054b4b4b 	strbeq	r4, [fp, #-2891]	; 0xfffff4b5
     a40:	12054d06 	andne	r4, r5, #384	; 0x180
     a44:	3f0a053d 	svccc	0x000a053d
     a48:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
     a4c:	01010006 	tsteq	r1, r6
     a50:	05005c05 	streq	r5, [r0, #-3077]	; 0xfffff3fb
     a54:	00000002 	andeq	r0, r0, r2
     a58:	05f20300 	ldrbeq	r0, [r2, #768]!	; 0x300
     a5c:	69030501 	stmdbvs	r3, {r0, r8, sl}
     a60:	05781205 	ldrbeq	r1, [r8, #-517]!	; 0xfffffdfb
     a64:	0a056a03 	beq	15b278 <_Min_Stack_Size+0x15ae78>
     a68:	2101053e 	tstcs	r1, lr, lsr r5
     a6c:	01000402 	tsteq	r0, r2, lsl #8
     a70:	00540501 	subseq	r0, r4, r1, lsl #10
     a74:	00000205 	andeq	r0, r0, r5, lsl #4
     a78:	92030000 	andls	r0, r3, #0
     a7c:	03050106 	movweq	r0, #20742	; 0x5106
     a80:	78120569 	ldmdavc	r2, {r0, r3, r5, r6, r8, sl}
     a84:	056a0305 	strbeq	r0, [sl, #-773]!	; 0xfffffcfb
     a88:	01053e0a 	tsteq	r5, sl, lsl #28
     a8c:	00040221 	andeq	r0, r4, r1, lsr #4
     a90:	68050101 	stmdavs	r5, {r0, r8}
     a94:	00020500 	andeq	r0, r2, r0, lsl #10
     a98:	03000000 	movweq	r0, #0
     a9c:	050106b9 	streq	r0, [r1, #-1721]	; 0xfffff947
     aa0:	052f6e09 	streq	r6, [pc, #-3593]!	; fffffc9f <_estack+0xdffefc9f>
     aa4:	1c05940c 	cfstrsne	mvf9, [r5], {12}
     aa8:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
     aac:	052f1205 	streq	r1, [pc, #-517]!	; 8af <_Min_Stack_Size+0x4af>
     ab0:	14052e0b 	strne	r2, [r5], #-3595	; 0xfffff1f5
     ab4:	2e23053d 	mcrcs	5, 1, r0, cr3, cr13, {1}
     ab8:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     abc:	21052f12 	tstcs	r5, r2, lsl pc
     ac0:	2e1a052e 	cfmul64cs	mvdx0, mvdx10, mvdx14
     ac4:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
     ac8:	21053e12 	tstcs	r5, r2, lsl lr
     acc:	2e1a052e 	cfmul64cs	mvdx0, mvdx10, mvdx14
     ad0:	05203505 	streq	r3, [r0, #-1285]!	; 0xfffffafb
     ad4:	0b052e2e 	bleq	14c394 <_Min_Stack_Size+0x14bf94>
     ad8:	30060520 	andcc	r0, r6, r0, lsr #10
     adc:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
     ae0:	12052e1f 	andne	r2, r5, #496	; 0x1f0
     ae4:	3d0b053c 	cfstr32cc	mvfx0, [fp, #-240]	; 0xffffff10
     ae8:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
     aec:	14052e1c 	strne	r2, [r5], #-3612	; 0xfffff1e4
     af0:	3b11052e 	blcc	441fb0 <_Min_Stack_Size+0x441bb0>
     af4:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
     af8:	10052e19 	andne	r2, r5, r9, lsl lr
     afc:	2e260535 	mcrcs	5, 1, r0, cr6, cr5, {1}
     b00:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
     b04:	14053008 	strne	r3, [r5], #-8
     b08:	2e25054e 	cfsh64cs	mvdx0, mvdx5, #46
     b0c:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
     b10:	2e090307 	cdpcs	3, 0, cr0, cr9, cr7, {0}
     b14:	2f140559 	svccs	0x00140559
     b18:	05680705 	strbeq	r0, [r8, #-1797]!	; 0xfffff8fb
     b1c:	25052514 	strcs	r2, [r5, #-1300]	; 0xfffffaec
     b20:	2e0c052e 	cfsh32cs	mvfx0, mvfx12, #30
     b24:	09030705 	stmdbeq	r3, {r0, r2, r8, r9, sl}
     b28:	590d052e 	stmdbpl	sp, {r1, r2, r3, r5, r8, sl}
     b2c:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
     b30:	10052f14 	andne	r2, r5, r4, lsl pc
     b34:	4c15053d 	cfldr32mi	mvfx0, [r5], {61}	; 0x3d
     b38:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     b3c:	0105300c 	tsteq	r5, ip
     b40:	0007023d 	andeq	r0, r7, sp, lsr r2
     b44:	69050101 	stmdbvs	r5, {r0, r8}
     b48:	00020500 	andeq	r0, r2, r0, lsl #10
     b4c:	03000000 	movweq	r0, #0
     b50:	050107f8 	streq	r0, [r1, #-2040]	; 0xfffff808
     b54:	66090309 	strvs	r0, [r9], -r9, lsl #6
     b58:	9410052f 	ldrls	r0, [r0], #-1327	; 0xfffffad1
     b5c:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
     b60:	0805960d 	stmdaeq	r5, {r0, r2, r3, r9, sl, ip, pc}
     b64:	4b0e054b 	blmi	382098 <_Min_Stack_Size+0x381c98>
     b68:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
     b6c:	07051d0e 	streq	r1, [r5, -lr, lsl #26]
     b70:	5a05052f 	bpl	142034 <_Min_Stack_Size+0x141c34>
     b74:	05250d05 	streq	r0, [r5, #-3333]!	; 0xfffff2fb
     b78:	05054b0c 	streq	r4, [r5, #-2828]	; 0xfffff4f4
     b7c:	0e055967 	vmlseq.f16	s10, s10, s15	; <UNPREDICTABLE>
     b80:	67050525 	strvs	r0, [r5, -r5, lsr #10]
     b84:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
     b88:	0a052f05 	beq	14c7a4 <_Min_Stack_Size+0x14c3a4>
     b8c:	21010525 	tstcs	r1, r5, lsr #10
     b90:	01000602 	tsteq	r0, r2, lsl #12
     b94:	005f0501 	subseq	r0, pc, r1, lsl #10
     b98:	0a200205 	beq	8013b4 <_Min_Stack_Size+0x800fb4>
     b9c:	c3030800 	movwgt	r0, #14336	; 0x3800
     ba0:	09050108 	stmdbeq	r5, {r3, r8}
     ba4:	10052f6e 	andne	r2, r5, lr, ror #30
     ba8:	2e030594 	mcrcs	5, 0, r0, cr3, cr4, {4}
     bac:	05960d05 	ldreq	r0, [r6, #3333]	; 0xd05
     bb0:	0e054b08 	vmlaeq.f64	d4, d5, d8
     bb4:	3305054b 	movwcc	r0, #21835	; 0x554b
     bb8:	051d0e05 	ldreq	r0, [sp, #-3589]	; 0xfffff1fb
     bbc:	05052f07 	streq	r2, [r5, #-3847]	; 0xfffff0f9
     bc0:	250d055a 	strcs	r0, [sp, #-1370]	; 0xfffffaa6
     bc4:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
     bc8:	05596705 	ldrbeq	r6, [r9, #-1797]	; 0xfffff8fb
     bcc:	0505250e 	streq	r2, [r5, #-1294]	; 0xfffffaf2
     bd0:	220c0567 	andcs	r0, ip, #432013312	; 0x19c00000
     bd4:	052f0505 	streq	r0, [pc, #-1285]!	; 6d7 <_Min_Stack_Size+0x2d7>
     bd8:	0105250a 	tsteq	r5, sl, lsl #10
     bdc:	00060221 	andeq	r0, r6, r1, lsr #4
     be0:	63050101 	movwvs	r0, #20737	; 0x5101
     be4:	00020500 	andeq	r0, r2, r0, lsl #10
     be8:	03000000 	movweq	r0, #0
     bec:	0501098f 	streq	r0, [r1, #-2447]	; 0xfffff671
     bf0:	02006903 	andeq	r6, r0, #49152	; 0xc000
     bf4:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
     bf8:	0c052f06 	stceq	15, cr2, [r5], {6}
     bfc:	67030575 	smlsdxvs	r3, r5, r5, r0
     c00:	053d0a05 	ldreq	r0, [sp, #-2565]!	; 0xfffff5fb
     c04:	06022101 	streq	r2, [r2], -r1, lsl #2
     c08:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     c0c:	02050059 	andeq	r0, r5, #89	; 0x59
     c10:	08000ac0 	stmdaeq	r0, {r6, r7, r9, fp}
     c14:	0109ac03 	tsteq	r9, r3, lsl #24
     c18:	00690305 	rsbeq	r0, r9, r5, lsl #6
     c1c:	06010402 	streq	r0, [r1], -r2, lsl #8
     c20:	052f0674 	streq	r0, [pc, #-1652]!	; 5b4 <_Min_Stack_Size+0x1b4>
     c24:	0305750c 	movweq	r7, #21772	; 0x550c
     c28:	3d0a0567 	cfstr32cc	mvfx0, [sl, #-412]	; 0xfffffe64
     c2c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
     c30:	01010006 	tsteq	r1, r6
     c34:	05004605 	streq	r4, [r0, #-1541]	; 0xfffff9fb
     c38:	000b0c02 	andeq	r0, fp, r2, lsl #24
     c3c:	09ca0308 	stmibeq	sl, {r3, r8, r9}^
     c40:	5b090501 	blpl	24204c <_Min_Stack_Size+0x241c4c>
     c44:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
     c48:	04026701 	streq	r6, [r2], #-1793	; 0xfffff8ff
     c4c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     c50:	02050045 	andeq	r0, r5, #69	; 0x45
     c54:	00000000 	andeq	r0, r0, r0
     c58:	0109e803 	tsteq	r9, r3, lsl #16
     c5c:	056e0905 	strbeq	r0, [lr, #-2309]!	; 0xfffff6fb
     c60:	09059410 	stmdbeq	r5, {r4, sl, ip, pc}
     c64:	2f15052e 	svccs	0x0015052e
     c68:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     c6c:	15053d0b 	strne	r3, [r5, #-3339]	; 0xfffff2f5
     c70:	2e060533 	mcrcs	5, 0, r0, cr6, cr3, {1}
     c74:	053d1205 	ldreq	r1, [sp, #-517]!	; 0xfffffdfb
     c78:	0a052e23 	beq	14c50c <_Min_Stack_Size+0x14c10c>
     c7c:	2f0b052e 	svccs	0x000b052e
     c80:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
     c84:	0c052f12 	stceq	15, cr2, [r5], {18}
     c88:	0a053e3d 	beq	150584 <_Min_Stack_Size+0x150184>
     c8c:	21010531 	tstcs	r1, r1, lsr r5
     c90:	01000902 	tsteq	r0, r2, lsl #18
     c94:	003f0501 	eorseq	r0, pc, r1, lsl #10
     c98:	00000205 	andeq	r0, r0, r5, lsl #4
     c9c:	9a030000 	bls	c0ca4 <_Min_Stack_Size+0xc08a4>
     ca0:	0305010a 	movweq	r0, #20746	; 0x510a
     ca4:	0402006e 	streq	r0, [r2], #-110	; 0xffffff92
     ca8:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
     cac:	7809052f 	stmdavc	r9, {r0, r1, r2, r3, r5, r8, sl}
     cb0:	05941005 	ldreq	r1, [r4, #5]
     cb4:	15052e09 	strne	r2, [r5, #-3593]	; 0xfffff1f7
     cb8:	2e06052f 	cfsh32cs	mvfx0, mvfx6, #31
     cbc:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
     cc0:	06053315 			; <UNDEFINED> instruction: 0x06053315
     cc4:	3d13052e 	cfldr32cc	mvfx0, [r3, #-184]	; 0xffffff48
     cc8:	052e2405 	streq	r2, [lr, #-1029]!	; 0xfffffbfb
     ccc:	052f2e0b 	streq	r2, [pc, #-3595]!	; fffffec9 <_estack+0xdffefec9>
     cd0:	12053d05 	andne	r3, r5, #320	; 0x140
     cd4:	3d0c052f 	cfstr32cc	mvfx0, [ip, #-188]	; 0xffffff44
     cd8:	3303053e 	movwcc	r0, #13630	; 0x353e
     cdc:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
     ce0:	06022101 	streq	r2, [r2], -r1, lsl #2
     ce4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     ce8:	0205003b 	andeq	r0, r5, #59	; 0x3b
     cec:	00000000 	andeq	r0, r0, r0
     cf0:	010ad503 	tsteq	sl, r3, lsl #10
     cf4:	006e0305 	rsbeq	r0, lr, r5, lsl #6
     cf8:	06010402 	streq	r0, [r1], -r2, lsl #8
     cfc:	052f0674 	streq	r0, [pc, #-1652]!	; 690 <_Min_Stack_Size+0x290>
     d00:	10057809 	andne	r7, r5, r9, lsl #16
     d04:	2e090594 	mcrcs	5, 0, r0, cr9, cr4, {4}
     d08:	052f1505 	streq	r1, [pc, #-1285]!	; 80b <_Min_Stack_Size+0x40b>
     d0c:	0b052e06 	bleq	14c52c <_Min_Stack_Size+0x14c12c>
     d10:	330c053d 	movwcc	r0, #50493	; 0xc53d
     d14:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     d18:	1a052f0b 	bne	14c94c <_Min_Stack_Size+0x14c54c>
     d1c:	01040200 	mrseq	r0, R12_usr
     d20:	00120520 	andseq	r0, r2, r0, lsr #10
     d24:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
     d28:	05431505 	strbeq	r1, [r3, #-1285]	; 0xfffffafb
     d2c:	13052e06 	movwne	r2, #24070	; 0x5e06
     d30:	2e24053d 	mcrcs	5, 1, r0, cr4, cr13, {1}
     d34:	2f2e0b05 	svccs	0x002e0b05
     d38:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
     d3c:	0c052f12 	stceq	15, cr2, [r5], {18}
     d40:	03053e3d 	movweq	r3, #24125	; 0x5e3d
     d44:	3d0a0533 	cfstr32cc	mvfx0, [sl, #-204]	; 0xffffff34
     d48:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
     d4c:	01010006 	tsteq	r1, r6
     d50:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
     d54:	00000002 	andeq	r0, r0, r2
     d58:	0b940300 	bleq	fe501960 <_estack+0xde4f1960>
     d5c:	400c0501 	andmi	r0, ip, r1, lsl #10
     d60:	05740505 	ldrbeq	r0, [r4, #-1285]!	; 0xfffffafb
     d64:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
     d68:	2007053d 	andcs	r0, r7, sp, lsr r5
     d6c:	3e0a0530 	cfmv64hrcc	mvdx10, r0
     d70:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
     d74:	01010004 	tsteq	r1, r4
     d78:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
     d7c:	00000002 	andeq	r0, r0, r2
     d80:	0bb00300 	bleq	fec01988 <_estack+0xdebf1988>
     d84:	00090501 	andeq	r0, r9, r1, lsl #10
     d88:	40010402 	andmi	r0, r1, r2, lsl #8
     d8c:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
     d90:	053d0104 	ldreq	r0, [sp, #-260]!	; 0xfffffefc
     d94:	01053d0a 	tsteq	r5, sl, lsl #26
     d98:	00040221 	andeq	r0, r4, r1, lsr #4
     d9c:	1d050101 	stfnes	f0, [r5, #-4]
     da0:	00020500 	andeq	r0, r2, r0, lsl #10
     da4:	03000000 	movweq	r0, #0
     da8:	05010bc7 	streq	r0, [r1, #-3015]	; 0xfffff439
     dac:	02004103 	andeq	r4, r0, #-1073741824	; 0xc0000000
     db0:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
     db4:	2f060905 	svccs	0x00060905
     db8:	3d15052f 	cfldr32cc	mvfx0, [r5, #-188]	; 0xffffff44
     dbc:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     dc0:	053e3d07 	ldreq	r3, [lr, #-3335]!	; 0xfffff2f9
     dc4:	0105300a 	tsteq	r5, sl
     dc8:	00080221 	andeq	r0, r8, r1, lsr #4
     dcc:	33050101 	movwcc	r0, #20737	; 0x5101
     dd0:	00020500 	andeq	r0, r2, r0, lsl #10
     dd4:	03000000 	movweq	r0, #0
     dd8:	05010be3 	streq	r0, [r1, #-3043]	; 0xfffff41d
     ddc:	05054e09 	streq	r4, [r5, #-3593]	; 0xfffff1f7
     de0:	3d130591 	cfldr32cc	mvfx0, [r3, #-580]	; 0xfffffdbc
     de4:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
     de8:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     dec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     df0:	02050035 	andeq	r0, r5, #53	; 0x35
     df4:	00000000 	andeq	r0, r0, r0
     df8:	010bf803 	tsteq	fp, r3, lsl #16	; <UNPREDICTABLE>
     dfc:	054e0905 	strbeq	r0, [lr, #-2309]	; 0xfffff6fb
     e00:	0f059105 	svceq	0x00059105
     e04:	2e17053d 	mrccs	5, 0, r0, cr7, cr13, {1}
     e08:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     e0c:	01010008 	tsteq	r1, r8
     e10:	05006705 	streq	r6, [r0, #-1797]	; 0xfffff8fb
     e14:	00000002 	andeq	r0, r0, r2
     e18:	0c940300 	ldceq	3, cr0, [r4], {0}
     e1c:	78030501 	stmdavc	r3, {r0, r8, sl}
     e20:	01040200 	mrseq	r0, R12_usr
     e24:	2f067406 	svccs	0x00067406
     e28:	05750a05 	ldrbeq	r0, [r5, #-2565]!	; 0xfffff5fb
     e2c:	23052f0f 	movwcs	r2, #24335	; 0x5f0f
     e30:	90080530 	andls	r0, r8, r0, lsr r5
     e34:	05311005 	ldreq	r1, [r1, #-5]!
     e38:	18053d20 	stmdane	r5, {r5, r8, sl, fp, ip, sp}
     e3c:	4707052e 	strmi	r0, [r7, -lr, lsr #10]
     e40:	05241b05 	streq	r1, [r4, #-2821]!	; 0xfffff4fb
     e44:	2d052e06 	stccs	14, cr2, [r5, #-24]	; 0xffffffe8
     e48:	9f9f9f3d 	svcls	0x009f9f3d
     e4c:	05059f9f 	streq	r9, [r5, #-3999]	; 0xfffff061
     e50:	3e11059f 	cfcmp32cc	r0, mvfx1, mvfx15
     e54:	053e0305 	ldreq	r0, [lr, #-773]!	; 0xfffffcfb
     e58:	01053d0a 	tsteq	r5, sl, lsl #26
     e5c:	00070221 	andeq	r0, r7, r1, lsr #4
     e60:	65050101 	strvs	r0, [r5, #-257]	; 0xfffffeff
     e64:	00020500 	andeq	r0, r2, r0, lsl #10
     e68:	03000000 	movweq	r0, #0
     e6c:	05010cc4 	streq	r0, [r1, #-3268]	; 0xfffff33c
     e70:	02007803 	andeq	r7, r0, #196608	; 0x30000
     e74:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
     e78:	0a052f06 	beq	14ca98 <_Min_Stack_Size+0x14c698>
     e7c:	2f0f0575 	svccs	0x000f0575
     e80:	05302105 	ldreq	r2, [r0, #-261]!	; 0xfffffefb
     e84:	10059e08 	andne	r9, r5, r8, lsl #28
     e88:	3d200531 	cfstr32cc	mvfx0, [r0, #-196]!	; 0xffffff3c
     e8c:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
     e90:	1b054707 	blne	152ab4 <_Min_Stack_Size+0x1526b4>
     e94:	2e060524 	cfsh32cs	mvfx0, mvfx6, #20
     e98:	9f3d2b05 	svcls	0x003d2b05
     e9c:	9f9f9fad 	svcls	0x009f9fad
     ea0:	059f0505 	ldreq	r0, [pc, #1285]	; 13ad <_Min_Stack_Size+0xfad>
     ea4:	03053e11 	movweq	r3, #24081	; 0x5e11
     ea8:	3d0a053e 	cfstr32cc	mvfx0, [sl, #-248]	; 0xffffff08
     eac:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
     eb0:	01010007 	tsteq	r1, r7
     eb4:	05007c05 	streq	r7, [r0, #-3077]	; 0xfffff3fb
     eb8:	000b3402 	andeq	r3, fp, r2, lsl #8
     ebc:	0cfa0308 	ldcleq	3, cr0, [sl], #32
     ec0:	79030501 	stmdbvc	r3, {r0, r8, sl}
     ec4:	01040200 	mrseq	r0, R12_usr
     ec8:	0a057406 	beq	15dee8 <_Min_Stack_Size+0x15dae8>
     ecc:	06052f06 	streq	r2, [r5], -r6, lsl #30
     ed0:	3d05052f 	cfstr32cc	mvfx0, [r5, #-188]	; 0xffffff44
     ed4:	05750905 	ldrbeq	r0, [r5, #-2309]!	; 0xfffff6fb
     ed8:	19059108 	stmdbne	r5, {r3, r8, ip, pc}
     edc:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     ee0:	05053e3d 	streq	r3, [r5, #-3645]	; 0xfffff1c3
     ee4:	3d07053d 	cfstr32cc	mvfx0, [r7, #-244]	; 0xffffff0c
     ee8:	3e0a053e 	mcrcc	5, 0, r0, cr10, cr14, {1}
     eec:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
     ef0:	01010006 	tsteq	r1, r6
     ef4:	05007e05 	streq	r7, [r0, #-3589]	; 0xfffff1fb
     ef8:	00000002 	andeq	r0, r0, r2
     efc:	0dad0300 	stceq	3, cr0, [sp]
     f00:	79030501 	stmdbvc	r3, {r0, r8, sl}
     f04:	01040200 	mrseq	r0, R12_usr
     f08:	0a057406 	beq	15df28 <_Min_Stack_Size+0x15db28>
     f0c:	06052f06 	streq	r2, [r5], -r6, lsl #30
     f10:	3d05052f 	cfstr32cc	mvfx0, [r5, #-188]	; 0xffffff44
     f14:	05750b05 	ldrbeq	r0, [r5, #-2821]!	; 0xfffff4fb
     f18:	1b059108 	blne	165340 <_Min_Stack_Size+0x164f40>
     f1c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
     f20:	05053e3d 	streq	r3, [r5, #-3645]	; 0xfffff1c3
     f24:	07052f3d 	smladxeq	r5, sp, pc, r2	; <UNPREDICTABLE>
     f28:	0a053e3d 	beq	150824 <_Min_Stack_Size+0x150424>
     f2c:	2101053e 	tstcs	r1, lr, lsr r5
     f30:	01000602 	tsteq	r0, r2, lsl #12
     f34:	00490501 	subeq	r0, r9, r1, lsl #10
     f38:	00000205 	andeq	r0, r0, r5, lsl #4
     f3c:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
     f40:	0305010d 	movweq	r0, #20749	; 0x510d
     f44:	0402005d 	streq	r0, [r2], #-93	; 0xffffffa3
     f48:	05740601 	ldrbeq	r0, [r4, #-1537]!	; 0xfffff9ff
     f4c:	052f060a 	streq	r0, [pc, #-1546]!	; 94a <_Min_Stack_Size+0x54a>
     f50:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
     f54:	7509053d 	strvc	r0, [r9, #-1341]	; 0xfffffac3
     f58:	05911005 	ldreq	r1, [r1, #5]
     f5c:	07053d05 	streq	r3, [r5, -r5, lsl #26]
     f60:	0a053e3d 	beq	15085c <_Min_Stack_Size+0x15045c>
     f64:	2101053e 	tstcs	r1, lr, lsr r5
     f68:	01000602 	tsteq	r0, r2, lsl #12
     f6c:	004b0501 	subeq	r0, fp, r1, lsl #10
     f70:	00000205 	andeq	r0, r0, r5, lsl #4
     f74:	fb030000 	blx	c0f7e <_Min_Stack_Size+0xc0b7e>
     f78:	0305010d 	movweq	r0, #20749	; 0x510d
     f7c:	0402005d 	streq	r0, [r2], #-93	; 0xffffffa3
     f80:	05740601 	ldrbeq	r0, [r4, #-1537]!	; 0xfffff9ff
     f84:	052f060a 	streq	r0, [pc, #-1546]!	; 982 <_Min_Stack_Size+0x582>
     f88:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
     f8c:	750b053d 	strvc	r0, [fp, #-1341]	; 0xfffffac3
     f90:	05911205 	ldreq	r1, [r1, #517]	; 0x205
     f94:	07053d05 	streq	r3, [r5, -r5, lsl #26]
     f98:	0a053e3d 	beq	150894 <_Min_Stack_Size+0x150494>
     f9c:	2101053e 	tstcs	r1, lr, lsr r5
     fa0:	01000602 	tsteq	r0, r2, lsl #12
     fa4:	00470501 	subeq	r0, r7, r1, lsl #10
     fa8:	00000205 	andeq	r0, r0, r5, lsl #4
     fac:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
     fb0:	0305010e 	movweq	r0, #20750	; 0x510e
     fb4:	0402005d 	streq	r0, [r2], #-93	; 0xffffffa3
     fb8:	05740601 	ldrbeq	r0, [r4, #-1537]!	; 0xfffff9ff
     fbc:	052f060a 	streq	r0, [pc, #-1546]!	; 9ba <_Min_Stack_Size+0x5ba>
     fc0:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
     fc4:	7509053d 	strvc	r0, [r9, #-1341]	; 0xfffffac3
     fc8:	05911005 	ldreq	r1, [r1, #5]
     fcc:	07053d05 	streq	r3, [r5, -r5, lsl #26]
     fd0:	0a053e3d 	beq	1508cc <_Min_Stack_Size+0x1504cc>
     fd4:	2101053e 	tstcs	r1, lr, lsr r5
     fd8:	01000602 	tsteq	r0, r2, lsl #12
     fdc:	00490501 	subeq	r0, r9, r1, lsl #10
     fe0:	00000205 	andeq	r0, r0, r5, lsl #4
     fe4:	c1030000 	mrsgt	r0, (UNDEF: 3)
     fe8:	0305010e 	movweq	r0, #20750	; 0x510e
     fec:	0402005d 	streq	r0, [r2], #-93	; 0xffffffa3
     ff0:	05740601 	ldrbeq	r0, [r4, #-1537]!	; 0xfffff9ff
     ff4:	052f060a 	streq	r0, [pc, #-1546]!	; 9f2 <_Min_Stack_Size+0x5f2>
     ff8:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
     ffc:	750b053d 	strvc	r0, [fp, #-1341]	; 0xfffffac3
    1000:	05911205 	ldreq	r1, [r1, #517]	; 0x205
    1004:	07053d05 	streq	r3, [r5, -r5, lsl #26]
    1008:	0a053e3d 	beq	150904 <_Min_Stack_Size+0x150504>
    100c:	2101053e 	tstcs	r1, lr, lsr r5
    1010:	01000602 	tsteq	r0, r2, lsl #12
    1014:	001d0501 	andseq	r0, sp, r1, lsl #10
    1018:	00000205 	andeq	r0, r0, r5, lsl #4
    101c:	dd030000 	stcle	0, cr0, [r3, #-0]
    1020:	0305010e 	movweq	r0, #20750	; 0x510e
    1024:	2f01052f 	svccs	0x0001052f
    1028:	01000202 	tsteq	r0, r2, lsl #4
    102c:	00370501 	eorseq	r0, r7, r1, lsl #10
    1030:	00000205 	andeq	r0, r0, r5, lsl #4
    1034:	f2030000 	vhadd.s8	d0, d3, d0
    1038:	0305010e 	movweq	r0, #20750	; 0x510e
    103c:	0402005e 	streq	r0, [r2], #-94	; 0xffffffa2
    1040:	05740601 	ldrbeq	r0, [r4, #-1537]!	; 0xfffff9ff
    1044:	052f0605 	streq	r0, [pc, #-1541]!	; a47 <_Min_Stack_Size+0x647>
    1048:	06052f09 	streq	r2, [r5], -r9, lsl #30
    104c:	3d19052f 	cfldr32cc	mvfx0, [r9, #-188]	; 0xffffff44
    1050:	213c0b05 	teqcs	ip, r5, lsl #22
    1054:	052f0505 	streq	r0, [pc, #-1285]!	; b57 <_Min_Stack_Size+0x757>
    1058:	1705750f 	strne	r7, [r5, -pc, lsl #10]
    105c:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    1060:	052f1705 	streq	r1, [pc, #-1797]!	; 963 <_Min_Stack_Size+0x563>
    1064:	0f053d07 	svceq	0x00053d07
    1068:	4b0a0584 	blmi	282680 <_Min_Stack_Size+0x282280>
    106c:	053d1905 	ldreq	r1, [sp, #-2309]!	; 0xfffff6fb
    1070:	0b053d09 	bleq	15049c <_Min_Stack_Size+0x15009c>
    1074:	3f050584 	svccc	0x00050584
    1078:	054c0705 	strbeq	r0, [ip, #-1797]	; 0xfffff8fb
    107c:	01053e0a 	tsteq	r5, sl, lsl #28
    1080:	000c0221 	andeq	r0, ip, r1, lsr #4
    1084:	46050101 	strmi	r0, [r5], -r1, lsl #2
    1088:	00020500 	andeq	r0, r2, r0, lsl #10
    108c:	03000000 	movweq	r0, #0
    1090:	05010fa3 	streq	r0, [r1, #-4003]	; 0xfffff05d
    1094:	02006c03 	andeq	r6, r0, #768	; 0x300
    1098:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
    109c:	32060605 	andcc	r0, r6, #5242880	; 0x500000
    10a0:	05400b05 	strbeq	r0, [r0, #-2821]	; 0xfffff4fb
    10a4:	0505330f 	streq	r3, [r5, #-783]	; 0xfffffcf1
    10a8:	750d054e 	strvc	r0, [sp, #-1358]	; 0xfffffab2
    10ac:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
    10b0:	05052e1a 	streq	r2, [r5, #-3610]	; 0xfffff1e6
    10b4:	961c052e 	ldrls	r0, [ip], -lr, lsr #10
    10b8:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    10bc:	07053d10 	smladeq	r5, r0, sp, r3
    10c0:	1c090534 	cfstr32ne	mvfx0, [r9], {52}	; 0x34
    10c4:	05591705 	ldrbeq	r1, [r9, #-1797]	; 0xfffff8fb
    10c8:	09056610 	stmdbeq	r5, {r4, r9, sl, sp, lr}
    10cc:	68070521 	stmdavs	r7, {r0, r5, r8, sl}
    10d0:	05270a05 	streq	r0, [r7, #-2565]!	; 0xfffff5fb
    10d4:	07053d10 	smladeq	r5, r0, sp, r3
    10d8:	1c090542 	cfstr32ne	mvfx0, [r9], {66}	; 0x42
    10dc:	05594205 	ldrbeq	r4, [r9, #-517]	; 0xfffffdfb
    10e0:	10052e17 	andne	r2, r5, r7, lsl lr
    10e4:	2109059e 			; <UNDEFINED> instruction: 0x2109059e
    10e8:	25680705 	strbcs	r0, [r8, #-1797]!	; 0xfffff8fb
    10ec:	05591505 	ldrbeq	r1, [r9, #-1285]	; 0xfffffafb
    10f0:	0705660e 	streq	r6, [r5, -lr, lsl #12]
    10f4:	0e056721 	cdpeq	7, 0, cr6, cr5, cr1, {1}
    10f8:	3d070522 	cfstr32cc	mvfx0, [r7, #-136]	; 0xffffff78
    10fc:	05250505 	streq	r0, [r5, #-1285]!	; 0xfffffafb
    1100:	0a054c0c 	beq	154138 <_Min_Stack_Size+0x153d38>
    1104:	2101053e 	tstcs	r1, lr, lsr r5
    1108:	01000a02 	tsteq	r0, r2, lsl #20
    110c:	003f0501 	eorseq	r0, pc, r1, lsl #10
    1110:	00000205 	andeq	r0, r0, r5, lsl #4
    1114:	fb030000 	blx	c111e <_Min_Stack_Size+0xc0d1e>
    1118:	0905010f 	stmdbeq	r5, {r0, r1, r2, r3, r8}
    111c:	910a054d 	tstls	sl, sp, asr #10
    1120:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    1124:	01010007 	tsteq	r1, r7
    1128:	05003c05 	streq	r3, [r0, #-3077]	; 0xfffff3fb
    112c:	00000002 	andeq	r0, r0, r2
    1130:	10900300 	addsne	r0, r0, r0, lsl #6
    1134:	030a0501 	movweq	r0, #42241	; 0xa501
    1138:	09054a09 	stmdbeq	r5, {r0, r3, r9, fp, lr}
    113c:	06059f2f 	streq	r9, [r5], -pc, lsr #30
    1140:	4b07059f 	blmi	1c27c4 <_Min_Stack_Size+0x1c23c4>
    1144:	055a2105 	ldrbeq	r2, [sl, #-261]	; 0xfffffefb
    1148:	0705902f 	streq	r9, [r5, -pc, lsr #32]
    114c:	300a053c 	andcc	r0, sl, ip, lsr r5
    1150:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    1154:	01010008 	tsteq	r1, r8

Disassembly of section .debug_str:

00000000 <.debug_str>:
int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
   0:	434b4344 	movtmi	r4, #45892	; 0xb344
   4:	00524746 	subseq	r4, r2, r6, asr #14
   8:	31425041 	cmpcc	r2, r1, asr #32
  INIT();
   c:	00524e45 	subseq	r4, r2, r5, asr #28
  10:	43415043 	movtmi	r5, #4163	; 0x1043
  14:	53420052 	movtpl	r0, #8274	; 0x2052
  18:	5f005252 	svcpl	0x00005252
  1c:	49564e5f 	ldmdbmi	r6, {r0, r1, r2, r3, r4, r6, r9, sl, fp, lr}^
  if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
  20:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xfffff0bd
    pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  24:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
    FragLen = STRLEN(s);
  28:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
  2c:	50410079 	subpl	r0, r1, r9, ror r0
    SEGGER_RTT_LOCK();
  30:	504c3242 	subpl	r3, ip, r2, asr #4
  34:	00524e45 	subseq	r4, r2, r5, asr #28
  38:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
  3c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    Avail = _GetAvailWriteSpace(pRing);
  40:	356d6165 	strbcc	r6, [sp, #-357]!	; 0xfffffe9b
  44:	5152495f 	cmppl	r2, pc, asr r9
    switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
  48:	4453006e 	ldrbmi	r0, [r3], #-110	; 0xffffff92
  4c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
  50:	006e5152 	rsbeq	r5, lr, r2, asr r1
  54:	32425041 	subcc	r5, r2, #65	; 0x41
  58:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
  5c:	43324900 	teqmi	r2, #0, 18
      if (Avail < (FragLen + 4u)) {
  60:	52455f32 	subpl	r5, r5, #50, 30	; 0xc8
  64:	5152495f 	cmppl	r2, pc, asr r9
  68:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
        Status = 0;
  6c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
        _PostTerminalSwitch(pRing, TerminalId);
  70:	61657274 	smcvs	22308	; 0x5724
  74:	495f306d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, ip, sp}^	; <UNPREDICTABLE>
  78:	006e5152 	rsbeq	r5, lr, r2, asr r1
        Status = (int)_WriteBlocking(pRing, s, FragLen);
  7c:	344d4954 	strbcc	r4, [sp], #-2388	; 0xfffff6ac
  80:	5152495f 	cmppl	r2, pc, asr r9
  84:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
        _PostTerminalSwitch(pRing, _ActiveTerminal);
  88:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
  8c:	61657274 	smcvs	22308	; 0x5724
  90:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
      break;
  94:	006e5152 	rsbeq	r5, lr, r2, asr r1
      if (Avail < 4u) {
  98:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
        Status = -1;
  9c:	53464400 	movtpl	r4, #25600	; 0x6400
  a0:	44420052 	strbmi	r0, [r2], #-82	; 0xffffffae
        _PostTerminalSwitch(pRing, TerminalId);
  a4:	5f005243 	svcpl	0x00005243
  a8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
  ac:	745f3233 	ldrbvc	r3, [pc], #-563	; b4 <_Min_Heap_Size-0x14c>
        Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
  b0:	414d4400 	cmpmi	sp, r0, lsl #8
  b4:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
  b8:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
  bc:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
  c0:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
  c4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
        _PostTerminalSwitch(pRing, _ActiveTerminal);
  c8:	5152495f 	cmppl	r2, pc, asr r9
  cc:	4143006e 	cmpmi	r3, lr, rrx
  d0:	0042494c 	subeq	r4, r2, ip, asr #18
      break;
  d4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
      _PostTerminalSwitch(pRing, TerminalId);
  d8:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
  dc:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
      Status = (int)_WriteBlocking(pRing, s, FragLen);
  e0:	31495458 	cmpcc	r9, r8, asr r4
  e4:	30315f35 	eorscc	r5, r1, r5, lsr pc
  e8:	5152495f 	cmppl	r2, pc, asr r9
  ec:	4d4d006e 	stclmi	0, cr0, [sp, #-440]	; 0xfffffe48
      _PostTerminalSwitch(pRing, _ActiveTerminal);
  f0:	41005246 	tstmi	r0, r6, asr #4
  f4:	4c324248 	lfmmi	f4, 4, [r2], #-288	; 0xfffffee0
  f8:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
      Status = -1;
  fc:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
 100:	5f565364 	svcpl	0x00565364
    SEGGER_RTT_UNLOCK();
 104:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 108:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    Status = -1;
 10c:	5f53465f 	svcpl	0x0053465f
 110:	50554b57 	subspl	r4, r5, r7, asr fp
}
 114:	5152495f 	cmppl	r2, pc, asr r9
 118:	4e47006e 	cdpmi	0, 4, cr0, cr7, cr14, {3}
 11c:	31432055 	qdaddcc	r2, r5, r3
 120:	31312031 	teqcc	r1, r1, lsr r0
 124:	302e322e 	eorcc	r3, lr, lr, lsr #4
 128:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
 12c:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
 130:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 134:	346d2d78 	strbtcc	r2, [sp], #-3448	; 0xfffff288
 138:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 13c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 140:	6c6d2d20 	stclvs	13, cr2, [sp], #-128	; 0xffffff80
 144:	6c747469 	cfldrdvs	mvd7, [r4], #-420	; 0xfffffe5c
 148:	6e652d65 	cdpvs	13, 6, cr2, cr5, cr5, {3}
 14c:	6e616964 	vnmulvs.f16	s13, s2, s9	; <UNPREDICTABLE>
 150:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 154:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 158:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 15c:	7261683d 	rsbvc	r6, r1, #3997696	; 0x3d0000
 160:	6d2d2064 	stcvs	0, cr2, [sp, #-400]!	; 0xfffffe70
 164:	3d757066 	ldclcc	0, cr7, [r5, #-408]!	; 0xfffffe68
 168:	34767066 	ldrbtcc	r7, [r6], #-102	; 0xffffff9a
 16c:	2d70732d 	ldclcs	3, cr7, [r0, #-180]!	; 0xffffff4c
 170:	20363164 	eorscs	r3, r6, r4, ror #2
 174:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 178:	613d6863 	teqvs	sp, r3, ror #16
 17c:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
 180:	2b6d2d65 	blcs	1b4b71c <_Min_Stack_Size+0x1b4b31c>
 184:	2d207066 	stccs	0, cr7, [r0, #-408]!	; 0xfffffe68
 188:	4f2d2067 	svcmi	0x002d2067
 18c:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 190:	673d6474 			; <UNDEFINED> instruction: 0x673d6474
 194:	3131756e 	teqcc	r1, lr, ror #10
 198:	73662d20 	cmnvc	r6, #32, 26	; 0x800
 19c:	6b636174 	blvs	18d8774 <_Min_Stack_Size+0x18d8374>
 1a0:	6173752d 	cmnvs	r3, sp, lsr #10
 1a4:	2d206567 	cfstr32cs	mvfx6, [r0, #-412]!	; 0xfffffe64
 1a8:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
 1ac:	6f697463 	svcvs	0x00697463
 1b0:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xfffff292
 1b4:	6f697463 	svcvs	0x00697463
 1b8:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
 1bc:	74616466 	strbtvc	r6, [r1], #-1126	; 0xfffffb9a
 1c0:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xfffff29f
 1c4:	6f697463 	svcvs	0x00697463
 1c8:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
 1cc:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 3c <_Min_Heap_Size-0x1c4>
 1d0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 1d4:	612d7463 			; <UNDEFINED> instruction: 0x612d7463
 1d8:	7361696c 	cmnvc	r1, #108, 18	; 0x1b0000
 1dc:	20676e69 	rsbcs	r6, r7, r9, ror #28
 1e0:	6976662d 	ldmdbvs	r6!, {r0, r2, r3, r5, r9, sl, sp, lr}^
 1e4:	69626973 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
 1e8:	7974696c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 1ec:	6469683d 	strbtvs	r6, [r9], #-2109	; 0xfffff7c3
 1f0:	006e6564 	rsbeq	r6, lr, r4, ror #10
 1f4:	5f434352 	svcpl	0x00434352
 1f8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 1fc:	6d654d00 	stclvs	13, cr4, [r5, #-0]
 200:	4d79726f 	lfmmi	f7, 2, [r9, #-444]!	; 0xfffffe44
 204:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
 208:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 20c:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
 210:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
 214:	5f504d41 	svcpl	0x00504d41
 218:	4d415453 	cfstrdmi	mvd5, [r1, #-332]	; 0xfffffeb4
 21c:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
 220:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
 224:	00524553 	subseq	r4, r2, r3, asr r5
 228:	5f47544f 	svcpl	0x0047544f
 22c:	495f5346 	ldmdbmi	pc, {r1, r2, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
 230:	006e5152 	rsbeq	r5, lr, r2, asr r1
 234:	31424841 	cmpcc	r2, r1, asr #16
 238:	00524e45 	subseq	r4, r2, r5, asr #28
 23c:	47435353 	smlsldmi	r5, r3, r3, r3
 240:	53520052 	cmppl	r2, #82	; 0x52
 244:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
 248:	44003144 	strmi	r3, [r0], #-324	; 0xfffffebc
 24c:	5f32414d 	svcpl	0x0032414d
 250:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
 254:	5f326d61 	svcpl	0x00326d61
 258:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 25c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
 260:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
 264:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
 268:	5f314d49 	svcpl	0x00314d49
 26c:	5f4b5242 	svcpl	0x004b5242
 270:	394d4954 	stmdbcc	sp, {r2, r4, r6, r8, fp, lr}^
 274:	5152495f 	cmppl	r2, pc, asr r9
 278:	6f6c006e 	svcvs	0x006c006e
 27c:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 280:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 284:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 288:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 28c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 290:	414d4400 	cmpmi	sp, r0, lsl #8
 294:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
 298:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
 29c:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
 2a0:	4f006e51 	svcmi	0x00006e51
 2a4:	454b5450 	strbmi	r5, [fp, #-1104]	; 0xfffffbb0
 2a8:	44005259 	strmi	r5, [r0], #-601	; 0xfffffda7
 2ac:	5f31414d 	svcpl	0x0031414d
 2b0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
 2b4:	5f326d61 	svcpl	0x00326d61
 2b8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 2bc:	444f4d00 	strbmi	r4, [pc], #-3328	; 2c4 <_Min_Heap_Size+0xc4>
 2c0:	41005245 	tstmi	r0, r5, asr #4
 2c4:	52334248 	eorspl	r4, r3, #72, 4	; 0x80000004
 2c8:	00525453 	subseq	r5, r2, r3, asr r4
 2cc:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
 2d0:	52490052 	subpl	r0, r9, #82	; 0x52
 2d4:	545f6e51 	ldrbpl	r6, [pc], #-3665	; 2dc <_Min_Heap_Size+0xdc>
 2d8:	00657079 	rsbeq	r7, r5, r9, ror r0
 2dc:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
 2e0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
 2e4:	376d6165 	strbcc	r6, [sp, -r5, ror #2]!
 2e8:	5152495f 	cmppl	r2, pc, asr r9
 2ec:	5355006e 	cmppl	r5, #110	; 0x6e
 2f0:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
 2f4:	5152495f 	cmppl	r2, pc, asr r9
 2f8:	4c46006e 	mcrrmi	0, 6, r0, r6, cr14
 2fc:	5f485341 	svcpl	0x00485341
 300:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 304:	00666544 	rsbeq	r6, r6, r4, asr #10
 308:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
 30c:	43520044 	cmpmi	r2, #68	; 0x44
 310:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 314:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
 318:	32490066 	subcc	r0, r9, #102	; 0x66
 31c:	455f3343 	ldrbmi	r3, [pc, #-835]	; ffffffe1 <_estack+0xdffeffe1>
 320:	52495f52 	subpl	r5, r9, #328	; 0x148
 324:	52006e51 	andpl	r6, r0, #1296	; 0x510
 328:	575f4354 			; <UNDEFINED> instruction: 0x575f4354
 32c:	5f50554b 	svcpl	0x0050554b
 330:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 334:	73795300 	cmnvc	r9, #0, 6
 338:	6b636954 	blvs	18da890 <_Min_Stack_Size+0x18da490>
 33c:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
 340:	00676966 	rsbeq	r6, r7, r6, ror #18
 344:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
 348:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
 34c:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
 350:	4f006e51 	svcmi	0x00006e51
 354:	52435450 	subpl	r5, r3, #80, 8	; 0x50000000
 358:	42484100 	submi	r4, r8, #0, 2
 35c:	524e4533 	subpl	r4, lr, #213909504	; 0xcc00000
 360:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
 364:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
 368:	006e5152 	rsbeq	r5, lr, r2, asr r1
 36c:	6b636974 	blvs	18da944 <_Min_Stack_Size+0x18da544>
 370:	50410073 	subpl	r0, r1, r3, ror r0
 374:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
 378:	49005254 	stmdbmi	r0, {r2, r4, r6, r9, ip, lr}
 37c:	5f324332 	svcpl	0x00324332
 380:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
 384:	006e5152 	rsbeq	r5, lr, r2, asr r1
 388:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
 38c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
 390:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
 394:	41006e51 	tstmi	r0, r1, asr lr
 398:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
 39c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
 3a0:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
 3a4:	2f006e51 	svccs	0x00006e51
 3a8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 3ac:	6d73692f 			; <UNDEFINED> instruction: 0x6d73692f
 3b0:	2f6c696f 	svccs	0x006c696f
 3b4:	6a6f7270 	bvs	1bdcd7c <_Min_Stack_Size+0x1bdc97c>
 3b8:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 3bc:	55434d2f 	strbpl	r4, [r3, #-3375]	; 0xfffff2d1
 3c0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 3c4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 3c8:	575f3130 	smmlarpl	pc, r0, r1, r3	; <UNPREDICTABLE>
 3cc:	74636165 	strbtvc	r6, [r3], #-357	; 0xfffffe9b
 3d0:	616c425f 	cmnvs	ip, pc, asr r2
 3d4:	69506b63 	ldmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
 3d8:	722f6c6c 	eorvc	r6, pc, #108, 24	; 0x6c00
 3dc:	745f7474 	ldrbvc	r7, [pc], #-1140	; 3e4 <_Min_Heap_Size+0x1e4>
 3e0:	6c706d65 	ldclvs	13, cr6, [r0], #-404	; 0xfffffe6c
 3e4:	2f657461 	svccs	0x00657461
 3e8:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
 3ec:	6372532f 	cmnvs	r2, #-1140850688	; 0xbc000000
 3f0:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
 3f4:	00632e6e 	rsbeq	r2, r3, lr, ror #28
 3f8:	31414d44 	cmpcc	r1, r4, asr #26
 3fc:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
 400:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
 404:	5152495f 	cmppl	r2, pc, asr r9
 408:	6f6c006e 	svcvs	0x006c006e
 40c:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 410:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 414:	00746e69 	rsbseq	r6, r4, r9, ror #28
 418:	47445757 	smlsldmi	r5, r4, r7, r7
 41c:	5152495f 	cmppl	r2, pc, asr r9
 420:	4853006e 	ldmdami	r3, {r1, r2, r3, r5, r6}^
 424:	00525343 	subseq	r5, r2, r3, asr #6
 428:	31425041 	cmpcc	r2, r1, asr #32
 42c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 430:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
 434:	535f3241 	cmppl	pc, #268435460	; 0x10000004
 438:	61657274 	smcvs	22308	; 0x5724
 43c:	495f346d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
 440:	006e5152 	rsbeq	r5, lr, r2, asr r1
 444:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
 448:	5f6b6369 	svcpl	0x006b6369
 44c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
 450:	0072656c 	rsbseq	r6, r2, ip, ror #10
 454:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
 458:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
 45c:	43737953 	cmnmi	r3, #1359872	; 0x14c000
 460:	6f546b6c 	svcvs	0x00546b6c
 464:	42003438 	andmi	r3, r0, #56, 8	; 0x38000000
 468:	61467375 	hvcvs	26421	; 0x6735
 46c:	5f746c75 	svcpl	0x00746c75
 470:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 474:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
 478:	52545f31 	subspl	r5, r4, #49, 30	; 0xc4
 47c:	4f435f47 	svcmi	0x00435f47
 480:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 484:	5f31314d 	svcpl	0x0031314d
 488:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 48c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
 490:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
 494:	006e5152 	rsbeq	r5, lr, r2, asr r1
 498:	616c6564 	cmnvs	ip, r4, ror #10
 49c:	736d5f79 	cmnvc	sp, #484	; 0x1e4
 4a0:	6f682f00 	svcvs	0x00682f00
 4a4:	692f656d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	; <UNPREDICTABLE>
 4a8:	696f6d73 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 4ac:	5650006c 	ldrbpl	r0, [r0], -ip, rrx
 4b0:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
 4b4:	41006e51 	tstmi	r0, r1, asr lr
 4b8:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 4bc:	006e5152 	rsbeq	r5, lr, r2, asr r1
 4c0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 4c4:	43490074 	movtmi	r0, #36980	; 0x9074
 4c8:	41005250 	tstmi	r0, r0, asr r2
 4cc:	45324250 	ldrmi	r4, [r2, #-592]!	; 0xfffffdb0
 4d0:	5400524e 	strpl	r5, [r0], #-590	; 0xfffffdb2
 4d4:	5f354d49 	svcpl	0x00354d49
 4d8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 4dc:	42484100 	submi	r4, r8, #0, 2
 4e0:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
 4e4:	4900524e 	stmdbmi	r0, {r1, r2, r3, r6, r9, ip, lr}
 4e8:	5f314332 	svcpl	0x00314332
 4ec:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
 4f0:	006e5152 	rsbeq	r5, lr, r2, asr r1
 4f4:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
 4f8:	00524445 	subseq	r4, r2, r5, asr #8
 4fc:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
 500:	5f6b6369 	svcpl	0x006b6369
 504:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 508:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 50c:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
 510:	6c007469 	cfstrsvs	mvf7, [r0], {105}	; 0x69
 514:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 518:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
 51c:	5300656c 	movwpl	r6, #1388	; 0x56c
 520:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 524:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
 528:	6f6c4365 	svcvs	0x006c4365
 52c:	44006b63 	strmi	r6, [r0], #-2915	; 0xfffff49d
 530:	5f31414d 	svcpl	0x0031414d
 534:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
 538:	5f316d61 	svcpl	0x00316d61
 53c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 540:	63697400 	cmnvs	r9, #0, 8
 544:	4841006b 	stmdami	r1, {r0, r1, r3, r5, r6}^
 548:	53523242 	cmppl	r2, #536870916	; 0x20000004
 54c:	53005254 	movwpl	r5, #596	; 0x254
 550:	00524954 	subseq	r4, r2, r4, asr r9
 554:	41464d4d 	cmpmi	r6, sp, asr #26
 558:	54520052 	ldrbpl	r0, [r2], #-82	; 0xffffffae
 55c:	6c415f43 	mcrrvs	15, 4, r5, r1, cr3
 560:	5f6d7261 	svcpl	0x006d7261
 564:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 568:	53455200 	movtpl	r5, #20992	; 0x5200
 56c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
 570:	52003044 	andpl	r3, r0, #68	; 0x44
 574:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
 578:	31444556 	cmpcc	r4, r6, asr r5
 57c:	53455200 	movtpl	r5, #20992	; 0x5200
 580:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
 584:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
 588:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
 58c:	33444556 	movtcc	r4, #17750	; 0x4556
 590:	53455200 	movtpl	r5, #20992	; 0x5200
 594:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
 598:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
 59c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
 5a0:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
 5a4:	53455200 	movtpl	r5, #20992	; 0x5200
 5a8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
 5ac:	73003644 	movwvc	r3, #1604	; 0x644
 5b0:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 5b4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 5b8:	414d4400 	cmpmi	sp, r0, lsl #8
 5bc:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
 5c0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
 5c4:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
 5c8:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
 5cc:	5f334332 	svcpl	0x00334332
 5d0:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
 5d4:	006e5152 	rsbeq	r5, lr, r2, asr r1
 5d8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
 5dc:	495f3154 	ldmdbmi	pc, {r2, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
 5e0:	006e5152 	rsbeq	r5, lr, r2, asr r1
 5e4:	47474553 	smlsldmi	r4, r7, r3, r5
 5e8:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 5ec:	435f5454 	cmpmi	pc, #84, 8	; 0x54000000
 5f0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 5f4:	42705567 	rsbsmi	r5, r0, #432013312	; 0x19c00000
 5f8:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 5fc:	6f4e0072 	svcvs	0x004e0072
 600:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
 604:	6c62616b 	stfvse	f6, [r2], #-428	; 0xfffffe54
 608:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
 60c:	5152495f 	cmppl	r2, pc, asr r9
 610:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
 614:	535f3241 	cmppl	pc, #268435460	; 0x10000004
 618:	61657274 	smcvs	22308	; 0x5724
 61c:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
 620:	006e5152 	rsbeq	r5, lr, r2, asr r1
 624:	6f697270 	svcvs	0x00697270
 628:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 62c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
 630:	43435f31 	movtmi	r5, #16177	; 0x3f31
 634:	5152495f 	cmppl	r2, pc, asr r9
 638:	544f006e 	strbpl	r0, [pc], #-110	; 640 <_Min_Stack_Size+0x240>
 63c:	52455059 	subpl	r5, r5, #89	; 0x59
 640:	414d4400 	cmpmi	sp, r0, lsl #8
 644:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
 648:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
 64c:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
 650:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
 654:	31495458 	cmpcc	r9, r8, asr r4
 658:	5152495f 	cmppl	r2, pc, asr r9
 65c:	564e006e 	strbpl	r0, [lr], -lr, rrx
 660:	545f4349 	ldrbpl	r4, [pc], #-841	; 668 <_Min_Stack_Size+0x268>
 664:	00657079 	rsbeq	r7, r5, r9, ror r0
 668:	5f424353 	svcpl	0x00424353
 66c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 670:	41464200 	mrsmi	r4, (UNDEF: 102)
 674:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 678:	4746434c 	strbmi	r4, [r6, -ip, asr #6]
 67c:	50470052 	subpl	r0, r7, r2, asr r0
 680:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 688 <_Min_Stack_Size+0x288>
 684:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
 688:	56006665 	strpl	r6, [r0], -r5, ror #12
 68c:	00524f54 	subseq	r4, r2, r4, asr pc
 690:	31433249 	cmpcc	r3, r9, asr #4
 694:	5f52455f 	svcpl	0x0052455f
 698:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 69c:	41535500 	cmpmi	r3, r0, lsl #10
 6a0:	5f365452 	svcpl	0x00365452
 6a4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 6a8:	73795300 	cmnvc	r9, #0, 6
 6ac:	6b636954 	blvs	18dac04 <_Min_Stack_Size+0x18da804>
 6b0:	5152495f 	cmppl	r2, pc, asr r9
 6b4:	4841006e 	stmdami	r1, {r1, r2, r3, r5, r6}^
 6b8:	504c3342 	subpl	r3, ip, r2, asr #6
 6bc:	00524e45 	subseq	r4, r2, r5, asr #28
 6c0:	52534349 	subspl	r4, r3, #603979777	; 0x24000001
 6c4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
 6c8:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
 6cc:	41006e51 	tstmi	r0, r1, asr lr
 6d0:	45324248 	ldrmi	r4, [r2, #-584]!	; 0xfffffdb8
 6d4:	4400524e 	strmi	r5, [r0], #-590	; 0xfffffdb2
 6d8:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
 6dc:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 6e0:	5f726f74 	svcpl	0x00726f74
 6e4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 6e8:	4c4c5000 	marmi	acc0, r5, ip
 6ec:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
 6f0:	00524746 	subseq	r4, r2, r6, asr #14
 6f4:	67617355 			; <UNDEFINED> instruction: 0x67617355
 6f8:	75614665 	strbvc	r4, [r1, #-1637]!	; 0xfffff99b
 6fc:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 700:	006e5152 	rsbeq	r5, lr, r2, asr r1
 704:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 708:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 70c:	61686320 	cmnvs	r8, r0, lsr #6
 710:	5f5f0072 	svcpl	0x005f0072
 714:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 718:	745f3233 	ldrbvc	r3, [pc], #-563	; 720 <_Min_Stack_Size+0x320>
 71c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
 720:	355f3949 	ldrbcc	r3, [pc, #-2377]	; fffffddf <_estack+0xdffefddf>
 724:	5152495f 	cmppl	r2, pc, asr r9
 728:	5653006e 	ldrbpl	r0, [r3], -lr, rrx
 72c:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
 730:	5152495f 	cmppl	r2, pc, asr r9
 734:	4349006e 	movtmi	r0, #36974	; 0x906e
 738:	44005245 	strmi	r5, [r0], #-581	; 0xfffffdbb
 73c:	5f32414d 	svcpl	0x0032414d
 740:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
 744:	5f336d61 	svcpl	0x00336d61
 748:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 74c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
 750:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
 754:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
 758:	00524241 	subseq	r4, r2, r1, asr #4
 75c:	47474553 	smlsldmi	r4, r7, r3, r5
 760:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 764:	575f5454 			; <UNDEFINED> instruction: 0x575f5454
 768:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 76c:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
 770:	4f00676e 	svcmi	0x0000676e
 774:	52435450 	subpl	r5, r3, #80, 8	; 0x50000000
 778:	5f5f0031 	svcpl	0x005f0031
 77c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 780:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 784:	31414d44 	cmpcc	r1, r4, asr #26
 788:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
 78c:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
 790:	5152495f 	cmppl	r2, pc, asr r9
 794:	6873006e 	ldmdavs	r3!, {r1, r2, r3, r5, r6}^
 798:	2074726f 	rsbscs	r7, r4, pc, ror #4
 79c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 7a0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 7a4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 7a8:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
 7ac:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
 7b0:	006e5152 	rsbeq	r5, lr, r2, asr r1
 7b4:	6e69616d 	powvsez	f6, f1, #5.0
 7b8:	50534900 	subspl	r4, r3, r0, lsl #18
 7bc:	53490052 	movtpl	r0, #36946	; 0x9052
 7c0:	52005241 	andpl	r5, r0, #268435460	; 0x10000004
 7c4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
 7c8:	37444556 	smlsldcc	r4, r4, r6, r5	; <UNPREDICTABLE>
 7cc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
 7d0:	50555f31 	subspl	r5, r5, r1, lsr pc
 7d4:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
 7d8:	495f3031 	ldmdbmi	pc, {r0, r4, r5, ip, sp}^	; <UNPREDICTABLE>
 7dc:	006e5152 	rsbeq	r5, lr, r2, asr r1
 7e0:	5f555046 	svcpl	0x00555046
 7e4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
 7e8:	73795300 	cmnvc	r9, #0, 6
 7ec:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
 7f0:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
 7f4:	6b636f6c 	blvs	18dc5ac <_Min_Stack_Size+0x18dc1ac>
 7f8:	61647055 	qdsubvs	r7, r5, r4
 7fc:	41006574 	tstmi	r0, r4, ror r5
 800:	52314248 	eorspl	r4, r1, #72, 4	; 0x80000004
 804:	00525453 	subseq	r5, r2, r3, asr r4
 808:	524b434c 	subpl	r4, fp, #76, 6	; 0x30000001
 80c:	52544300 	subspl	r4, r4, #0, 6
 810:	7953004c 	ldmdbvc	r3, {r2, r3, r6}^
 814:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
 818:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
 81c:	6c6c7000 	stclvs	0, cr7, [ip], #-0
 820:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
 824:	70006563 	andvc	r6, r0, r3, ror #10
 828:	006d6c6c 	rsbeq	r6, sp, ip, ror #24
 82c:	706c6c70 	rsbvc	r6, ip, r0, ror ip
 830:	42504100 	subsmi	r4, r0, #0, 2
 834:	73657250 	cmnvc	r5, #80, 4
 838:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
 83c:	7000656c 	andvc	r6, r0, ip, ror #10
 840:	63766c6c 	cmnvs	r6, #108, 24	; 0x6c00
 844:	682f006f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r6}	; <UNPREDICTABLE>
 848:	2f656d6f 	svccs	0x00656d6f
 84c:	6f6d7369 	svcvs	0x006d7369
 850:	702f6c69 	eorvc	r6, pc, r9, ror #24
 854:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
 858:	2f737463 	svccs	0x00737463
 85c:	2f55434d 	svccs	0x0055434d
 860:	334d5453 	movtcc	r5, #54355	; 0xd453
 864:	30344632 	eorscc	r4, r4, r2, lsr r6
 868:	65575f31 	ldrbvs	r5, [r7, #-3889]	; 0xfffff0cf
 86c:	5f746361 	svcpl	0x00746361
 870:	63616c42 	cmnvs	r1, #16896	; 0x4200
 874:	6c69506b 	stclvs	0, cr5, [r9], #-428	; 0xfffffe54
 878:	74722f6c 	ldrbtvc	r2, [r2], #-3948	; 0xfffff094
 87c:	65745f74 	ldrbvs	r5, [r4, #-3956]!	; 0xfffff08c
 880:	616c706d 	cmnvs	ip, sp, rrx
 884:	432f6574 			; <UNDEFINED> instruction: 0x432f6574
 888:	2f65726f 	svccs	0x0065726f
 88c:	2f637253 	svccs	0x00637253
 890:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 894:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 898:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 89c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 8a0:	4100632e 	tstmi	r0, lr, lsr #6
 8a4:	72504248 	subsvc	r4, r0, #72, 4	; 0x80000004
 8a8:	54637365 	strbtpl	r7, [r3], #-869	; 0xfffffc9b
 8ac:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8b0:	6f682f00 	svcvs	0x00682f00
 8b4:	692f656d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	; <UNPREDICTABLE>
 8b8:	696f6d73 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 8bc:	72702f6c 	rsbsvc	r2, r0, #108, 30	; 0x1b0
 8c0:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
 8c4:	4d2f7374 	stcmi	3, cr7, [pc, #-464]!	; 6fc <_Min_Stack_Size+0x2fc>
 8c8:	532f5543 			; <UNDEFINED> instruction: 0x532f5543
 8cc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
 8d0:	31303446 	teqcc	r0, r6, asr #8
 8d4:	6165575f 	cmnvs	r5, pc, asr r7
 8d8:	425f7463 	subsmi	r7, pc, #1660944384	; 0x63000000
 8dc:	6b63616c 	blvs	18d8e94 <_Min_Stack_Size+0x18d8a94>
 8e0:	6c6c6950 			; <UNDEFINED> instruction: 0x6c6c6950
 8e4:	7474722f 	ldrbtvc	r7, [r4], #-559	; 0xfffffdd1
 8e8:	6d65745f 	cfstrdvs	mvd7, [r5, #-380]!	; 0xfffffe84
 8ec:	74616c70 	strbtvc	r6, [r1], #-3184	; 0xfffff390
 8f0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
 8f4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 8f8:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xfffff090
 8fc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 900:	78313034 	ldmdavc	r1!, {r2, r4, r5, ip, sp}
 904:	00732e63 	rsbseq	r2, r3, r3, ror #28
 908:	20554e47 	subscs	r4, r5, r7, asr #28
 90c:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
 910:	0037332e 	eorseq	r3, r7, lr, lsr #6
 914:	47474553 	smlsldmi	r4, r7, r3, r5
 918:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 91c:	485f5454 	ldmdami	pc, {r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
 920:	61447361 	cmpvs	r4, r1, ror #6
 924:	70556174 	subsvc	r6, r5, r4, ror r1
 928:	78614d00 	stmdavc	r1!, {r8, sl, fp, lr}^
 92c:	446d754e 	strbtmi	r7, [sp], #-1358	; 0xfffffab2
 930:	426e776f 	rsbmi	r7, lr, #29097984	; 0x1bc0000
 934:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 938:	73007372 	movwvc	r7, #882	; 0x372
 93c:	5f657a69 	svcpl	0x00657a69
 940:	754e0074 	strbvc	r0, [lr, #-116]	; 0xffffff8c
 944:	7479426d 	ldrbtvc	r4, [r9], #-621	; 0xfffffd93
 948:	53007365 	movwpl	r7, #869	; 0x365
 94c:	45474745 	strbmi	r4, [r7, #-1861]	; 0xfffff8bb
 950:	54525f52 	ldrbpl	r5, [r2], #-3922	; 0xfffff0ae
 954:	55425f54 	strbpl	r5, [r2, #-3924]	; 0xfffff0ac
 958:	52454646 	subpl	r4, r5, #73400320	; 0x4600000
 95c:	0050555f 	subseq	r5, r0, pc, asr r5
 960:	47474553 	smlsldmi	r4, r7, r3, r5
 964:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 968:	575f5454 			; <UNDEFINED> instruction: 0x575f5454
 96c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 970:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
 974:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 978:	6f4e7265 	svcvs	0x004e7265
 97c:	6b636f4c 	blvs	18dc6b4 <_Min_Stack_Size+0x18dc2b4>
 980:	47455300 	strbmi	r5, [r5, -r0, lsl #6]
 984:	5f524547 	svcpl	0x00524547
 988:	5f545452 	svcpl	0x00545452
 98c:	46465542 	strbmi	r5, [r6], -r2, asr #10
 990:	445f5245 	ldrbmi	r5, [pc], #-581	; 998 <_Min_Stack_Size+0x598>
 994:	004e574f 	subeq	r5, lr, pc, asr #14
 998:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
 99c:	6f4e6574 	svcvs	0x004e6574
 9a0:	63656843 	cmnvs	r5, #4390912	; 0x430000
 9a4:	4553006b 	ldrbmi	r0, [r3, #-107]	; 0xffffff95
 9a8:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
 9ac:	5454525f 	ldrbpl	r5, [r4], #-607	; 0xfffffda1
 9b0:	7475505f 	ldrbtvc	r5, [r5], #-95	; 0xffffffa1
 9b4:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
 9b8:	47455300 	strbmi	r5, [r5, -r0, lsl #6]
 9bc:	5f524547 	svcpl	0x00524547
 9c0:	5f545452 	svcpl	0x00545452
 9c4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 9c8:	75427055 	strbvc	r7, [r2, #-85]	; 0xffffffab
 9cc:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 9d0:	6f4c6f4e 	svcvs	0x004c6f4e
 9d4:	53006b63 	movwpl	r6, #2915	; 0xb63
 9d8:	45474745 	strbmi	r4, [r7, #-1861]	; 0xfffff8bb
 9dc:	54525f52 	ldrbpl	r5, [r2], #-3922	; 0xfffff0ae
 9e0:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xfffff0ac
 9e4:	61764174 	cmnvs	r6, r4, ror r1
 9e8:	72576c69 	subsvc	r6, r7, #26880	; 0x6900
 9ec:	53657469 	cmnpl	r5, #1761607680	; 0x69000000
 9f0:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
 9f4:	47455300 	strbmi	r5, [r5, -r0, lsl #6]
 9f8:	5f524547 	svcpl	0x00524547
 9fc:	5f545452 	svcpl	0x00545452
 a00:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 a04:	75427055 	strbvc	r7, [r2, #-85]	; 0xffffffab
 a08:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 a0c:	47455300 	strbmi	r5, [r5, -r0, lsl #6]
 a10:	5f524547 	svcpl	0x00524547
 a14:	5f545452 	svcpl	0x00545452
 a18:	43747550 	cmnmi	r4, #80, 10	; 0x14000000
 a1c:	53726168 	cmnpl	r2, #104, 2
 a20:	0070696b 	rsbseq	r6, r0, fp, ror #18
 a24:	426d754e 	rsbmi	r7, sp, #327155712	; 0x13800000
 a28:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 a2c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 a30:	6f447000 	svcvs	0x00447000
 a34:	53006e77 	movwpl	r6, #3703	; 0xe77
 a38:	45474745 	strbmi	r4, [r7, #-1861]	; 0xfffff8bb
 a3c:	54525f52 	ldrbpl	r5, [r2], #-3922	; 0xfffff0ae
 a40:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xfffff0ac
 a44:	74794274 	ldrbtvc	r4, [r9], #-628	; 0xfffffd8c
 a48:	6e497365 	cdpvs	3, 4, cr7, cr9, cr5, {3}
 a4c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 a50:	53007265 	movwpl	r7, #613	; 0x265
 a54:	45474745 	strbmi	r4, [r7, #-1861]	; 0xfffff8bb
 a58:	54525f52 	ldrbpl	r5, [r2], #-3922	; 0xfffff0ae
 a5c:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
 a60:	53007469 	movwpl	r7, #1129	; 0x469
 a64:	45474745 	strbmi	r4, [r7, #-1861]	; 0xfffff8bb
 a68:	54525f52 	ldrbpl	r5, [r2], #-3922	; 0xfffff0ae
 a6c:	72575f54 	subsvc	r5, r7, #84, 30	; 0x150
 a70:	57657469 	strbpl	r7, [r5, -r9, ror #8]!
 a74:	4f687469 	svcmi	0x00687469
 a78:	77726576 			; <UNDEFINED> instruction: 0x77726576
 a7c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 a80:	6f4c6f4e 	svcvs	0x004c6f4e
 a84:	5f006b63 	svcpl	0x00006b63
 a88:	70556361 	subsvc	r6, r5, r1, ror #6
 a8c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 a90:	5f007265 	svcpl	0x00007265
 a94:	47474553 	smlsldmi	r4, r7, r3, r5
 a98:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 a9c:	70005454 	andvc	r5, r0, r4, asr r4
 aa0:	00747344 	rsbseq	r7, r4, r4, asr #6
 aa4:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
 aa8:	53007970 	movwpl	r7, #2416	; 0x970
 aac:	45474745 	strbmi	r4, [r7, #-1861]	; 0xfffff8bb
 ab0:	54525f52 	ldrbpl	r5, [r2], #-3922	; 0xfffff0ae
 ab4:	65525f54 	ldrbvs	r5, [r2, #-3924]	; 0xfffff0ac
 ab8:	6f4e6461 	svcvs	0x004e6461
 abc:	6b636f4c 	blvs	18dc7f4 <_Min_Stack_Size+0x18dc3f4>
 ac0:	61724600 	cmnvs	r2, r0, lsl #12
 ac4:	6e654c67 	cdpvs	12, 6, cr4, cr5, cr7, {3}
 ac8:	47455300 	strbmi	r5, [r5, -r0, lsl #6]
 acc:	5f524547 	svcpl	0x00524547
 ad0:	5f545452 	svcpl	0x00545452
 ad4:	4b746547 	blmi	1d19ff8 <_Min_Stack_Size+0x1d19bf8>
 ad8:	70007965 	andvc	r7, r0, r5, ror #18
 adc:	61746144 	cmnvs	r4, r4, asr #2
 ae0:	4f645200 	svcmi	0x00645200
 ae4:	70006666 	andvc	r6, r0, r6, ror #12
 ae8:	00637253 	rsbeq	r7, r3, r3, asr r2
 aec:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
 af0:	53006e65 	movwpl	r6, #3685	; 0xe65
 af4:	45474745 	strbmi	r4, [r7, #-1861]	; 0xfffff8bb
 af8:	54525f52 	ldrbpl	r5, [r2], #-3922	; 0xfffff0ae
 afc:	6f435f54 	svcvs	0x00435f54
 b00:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 b04:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
 b08:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 b0c:	70007265 	andvc	r7, r0, r5, ror #4
 b10:	43545452 	cmpmi	r4, #1375731712	; 0x52000000
 b14:	614d0042 	cmpvs	sp, r2, asr #32
 b18:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	; 0xfffffe20
 b1c:	75427055 	strbvc	r7, [r2, #-85]	; 0xffffffab
 b20:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 b24:	45530073 	ldrbmi	r0, [r3, #-115]	; 0xffffff8d
 b28:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
 b2c:	5454525f 	ldrbpl	r5, [r4], #-607	; 0xfffffda1
 b30:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
 b34:	6f446574 	svcvs	0x00446574
 b38:	75426e77 	strbvc	r6, [r2, #-3703]	; 0xfffff189
 b3c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 b40:	47455300 	strbmi	r5, [r5, -r0, lsl #6]
 b44:	5f524547 	svcpl	0x00524547
 b48:	5f545452 	svcpl	0x00545452
 b4c:	54746553 	ldrbtpl	r6, [r4], #-1363	; 0xfffffaad
 b50:	696d7265 	stmdbvs	sp!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 b54:	006c616e 	rsbeq	r6, ip, lr, ror #2
 b58:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 b5c:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
 b60:	00786564 	rsbseq	r6, r8, r4, ror #10
 b64:	47474553 	smlsldmi	r4, r7, r3, r5
 b68:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 b6c:	485f5454 	ldmdami	pc, {r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
 b70:	61447361 	cmpvs	r4, r1, ror #6
 b74:	73006174 	movwvc	r6, #372	; 0x174
 b78:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 b7c:	6d754e00 	ldclvs	14, cr4, [r5, #-0]
 b80:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
 b84:	69725773 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
 b88:	6e657474 	mcrvs	4, 3, r7, cr5, cr4, {3}
 b8c:	47455300 	strbmi	r5, [r5, -r0, lsl #6]
 b90:	5f524547 	svcpl	0x00524547
 b94:	5f545452 	svcpl	0x00545452
 b98:	46746553 			; <UNDEFINED> instruction: 0x46746553
 b9c:	7367616c 	cmnvc	r7, #108, 2
 ba0:	75427055 	strbvc	r7, [r2, #-85]	; 0xffffffab
 ba4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 ba8:	6d754e00 	ldclvs	14, cr4, [r5, #-0]
 bac:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
 bb0:	4f744173 	svcmi	0x00744173
 bb4:	0065636e 	rsbeq	r6, r5, lr, ror #6
 bb8:	47474553 	smlsldmi	r4, r7, r3, r5
 bbc:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 bc0:	435f5454 	cmpmi	pc, #84, 8	; 0x54000000
 bc4:	52700042 	rsbspl	r0, r0, #66	; 0x42
 bc8:	00676e69 	rsbeq	r6, r7, r9, ror #28
 bcc:	426d754e 	rsbmi	r7, sp, #327155712	; 0x13800000
 bd0:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 bd4:	72576f54 	subsvc	r6, r7, #84, 30	; 0x150
 bd8:	00657469 	rsbeq	r7, r5, r9, ror #8
 bdc:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 be0:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
 be4:	5300657a 	movwpl	r6, #1402	; 0x57a
 be8:	45474745 	strbmi	r4, [r7, #-1861]	; 0xfffff8bb
 bec:	54525f52 	ldrbpl	r5, [r2], #-3922	; 0xfffff0ae
 bf0:	72575f54 	subsvc	r5, r7, #84, 30	; 0x150
 bf4:	00657469 	rsbeq	r7, r5, r9, ror #8
 bf8:	4463615f 	strbtmi	r6, [r3], #-351	; 0xfffffea1
 bfc:	426e776f 	rsbmi	r7, lr, #29097984	; 0x1bc0000
 c00:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 c04:	45530072 	ldrbmi	r0, [r3, #-114]	; 0xffffff8e
 c08:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
 c0c:	5454525f 	ldrbpl	r5, [r4], #-607	; 0xfffffda1
 c10:	6c6c415f 	stfvse	f4, [ip], #-380	; 0xfffffe84
 c14:	6f44636f 	svcvs	0x0044636f
 c18:	75426e77 	strbvc	r6, [r2, #-3703]	; 0xfffff189
 c1c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 c20:	7a695300 	bvc	1a55828 <_Min_Stack_Size+0x1a55428>
 c24:	42664f65 	rsbmi	r4, r6, #404	; 0x194
 c28:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 c2c:	45530072 	ldrbmi	r0, [r3, #-114]	; 0xffffff8e
 c30:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
 c34:	5454525f 	ldrbpl	r5, [r4], #-607	; 0xfffffda1
 c38:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
 c3c:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 c40:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
 c44:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 c48:	61007265 	tstvs	r0, r5, ror #4
 c4c:	00444963 	subeq	r4, r4, r3, ror #18
 c50:	47474553 	smlsldmi	r4, r7, r3, r5
 c54:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 c58:	415f5454 	cmpmi	pc, r4, asr r4	; <UNPREDICTABLE>
 c5c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 c60:	75427055 	strbvc	r7, [r2, #-85]	; 0xffffffab
 c64:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 c68:	45535f00 	ldrbmi	r5, [r3, #-3840]	; 0xfffff100
 c6c:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
 c70:	5454525f 	ldrbpl	r5, [r4], #-607	; 0xfffffda1
 c74:	6f4c5f5f 	svcvs	0x004c5f5f
 c78:	74536b63 	ldrbvc	r6, [r3], #-2915	; 0xfffff49d
 c7c:	00657461 	rsbeq	r7, r5, r1, ror #8
 c80:	47474553 	smlsldmi	r4, r7, r3, r5
 c84:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 c88:	535f5454 	cmppl	pc, #84, 8	; 0x54000000
 c8c:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
 c90:	44736761 	ldrbtmi	r6, [r3], #-1889	; 0xfffff89f
 c94:	426e776f 	rsbmi	r7, lr, #29097984	; 0x1bc0000
 c98:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 c9c:	45530072 	ldrbmi	r0, [r3, #-114]	; 0xffffff8e
 ca0:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
 ca4:	5454525f 	ldrbpl	r5, [r4], #-607	; 0xfffffda1
 ca8:	6165525f 	cmnvs	r5, pc, asr r2
 cac:	44610064 	strbtmi	r0, [r1], #-100	; 0xffffff9c
 cb0:	006e776f 	rsbeq	r7, lr, pc, ror #14
 cb4:	47474553 	smlsldmi	r4, r7, r3, r5
 cb8:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 cbc:	575f5454 			; <UNDEFINED> instruction: 0x575f5454
 cc0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 cc4:	6f4c6f4e 	svcvs	0x004c6f4e
 cc8:	2f006b63 	svccs	0x00006b63
 ccc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 cd0:	6d73692f 			; <UNDEFINED> instruction: 0x6d73692f
 cd4:	2f6c696f 	svccs	0x006c696f
 cd8:	6a6f7270 	bvs	1bdd6a0 <_Min_Stack_Size+0x1bdd2a0>
 cdc:	73746365 	cmnvc	r4, #-1811939327	; 0x94000001
 ce0:	55434d2f 	strbpl	r4, [r3, #-3375]	; 0xfffff2d1
 ce4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
 ce8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 cec:	575f3130 	smmlarpl	pc, r0, r1, r3	; <UNPREDICTABLE>
 cf0:	74636165 	strbtvc	r6, [r3], #-357	; 0xfffffe9b
 cf4:	616c425f 	cmnvs	ip, pc, asr r2
 cf8:	69506b63 	ldmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
 cfc:	722f6c6c 	eorvc	r6, pc, #108, 24	; 0x6c00
 d00:	745f7474 	ldrbvc	r7, [pc], #-1140	; d08 <_Min_Stack_Size+0x908>
 d04:	6c706d65 	ldclvs	13, cr6, [r0], #-404	; 0xfffffe6c
 d08:	2f657461 	svccs	0x00657461
 d0c:	2f545452 	svccs	0x00545452
 d10:	2f637253 	svccs	0x00637253
 d14:	47474553 	smlsldmi	r4, r7, r3, r5
 d18:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 d1c:	632e5454 			; <UNDEFINED> instruction: 0x632e5454
 d20:	6f445f00 	svcvs	0x00445f00
 d24:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
 d28:	72575f00 	subsvc	r5, r7, #0, 30
 d2c:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
 d30:	6b636f6c 	blvs	18dcae8 <_Min_Stack_Size+0x18dc6e8>
 d34:	00676e69 	rsbeq	r6, r7, r9, ror #28
 d38:	47474553 	smlsldmi	r4, r7, r3, r5
 d3c:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 d40:	535f5454 	cmppl	pc, #84, 8	; 0x54000000
 d44:	614e7465 	cmpvs	lr, r5, ror #8
 d48:	7055656d 	subsvc	r6, r5, sp, ror #10
 d4c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 d50:	46007265 	strmi	r7, [r0], -r5, ror #4
 d54:	7367616c 	cmnvc	r7, #108, 2
 d58:	61764100 	cmnvs	r6, r0, lsl #2
 d5c:	53006c69 	movwpl	r6, #3177	; 0xc69
 d60:	45474745 	strbmi	r4, [r7, #-1861]	; 0xfffff8bb
 d64:	54525f52 	ldrbpl	r5, [r2], #-3922	; 0xfffff0ae
 d68:	75505f54 	ldrbvc	r5, [r0, #-3924]	; 0xfffff0ac
 d6c:	61684374 	smcvs	33844	; 0x8434
 d70:	696b5372 	stmdbvs	fp!, {r1, r4, r5, r6, r8, r9, ip, lr}^
 d74:	4c6f4e70 	stclmi	14, cr4, [pc], #-448	; bbc <_Min_Stack_Size+0x7bc>
 d78:	006b636f 	rsbeq	r6, fp, pc, ror #6
 d7c:	6e49615f 	mcrvs	1, 2, r6, cr9, cr15, {2}
 d80:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
 d84:	45530072 	ldrbmi	r0, [r3, #-114]	; 0xffffff8e
 d88:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
 d8c:	5454525f 	ldrbpl	r5, [r4], #-607	; 0xfffffda1
 d90:	7265545f 	rsbvc	r5, r5, #1593835520	; 0x5f000000
 d94:	616e696d 	cmnvs	lr, sp, ror #18
 d98:	74754f6c 	ldrbtvc	r4, [r5], #-3948	; 0xfffff094
 d9c:	6d754e00 	ldclvs	14, cr4, [r5, #-0]
 da0:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
 da4:	6d655273 	sfmvs	f5, 2, [r5, #-460]!	; 0xfffffe34
 da8:	63415f00 	movtvs	r5, #7936	; 0x1f00
 dac:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 db0:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
 db4:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
 db8:	6d656d00 	stclvs	13, cr6, [r5, #-0]
 dbc:	00746573 	rsbseq	r6, r4, r3, ror r5
 dc0:	736f505f 	cmnvc	pc, #95	; 0x5f
 dc4:	72655474 	rsbvc	r5, r5, #116, 8	; 0x74000000
 dc8:	616e696d 	cmnvs	lr, sp, ror #18
 dcc:	6977536c 	ldmdbvs	r7!, {r2, r3, r5, r6, r8, r9, ip, lr}^
 dd0:	00686374 	rsbeq	r6, r8, r4, ror r3
 dd4:	6554615f 	ldrbvs	r6, [r4, #-351]	; 0xfffffea1
 dd8:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
 ddc:	64496c61 	strbvs	r6, [r9], #-3169	; 0xfffff39f
 de0:	54527000 	ldrbpl	r7, [r2], #-0
 de4:	49424354 	stmdbmi	r2, {r2, r4, r6, r8, r9, lr}^
 de8:	0074696e 	rsbseq	r6, r4, lr, ror #18
 dec:	664f7257 			; <UNDEFINED> instruction: 0x664f7257
 df0:	45530066 	ldrbmi	r0, [r3, #-102]	; 0xffffff9a
 df4:	52454747 	subpl	r4, r5, #18612224	; 0x11c0000
 df8:	5454525f 	ldrbpl	r5, [r4], #-607	; 0xfffffda1
 dfc:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
 e00:	79654b74 	stmdbvc	r5!, {r2, r4, r5, r6, r8, r9, fp, lr}^
 e04:	61745300 	cmnvs	r4, r0, lsl #6
 e08:	00737574 	rsbseq	r7, r3, r4, ror r5
 e0c:	47474553 	smlsldmi	r4, r7, r3, r5
 e10:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
 e14:	485f5454 	ldmdami	pc, {r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
 e18:	654b7361 	strbvs	r7, [fp, #-865]	; 0xfffffc9f
 e1c:	Address 0x0000000000000e1c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0924>
   4:	72412820 	subvc	r2, r1, #32, 16	; 0x200000
   8:	52206863 	eorpl	r6, r0, #6488064	; 0x630000
  INIT();
   c:	736f7065 	cmnvc	pc, #101	; 0x65
  10:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
  14:	31202979 			; <UNDEFINED> instruction: 0x31202979
  18:	2e322e31 	mrccs	14, 1, r2, cr2, cr1, {1}
  1c:	Address 0x000000000000001c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
  INIT();
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000024 	andeq	r0, r0, r4, lsr #32
  14:	00000000 	andeq	r0, r0, r0
  18:	080003a8 	stmdaeq	r0, {r3, r5, r7, r8, r9}
  1c:	00000054 	andeq	r0, r0, r4, asr r0
  if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
  20:	87040e41 	strhi	r0, [r4, -r1, asr #28]
    pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  24:	100e4101 	andne	r4, lr, r1, lsl #2
    FragLen = STRLEN(s);
  28:	5f070d41 	svcpl	0x00070d41
  2c:	0d41040e 	cfstrdeq	mvd0, [r1, #-56]	; 0xffffffc8
    SEGGER_RTT_LOCK();
  30:	0ec7420d 	cdpeq	2, 12, cr4, cr7, cr13, {0}
  34:	00000000 	andeq	r0, r0, r0
  38:	00000020 	andeq	r0, r0, r0, lsr #32
  3c:	00000000 	andeq	r0, r0, r0
    Avail = _GetAvailWriteSpace(pRing);
  40:	080003fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9}
  44:	00000044 	andeq	r0, r0, r4, asr #32
    switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
  48:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  4c:	41018e02 	tstmi	r1, r2, lsl #28
  50:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  54:	080e5a07 	stmdaeq	lr, {r0, r1, r2, r9, fp, ip, lr}
  58:	000d0d41 	andeq	r0, sp, r1, asr #26
  5c:	00000024 	andeq	r0, r0, r4, lsr #32
      if (Avail < (FragLen + 4u)) {
  60:	00000000 	andeq	r0, r0, r0
  64:	08000440 	stmdaeq	r0, {r6, sl}
  68:	00000030 	andeq	r0, r0, r0, lsr r0
        Status = 0;
  6c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
        _PostTerminalSwitch(pRing, TerminalId);
  70:	180e4101 	stmdane	lr, {r0, r8, lr}
  74:	4f070d41 	svcmi	0x00070d41
  78:	0d41040e 	cfstrdeq	mvd0, [r1, #-56]	; 0xffffffc8
        Status = (int)_WriteBlocking(pRing, s, FragLen);
  7c:	0ec7420d 	cdpeq	2, 12, cr4, cr7, cr13, {0}
  80:	00000000 	andeq	r0, r0, r0
  84:	0000001c 	andeq	r0, r0, ip, lsl r0
        _PostTerminalSwitch(pRing, _ActiveTerminal);
  88:	00000000 	andeq	r0, r0, r0
  8c:	08000470 	stmdaeq	r0, {r4, r5, r6, sl}
  90:	0000004c 	andeq	r0, r0, ip, asr #32
      break;
  94:	87040e41 	strhi	r0, [r4, -r1, asr #28]
      if (Avail < 4u) {
  98:	070d4101 	streq	r4, [sp, -r1, lsl #2]
        Status = -1;
  9c:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
  a0:	00000ec7 	andeq	r0, r0, r7, asr #29
        _PostTerminalSwitch(pRing, TerminalId);
  a4:	0000001c 	andeq	r0, r0, ip, lsl r0
  a8:	00000000 	andeq	r0, r0, r0
  ac:	080004bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl}
        Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
  b0:	00000108 	andeq	r0, r0, r8, lsl #2
  b4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
  b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  bc:	0d0d7b02 	vstreq	d7, [sp, #-8]
  c0:	000ec742 	andeq	ip, lr, r2, asr #14
  c4:	0000001c 	andeq	r0, r0, ip, lsl r0
        _PostTerminalSwitch(pRing, _ActiveTerminal);
  c8:	00000000 	andeq	r0, r0, r0
  cc:	080005c4 	stmdaeq	r0, {r2, r6, r7, r8, sl}
  d0:	00000084 	andeq	r0, r0, r4, lsl #1
      break;
  d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      _PostTerminalSwitch(pRing, TerminalId);
  d8:	41018e02 	tstmi	r1, r2, lsl #28
  dc:	0c41100e 	mcrreq	0, 0, r1, r1, cr14
      Status = (int)_WriteBlocking(pRing, s, FragLen);
  e0:	00000807 	andeq	r0, r0, r7, lsl #16
  e4:	0000001c 	andeq	r0, r0, ip, lsl r0
  e8:	00000000 	andeq	r0, r0, r0
  ec:	08000648 	stmdaeq	r0, {r3, r6, r9, sl}
      _PostTerminalSwitch(pRing, _ActiveTerminal);
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	87040e41 	strhi	r0, [r4, -r1, asr #28]
  f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
      Status = -1;
  fc:	420d0d47 	andmi	r0, sp, #4544	; 0x11c0
 100:	00000ec7 	andeq	r0, r0, r7, asr #29
    SEGGER_RTT_UNLOCK();
 104:	0000000c 	andeq	r0, r0, ip
 108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    Status = -1;
 10c:	7c020001 	stcvc	0, cr0, [r2], {1}
 110:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000104 	andeq	r0, r0, r4, lsl #2
 11c:	08000664 	stmdaeq	r0, {r2, r5, r6, r9, sl}
 120:	00000024 	andeq	r0, r0, r4, lsr #32
 124:	87040e41 	strhi	r0, [r4, -r1, asr #28]
 128:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 12c:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
 130:	00000ec7 	andeq	r0, r0, r7, asr #29
 134:	00000024 	andeq	r0, r0, r4, lsr #32
 138:	00000104 	andeq	r0, r0, r4, lsl #2
 13c:	08000688 	stmdaeq	r0, {r3, r7, r9, sl}
 140:	00000100 	andeq	r0, r0, r0, lsl #2
 144:	87040e41 	strhi	r0, [r4, -r1, asr #28]
 148:	200e4101 	andcs	r4, lr, r1, lsl #2
 14c:	02070d41 	andeq	r0, r7, #4160	; 0x1040
 150:	41040e6f 	tstmi	r4, pc, ror #28
 154:	c7420d0d 	strbgt	r0, [r2, -sp, lsl #26]
 158:	0000000e 	andeq	r0, r0, lr
 15c:	0000000c 	andeq	r0, r0, ip
 160:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 164:	7c020001 	stcvc	0, cr0, [r2], {1}
 168:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 16c:	00000020 	andeq	r0, r0, r0, lsr #32
 170:	0000015c 	andeq	r0, r0, ip, asr r1
 174:	080007dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl}
 178:	000000b4 	strheq	r0, [r0], -r4
 17c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 180:	41018e02 	tstmi	r1, r2, lsl #28
 184:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 188:	0e4b0207 	cdpeq	2, 4, cr0, cr11, cr7, {0}
 18c:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 190:	00000020 	andeq	r0, r0, r0, lsr #32
 194:	0000015c 	andeq	r0, r0, ip, asr r1
 198:	08000890 	stmdaeq	r0, {r4, r7, fp}
 19c:	000000ba 	strheq	r0, [r0], -sl
 1a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1a4:	41018e02 	tstmi	r1, r2, lsl #28
 1a8:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 1ac:	0e580207 	cdpeq	2, 5, cr0, cr8, cr7, {0}
 1b0:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 1b4:	00000020 	andeq	r0, r0, r0, lsr #32
 1b8:	0000015c 	andeq	r0, r0, ip, asr r1
 1bc:	0800094a 	stmdaeq	r0, {r1, r3, r6, r8, fp}
 1c0:	00000090 	muleq	r0, r0, r0
 1c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c8:	41018e02 	tstmi	r1, r2, lsl #28
 1cc:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 1d0:	0e430207 	cdpeq	2, 4, cr0, cr3, cr7, {0}
 1d4:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 1d8:	00000020 	andeq	r0, r0, r0, lsr #32
 1dc:	0000015c 	andeq	r0, r0, ip, asr r1
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	00000034 	andeq	r0, r0, r4, lsr r0
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1f4:	080e5207 	stmdaeq	lr, {r0, r1, r2, r9, ip, lr}
 1f8:	000d0d41 	andeq	r0, sp, r1, asr #26
 1fc:	00000024 	andeq	r0, r0, r4, lsr #32
 200:	0000015c 	andeq	r0, r0, ip, asr r1
 204:	080009da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp}
 208:	00000046 	andeq	r0, r0, r6, asr #32
 20c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
 210:	200e4101 	andcs	r4, lr, r1, lsl #2
 214:	5c070d41 	stcpl	13, cr0, [r7], {65}	; 0x41
 218:	0d41040e 	cfstrdeq	mvd0, [r1, #-56]	; 0xffffffc8
 21c:	0ec7420d 	cdpeq	2, 12, cr4, cr7, cr13, {0}
 220:	00000000 	andeq	r0, r0, r0
 224:	00000020 	andeq	r0, r0, r0, lsr #32
 228:	0000015c 	andeq	r0, r0, ip, asr r1
 22c:	00000000 	andeq	r0, r0, r0
 230:	0000010c 	andeq	r0, r0, ip, lsl #2
 234:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 238:	41018e02 	tstmi	r1, r2, lsl #28
 23c:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 240:	0e7f0207 	cdpeq	2, 7, cr0, cr15, cr7, {0}
 244:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 248:	00000020 	andeq	r0, r0, r0, lsr #32
 24c:	0000015c 	andeq	r0, r0, ip, asr r1
 250:	00000000 	andeq	r0, r0, r0
 254:	0000010c 	andeq	r0, r0, ip, lsl #2
 258:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 25c:	41018e02 	tstmi	r1, r2, lsl #28
 260:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 264:	0e7f0207 	cdpeq	2, 7, cr0, cr15, cr7, {0}
 268:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 26c:	00000020 	andeq	r0, r0, r0, lsr #32
 270:	0000015c 	andeq	r0, r0, ip, asr r1
 274:	00000000 	andeq	r0, r0, r0
 278:	00000036 	andeq	r0, r0, r6, lsr r0
 27c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 280:	41018e02 	tstmi	r1, r2, lsl #28
 284:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 288:	080e5607 	stmdaeq	lr, {r0, r1, r2, r9, sl, ip, lr}
 28c:	000d0d41 	andeq	r0, sp, r1, asr #26
 290:	00000020 	andeq	r0, r0, r0, lsr #32
 294:	0000015c 	andeq	r0, r0, ip, asr r1
 298:	00000000 	andeq	r0, r0, r0
 29c:	00000036 	andeq	r0, r0, r6, lsr r0
 2a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2a4:	41018e02 	tstmi	r1, r2, lsl #28
 2a8:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 2ac:	080e5607 	stmdaeq	lr, {r0, r1, r2, r9, sl, ip, lr}
 2b0:	000d0d41 	andeq	r0, sp, r1, asr #26
 2b4:	00000020 	andeq	r0, r0, r0, lsr #32
 2b8:	0000015c 	andeq	r0, r0, ip, asr r1
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	00000124 	andeq	r0, r0, r4, lsr #2
 2c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c8:	41018e02 	tstmi	r1, r2, lsl #28
 2cc:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 2d0:	0e8b0207 	cdpeq	2, 8, cr0, cr11, cr7, {0}
 2d4:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 2d8:	00000020 	andeq	r0, r0, r0, lsr #32
 2dc:	0000015c 	andeq	r0, r0, ip, asr r1
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	000000a0 	andeq	r0, r0, r0, lsr #1
 2e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ec:	41018e02 	tstmi	r1, r2, lsl #28
 2f0:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 2f4:	0e490207 	cdpeq	2, 4, cr0, cr9, cr7, {0}
 2f8:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 2fc:	00000020 	andeq	r0, r0, r0, lsr #32
 300:	0000015c 	andeq	r0, r0, ip, asr r1
 304:	08000a20 	stmdaeq	r0, {r5, r9, fp}
 308:	000000a0 	andeq	r0, r0, r0, lsr #1
 30c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 310:	41018e02 	tstmi	r1, r2, lsl #28
 314:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 318:	0e490207 	cdpeq	2, 4, cr0, cr9, cr7, {0}
 31c:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 320:	00000020 	andeq	r0, r0, r0, lsr #32
 324:	0000015c 	andeq	r0, r0, ip, asr r1
 328:	00000000 	andeq	r0, r0, r0
 32c:	0000004c 	andeq	r0, r0, ip, asr #32
 330:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 334:	41018e02 	tstmi	r1, r2, lsl #28
 338:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 33c:	080e5f07 	stmdaeq	lr, {r0, r1, r2, r8, r9, sl, fp, ip, lr}
 340:	000d0d41 	andeq	r0, sp, r1, asr #26
 344:	00000020 	andeq	r0, r0, r0, lsr #32
 348:	0000015c 	andeq	r0, r0, ip, asr r1
 34c:	08000ac0 	stmdaeq	r0, {r6, r7, r9, fp}
 350:	0000004c 	andeq	r0, r0, ip, asr #32
 354:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 358:	41018e02 	tstmi	r1, r2, lsl #28
 35c:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 360:	080e5f07 	stmdaeq	lr, {r0, r1, r2, r8, r9, sl, fp, ip, lr}
 364:	000d0d41 	andeq	r0, sp, r1, asr #26
 368:	00000020 	andeq	r0, r0, r0, lsr #32
 36c:	0000015c 	andeq	r0, r0, ip, asr r1
 370:	08000b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp}
 374:	00000026 	andeq	r0, r0, r6, lsr #32
 378:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 37c:	41018e02 	tstmi	r1, r2, lsl #28
 380:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 384:	080e4e07 	stmdaeq	lr, {r0, r1, r2, r9, sl, fp, lr}
 388:	000d0d41 	andeq	r0, sp, r1, asr #26
 38c:	00000024 	andeq	r0, r0, r4, lsr #32
 390:	0000015c 	andeq	r0, r0, ip, asr r1
 394:	00000000 	andeq	r0, r0, r0
 398:	00000078 	andeq	r0, r0, r8, ror r0
 39c:	87040e41 	strhi	r0, [r4, -r1, asr #28]
 3a0:	200e4101 	andcs	r4, lr, r1, lsl #2
 3a4:	72070d41 	andvc	r0, r7, #4160	; 0x1040
 3a8:	0d41040e 	cfstrdeq	mvd0, [r1, #-56]	; 0xffffffc8
 3ac:	0ec7420d 	cdpeq	2, 12, cr4, cr7, cr13, {0}
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	00000020 	andeq	r0, r0, r0, lsr #32
 3b8:	0000015c 	andeq	r0, r0, ip, asr r1
 3bc:	00000000 	andeq	r0, r0, r0
 3c0:	00000098 	muleq	r0, r8, r0
 3c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3c8:	41018e02 	tstmi	r1, r2, lsl #28
 3cc:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 3d0:	0e450207 	cdpeq	2, 4, cr0, cr5, cr7, {0}
 3d4:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 3d8:	00000020 	andeq	r0, r0, r0, lsr #32
 3dc:	0000015c 	andeq	r0, r0, ip, asr r1
 3e0:	00000000 	andeq	r0, r0, r0
 3e4:	000000ac 	andeq	r0, r0, ip, lsr #1
 3e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3ec:	41018e02 	tstmi	r1, r2, lsl #28
 3f0:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 3f4:	0e4f0207 	cdpeq	2, 4, cr0, cr15, cr7, {0}
 3f8:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 3fc:	00000020 	andeq	r0, r0, r0, lsr #32
 400:	0000015c 	andeq	r0, r0, ip, asr r1
 404:	00000000 	andeq	r0, r0, r0
 408:	00000032 	andeq	r0, r0, r2, lsr r0
 40c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 410:	41018e02 	tstmi	r1, r2, lsl #28
 414:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 418:	080e5407 	stmdaeq	lr, {r0, r1, r2, sl, ip, lr}
 41c:	000d0d41 	andeq	r0, sp, r1, asr #26
 420:	00000020 	andeq	r0, r0, r0, lsr #32
 424:	0000015c 	andeq	r0, r0, ip, asr r1
 428:	00000000 	andeq	r0, r0, r0
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 434:	41018e02 	tstmi	r1, r2, lsl #28
 438:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 43c:	080e4907 	stmdaeq	lr, {r0, r1, r2, r8, fp, lr}
 440:	000d0d41 	andeq	r0, sp, r1, asr #26
 444:	00000020 	andeq	r0, r0, r0, lsr #32
 448:	0000015c 	andeq	r0, r0, ip, asr r1
 44c:	00000000 	andeq	r0, r0, r0
 450:	00000048 	andeq	r0, r0, r8, asr #32
 454:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 458:	41018e02 	tstmi	r1, r2, lsl #28
 45c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 460:	080e5b07 	stmdaeq	lr, {r0, r1, r2, r8, r9, fp, ip, lr}
 464:	000d0d41 	andeq	r0, sp, r1, asr #26
 468:	00000024 	andeq	r0, r0, r4, lsr #32
 46c:	0000015c 	andeq	r0, r0, ip, asr r1
 470:	00000000 	andeq	r0, r0, r0
 474:	00000038 	andeq	r0, r0, r8, lsr r0
 478:	87040e41 	strhi	r0, [r4, -r1, asr #28]
 47c:	180e4101 	stmdane	lr, {r0, r8, lr}
 480:	53070d41 	movwpl	r0, #32065	; 0x7d41
 484:	0d41040e 	cfstrdeq	mvd0, [r1, #-56]	; 0xffffffc8
 488:	0ec7420d 	cdpeq	2, 12, cr4, cr7, cr13, {0}
 48c:	00000000 	andeq	r0, r0, r0
 490:	00000024 	andeq	r0, r0, r4, lsr #32
 494:	0000015c 	andeq	r0, r0, ip, asr r1
 498:	00000000 	andeq	r0, r0, r0
 49c:	00000038 	andeq	r0, r0, r8, lsr r0
 4a0:	87040e41 	strhi	r0, [r4, -r1, asr #28]
 4a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 4a8:	53070d41 	movwpl	r0, #32065	; 0x7d41
 4ac:	0d41040e 	cfstrdeq	mvd0, [r1, #-56]	; 0xffffffc8
 4b0:	0ec7420d 	cdpeq	2, 12, cr4, cr7, cr13, {0}
 4b4:	00000000 	andeq	r0, r0, r0
 4b8:	00000020 	andeq	r0, r0, r0, lsr #32
 4bc:	0000015c 	andeq	r0, r0, ip, asr r1
 4c0:	00000000 	andeq	r0, r0, r0
 4c4:	00000104 	andeq	r0, r0, r4, lsl #2
 4c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4cc:	41018e02 	tstmi	r1, r2, lsl #28
 4d0:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 4d4:	0e7a0207 	cdpeq	2, 7, cr0, cr10, cr7, {0}
 4d8:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 4dc:	00000020 	andeq	r0, r0, r0, lsr #32
 4e0:	0000015c 	andeq	r0, r0, ip, asr r1
 4e4:	00000000 	andeq	r0, r0, r0
 4e8:	00000108 	andeq	r0, r0, r8, lsl #2
 4ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4f0:	41018e02 	tstmi	r1, r2, lsl #28
 4f4:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 4f8:	0e7c0207 	cdpeq	2, 7, cr0, cr12, cr7, {0}
 4fc:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 500:	00000020 	andeq	r0, r0, r0, lsr #32
 504:	0000015c 	andeq	r0, r0, ip, asr r1
 508:	08000b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp}
 50c:	00000094 	muleq	r0, r4, r0
 510:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 514:	41018e02 	tstmi	r1, r2, lsl #28
 518:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 51c:	0e430207 	cdpeq	2, 4, cr0, cr3, cr7, {0}
 520:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 524:	00000020 	andeq	r0, r0, r0, lsr #32
 528:	0000015c 	andeq	r0, r0, ip, asr r1
 52c:	00000000 	andeq	r0, r0, r0
 530:	00000098 	muleq	r0, r8, r0
 534:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 538:	41018e02 	tstmi	r1, r2, lsl #28
 53c:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 540:	0e450207 	cdpeq	2, 4, cr0, cr5, cr7, {0}
 544:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 548:	00000020 	andeq	r0, r0, r0, lsr #32
 54c:	0000015c 	andeq	r0, r0, ip, asr r1
 550:	00000000 	andeq	r0, r0, r0
 554:	0000006c 	andeq	r0, r0, ip, rrx
 558:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 55c:	41018e02 	tstmi	r1, r2, lsl #28
 560:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 564:	080e6f07 	stmdaeq	lr, {r0, r1, r2, r8, r9, sl, fp, sp, lr}
 568:	000d0d41 	andeq	r0, sp, r1, asr #26
 56c:	00000020 	andeq	r0, r0, r0, lsr #32
 570:	0000015c 	andeq	r0, r0, ip, asr r1
 574:	00000000 	andeq	r0, r0, r0
 578:	0000006c 	andeq	r0, r0, ip, rrx
 57c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 580:	41018e02 	tstmi	r1, r2, lsl #28
 584:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 588:	080e6f07 	stmdaeq	lr, {r0, r1, r2, r8, r9, sl, fp, sp, lr}
 58c:	000d0d41 	andeq	r0, sp, r1, asr #26
 590:	00000020 	andeq	r0, r0, r0, lsr #32
 594:	0000015c 	andeq	r0, r0, ip, asr r1
 598:	00000000 	andeq	r0, r0, r0
 59c:	0000006c 	andeq	r0, r0, ip, rrx
 5a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5a4:	41018e02 	tstmi	r1, r2, lsl #28
 5a8:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 5ac:	080e6f07 	stmdaeq	lr, {r0, r1, r2, r8, r9, sl, fp, sp, lr}
 5b0:	000d0d41 	andeq	r0, sp, r1, asr #26
 5b4:	00000020 	andeq	r0, r0, r0, lsr #32
 5b8:	0000015c 	andeq	r0, r0, ip, asr r1
 5bc:	00000000 	andeq	r0, r0, r0
 5c0:	0000006c 	andeq	r0, r0, ip, rrx
 5c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5c8:	41018e02 	tstmi	r1, r2, lsl #28
 5cc:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 5d0:	080e6f07 	stmdaeq	lr, {r0, r1, r2, r8, r9, sl, fp, sp, lr}
 5d4:	000d0d41 	andeq	r0, sp, r1, asr #26
 5d8:	00000018 	andeq	r0, r0, r8, lsl r0
 5dc:	0000015c 	andeq	r0, r0, ip, asr r1
 5e0:	00000000 	andeq	r0, r0, r0
 5e4:	0000000c 	andeq	r0, r0, ip
 5e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5ec:	41018e02 	tstmi	r1, r2, lsl #28
 5f0:	0000070d 	andeq	r0, r0, sp, lsl #14
 5f4:	00000020 	andeq	r0, r0, r0, lsr #32
 5f8:	0000015c 	andeq	r0, r0, ip, asr r1
 5fc:	00000000 	andeq	r0, r0, r0
 600:	000000b8 	strheq	r0, [r0], -r8
 604:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 608:	41018e02 	tstmi	r1, r2, lsl #28
 60c:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 610:	0e4f0207 	cdpeq	2, 4, cr0, cr15, cr7, {0}
 614:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 618:	00000020 	andeq	r0, r0, r0, lsr #32
 61c:	0000015c 	andeq	r0, r0, ip, asr r1
 620:	00000000 	andeq	r0, r0, r0
 624:	00000128 	andeq	r0, r0, r8, lsr #2
 628:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 62c:	41018e02 	tstmi	r1, r2, lsl #28
 630:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 634:	0e890207 	cdpeq	2, 8, cr0, cr9, cr7, {0}
 638:	0d0d4108 	stfeqs	f4, [sp, #-32]	; 0xffffffe0
 63c:	00000020 	andeq	r0, r0, r0, lsr #32
 640:	0000015c 	andeq	r0, r0, ip, asr r1
 644:	00000000 	andeq	r0, r0, r0
 648:	00000030 	andeq	r0, r0, r0, lsr r0
 64c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 650:	41018e02 	tstmi	r1, r2, lsl #28
 654:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 658:	080e5007 	stmdaeq	lr, {r0, r1, r2, ip, lr}
 65c:	000d0d41 	andeq	r0, sp, r1, asr #26
 660:	00000024 	andeq	r0, r0, r4, lsr #32
 664:	0000015c 	andeq	r0, r0, ip, asr r1
 668:	00000000 	andeq	r0, r0, r0
 66c:	00000074 	andeq	r0, r0, r4, ror r0
 670:	87040e41 	strhi	r0, [r4, -r1, asr #28]
 674:	200e4101 	andcs	r4, lr, r1, lsl #2
 678:	71070d41 	tstvc	r7, r1, asr #26
 67c:	0d41040e 	cfstrdeq	mvd0, [r1, #-56]	; 0xffffffc8
 680:	0ec7420d 	cdpeq	2, 12, cr4, cr7, cr13, {0}
 684:	00000000 	andeq	r0, r0, r0
 688:	0000000c 	andeq	r0, r0, ip
 68c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 690:	7c020001 	stcvc	0, cr0, [r2], {1}
 694:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 698:	00000014 	andeq	r0, r0, r4, lsl r0
 69c:	00000688 	andeq	r0, r0, r8, lsl #13
 6a0:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
 6a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a8:	84080e47 	strhi	r0, [r8], #-3655	; 0xfffff1b9
 6ac:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
   0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   4:	00000000 	andeq	r0, r0, r0
   8:	08000788 	stmdaeq	r0, {r3, r7, r8, r9, sl}
  INIT();
   c:	080007d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl}
  10:	080007d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl}
  14:	080007da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl}
	...
